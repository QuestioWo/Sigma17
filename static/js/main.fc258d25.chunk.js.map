{"version":3,"sources":["components/utils/mode/sigma16.js","AppliedRoute.js","components/NavBar.js","components/HomeView.js","components/utils/Emulator.js","components/DocumentationView.js","components/utils/CustomDropdown.js","components/utils/CodeChunk.js","components/ProgramEditorView.js","components/ProgramDebugView.js","App.js","serviceWorker.js","index.js"],"names":["mod","CodeMirror","require","defineMode","words","str","split","allCommands","tokenBase","stream","state","eatSpace","eat","ch","next","peek","skipToEnd","test","eatWhile","eol","cur","current","hasOwnProperty","tokenize","tokens","registerHelper","style","dict","i","length","define","startState","token","defineMIME","C","component","cProps","props","rest","render","NavBar","Nav","onClick","this","fill","variant","defaultActiveKey","pathname","Item","className","isActive","match","location","activeClassName","to","React","Component","HomeView","context","saveStorage","e","sessionStorage","setItem","code","input","breakpoints","toggleDarkMode","localStorage","getItem","document","body","classList","replace","setState","map","breakpointString","Number","undefined","add","Fragment","Row","Col","type","defaultChecked","display","marginLeft","href","target","rel","sub","mul","div","cmplt","cmpeq","cmpgt","and","andold","or","orold","xor","xorold","trap","cmp","inv","invold","lea","load","store","jumpf","jumpt","jal","testset","jump","jumpc0","jumpc1","jumple","jumpne","jumpge","jumpnv","jumpnvu","jumpnco","jumpnso","jumplt","jumpeq","jumpgt","jumpv","jumpvu","jumpco","jumpso","data","rfi","execute","save","restore","getctl","putctl","push","pop","top","addc","shiftl","shiftr","getbit","getbiti","putbit","putbiti","field","extract","extracti","inject","injecti","logicb","logicw","andb","orb","xorb","invb","andnew","ornew","xornew","invnew","partiallyCompatibleCommands","nonCompatibleCommands","firstColumn","Math","pow","secondColumn","thirdColumn","fourthColumn","rrCommands","rrrCommands","jxCommands","jumpAliasCommands","kxCommands","rxCommands","xCommands","noEXPCommands","rrEXPCommands","rrxEXPCommands","rcEXPCommands","rrrEXPCommands","rrkEXPCommands","rkEXPCommands","rrkkEXPCommands","rrrkkEXPCommands","rrrkEXPCommands","logicAliasRRRKCommands","logicAliasRRKCommands","logicAliasRRRCommands","logicAliasRRCommands","injectIAliasCommands","allCommandsList","Object","keys","registerRegExp","constantPositiveRegExp","dispAndIndexRegExp","rrRegExp","RegExp","rrrRegExp","jxRegExp","kxRegExp","rxRegExp","xRegExp","rrxRegExp","rcRegExp","rrkRegExp","rkRegExp","rkkRegExp","rrkkRegExp","rrrkkRegExp","rrrkRegExp","readSignedHex","a","readUnsignedHex","readConstant","argument","labels","info","isNaN","isValidNumber","parseBy","startsWith","slice","parseInt","includes","readCompatibleConstant","numString","num","isValidNumberBit","writeHex","x","toString","getBitFromRegister","registerValue","bitNum","setBitInRegister","bitValue","shiftLDist","setBitInRegisterMultiple","destRegisterValue","sourceRegisterValue","bitFrom","bitTo","radjustedField","guarantee16Bits","number","checkRRCommand","rr","checkRRRCommand","rrr","checkJXCommand","jx","disp","checkRRXexpCommand","rrx","isValidNumberGH","checkRRKexpCommand","rrk","checkRRRKexpCommand","rrrk","checkCommands","command","check","rk","rc","kx","splat","k","checkKXCommand","rx","checkRXCommand","xsplit","xtest","checkXCommand","rrkk","g","h","checkRRKKexpCommand","rrrkk","checkRRRKKexpCommand","rkk","checkRKKexpCommand","checkLine","line","label","linesplit","trim","error","checkCommandIsCompatible","result","warn","checkLineIsComaptible","parsed","checkCodeIsCompatible","lines","lineWarn","lineError","compatible","findInstuctionInfo","op","generateMachineCode","commandInfo","argumentInfo","d","b","f","gh","argumentList","findArgumentInfo","parseLineForLabels","instructionWords","justLabel","parseLineForMachineCode","machineCode","findLineInfo","lineResult","comment","infoToLine","setMemory","memory","compareRegisters","RaValue","RbValue","flagDict","RaValueSigned","RbValueSigned","signedEquals","runFromInstruction","control","registers","output","instructionIr","instructionADR","halted","processed","jumped","Op","floor","Rd","Ra","Rb","setR15","memoryBufferStartInput","charCodeAt","memoryBufferStartOutput","it","String","fromCharCode","processTRAPInstruction","adr","ab","Re","Rf","effectiveADRsave","diffSave","abs","iSave","regNoSave","effectiveADRrestore","diffRestore","iRestore","regNoRestore","validMemoryRestore","resultExtract","resultExtractI","bitToSetAnd","bitToSetXor","bitToSetOr","bitToSetInv","bit","bitI","bitToSetPut","bitToSetPutI","R15CarryBit","processEXPInstruction","effectiveADR","processRXInstruction","r15","setR15Flags","runMemory","testMode","ran","DocumentationView","setParentState","searchChoose","value","scrollToId","displayCopy","searchSubHeadings","displayNameList","scrollOnOpen","scrollTo","contentsChoose","blur","sliced","id","infoAreaOpenCallback","Promise","r","setTimeout","setDisplaysClose","setDisplaysAs","setDisplaysOpen","showName","bind","title","flags","renderUnless","flag","key","opCode","opCodeName","compiledCommands","Emulator","writtenCommands","is","why","groupedAs","parsedAs","func","toMc","getElementById","scrollIntoView","as","subHeadings","indent","md","isSearchable","options","theme","borderRadius","onChange","placeholder","Button","size","float","depth","subHeading","index","Table","bordered","hover","theOriginalEmulator","marginBottom","flagsSet","wrongGroupings","expParsedAs","summaryTableRow","width","height","src","process","alt","color","InfoArea","toggleCollapse","passed","ifCallback","Collapse","in","onEntered","children","CustomToggle","forwardRef","ref","left","transform","preventDefault","CustomMenu","CodeMirrorComponent","breakpointOnClick","breakpoint","breakpointsCopy","lineNo","currentTarget","indexOf","splice","breakpointCallback","breakpointToggle","editor","lineNumber","index0","disableBreakpoints","lineNumberCallBack","innerText","checkCode","Infinity","changedLineFrom","changedLineTo","updateState","lineErrorCopy","currentLine","justLabelOffset","ranSuccessfully","linesDotted","lineToScrollTo","lineErrorKeys","lineCompWarnKeys","lineCompErrorKeys","lineCompWarn","lineCompError","lineI","styleTop","OverlayTrigger","placement","overlay","Tooltip","ite","heightOfOverlay","overlayDisplay","lineNoWidth","lineNoWidthLength","log","LOG10E","marginTop","alertShow","breakpointsColumn","lineNumbersMethod","activeHeight","activeLineOverlay","lastHeight","lastLineOverlay","codeMirrorClassName","onBeforeChange","origin","from","onGutterClick","mode","lineNumbers","readOnly","autoCursor","ProgramEditorView","codeRef","memoryViewPrev","prevState","memoryViewStart","memoryViewNext","handleMemoryViewChange","closeAlert","alert","runModalClose","modal","resetCPUandMemory","runModalShow","resizeOutput","outputColumn","outputZoomed","parseCode","button","trimmed","iter","updateAlert","keysString","runCode","console","time","canRun","canRunCode","localControl","cpuControl","localRegisters","localMemory","localInput","localOutput","memoryOptions","timeEnd","setInput","inputModalShow","inputUpdate","textarea","inputRef","inputModalClose","downloadRaw","textValue","fileName","endsWith","downloadFile","fileNameUpdate","fileNameHandleKeyDown","downloadModalClose","downloadAs","downloadRawCompatible","downloadBinary","downloadHex","downloadHexCompatible","downloadModalShow","downloadModalCloseNon","downloadModalOpen","downloadModalRadio","uploadDisplay","click","uploadFile","reader","FileReader","onload","array","Uint16Array","newCode","hiByte","readAsArrayBuffer","files","alertMessage","alertNature","memoryViewOptions","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","createRef","sessionProps","controls","controlKeys","textAlign","onDoubleClick","memoryKeys","memorykeyindex","memoryValues","Dropdown","onSelect","Toggle","Menu","option","eventKey","active","message","nature","name","content","mimeType","element","createElement","setAttribute","encodeURIComponent","appendChild","removeChild","checkCompatible","codeResult","loByte","blob","Blob","url","window","URL","createObjectURL","Modal","show","onHide","dialogClassName","animation","Header","closeButton","Title","Body","controlColumn","registerColumn","memoryColumn","InputGroup","autoFocus","paddingTop","paddingBottom","ToggleButtonGroup","defaultValue","ToggleButton","FormControl","onKeyDown","Append","Text","getExtension","Alert","onClose","dismissible","ButtonGroup","accept","PureComponent","_","ProgramDebugView","toggleCodeChunk","showCodeChunk","toggleFollowCode","updateScrollPositionCode","toggleFollowMemory","updateScrollPositionMemory","inputRan","lastRanLine","activeLine","initialRegisters","assign","initialMemory","encounteredBreakpoint","breakpointsMachineCode","setLastLineScrollPosition","lastLine","changedRegisters","omit","v","changedMemory","stepForward","resetDebug","outputModalOpen","outputModalShow","outputModalClose","lastLineScrollPosition","lastLineScrollPositionMemory","memoryToLine","lineToMemory","createLineNumberColumn","propsState","parseForBreakpoints","disabled","classNameRegister","classNameMemory","decoration","textDecoration","onClickHandler","linesOfCode","yOffset","parsedMachineCodeStringStart","parsedMachineCodeStringCodes","parsedMachineCodeString","toLowerCase","nextLineBreakpoint","mcLengthBefore","memoryNew","activeLineInCode","lastLineInCode","activeHeightOfOverlay","lastHeightOfOverlay","inputColumn","borderRight","App","stateCode","stateBreakpoints","stateInput","AppliedRoute","exact","path","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc258d25.chunk.js","sourcesContent":["/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"codemirror\"));\n})(function(CodeMirror) {\n\n  CodeMirror.defineMode('sigma16', function() {\n\n    var words = function(str) { return str.split(\" \"); };\n    function define(style, dict) {\n      for(var i = 0; i < dict.length; i++) {\n        words[dict[i]] = style;\n      }\n    };\n\n    const allCommands = [ \"add\", \"sub\", \"mul\", \"div\", \"cmplt\", \"cmpeq\", \"cmpgt\", \"and\", \"andold\", \"or\", \"orold\", \"xor\", \"xorold\", \"trap\", \"cmp\", \"inv\", \"invold\",\n                          \"lea\", \"load\", \"store\", \"jumpf\", \"jumpt\", \"jal\", \"testset\", \"jump\", \"jumpc0\", \"jumpc1\", \"jumple\", \"jumpne\", \"jumpge\", \"jumpnv\", \"jumpnvu\", \"jumpnco\", \"jumpnso\", \"jumplt\", \"jumpeq\", \"jumpgt\", \"jumpv\", \"jumpvu\", \"jumpco\", \"jumpso\",\n                          \"data\",\n                          \"rfi\", \"execute\", \"save\", \"restore\", \"getctl\", \"putctl\", \"push\", \"pop\", \"top\", \"addc\", \"shiftl\", \"shiftr\", \"getbit\", \"getbiti\", \"putbit\", \"putbiti\", \"field\", \"extract\", \"extracti\", \"inject\", \"injecti\", \"logicb\", \"logicw\", \"andb\", \"orb\", \"xorb\", \"invb\", \"andnew\", \"ornew\", \"xornew\", \"invnew\" ];\n\n    CodeMirror.registerHelper(\"hintWords\", \"sigma16\", allCommands);\n\n    define('keyword', allCommands);\n\n    function tokenBase(stream, state) {\n      if ( stream.eatSpace() ) return null;\n      if ( stream.eat( ',' ) ) return null;\n      if ( stream.eat( '[' ) ) return null;\n      if ( stream.eat( ']' ) ) return null;\n\n      var ch = stream.next();\n      var peek = stream.peek();\n\n      if (ch === ';') {\n        stream.skipToEnd();\n        return 'comment';\n      } else if ( /(r|R)([0-9])/.test( ch + peek ) ) {\n        if ( /(1)/.test( peek ) ) {\n          stream.next();\n          peek = stream.peek();\n\n          if ( /([0-5])/.test(peek) ) {\n            stream.next();\n          }\n        } else {\n          stream.next();\n        }\n        return 'def';   \n      } else if ( ch === '$' ) {\n        stream.eatWhile( /((\\d)|([a-f])|([A-F]))/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      } else if ( ch === '#' ) {\n        stream.eatWhile( /1|0/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      } else if ( ch === '-' ) {\n        stream.eatWhile( /\\d/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      } else if ( /\\d/.test( ch ) ) {\n        stream.eatWhile( /\\d/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      }\n      stream.eatWhile(/[\\w]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : null;\n    }\n\n    function tokenize(stream, state) {\n      return (state.tokens[0] || tokenBase) (stream, state);\n    };\n\n    return {\n      startState: function() {return {tokens:[]};},\n      token: function(stream, state) {\n        return tokenize(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMIME('text/plain', 'sigma16');\n\n});","import React from \"react\";\n\nimport { Route } from \"react-router-dom\";\n\nexport default ({ component: C, props: cProps, ...rest }) =>\n  <Route {...rest} render={props => <C {...props} {...cProps} />} />;","/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\nimport React from 'react';\n\nimport { NavLink } from 'react-router-dom';\nimport { Nav } from 'react-bootstrap';\n\nexport default class NavBar extends React.Component {\n  constructor ( props ) {\n    super( props )\n\n    this.props = props;\n  }\n\n  render() {\n    return(\n      <Nav onClick={this.props.onClick} fill variant=\"tabs\" defaultActiveKey={this.props.pathname}>\n        <Nav.Item>\n          <NavLink \n            className='nav-link'\n            isActive={(match, location) => {\n              return( location.pathname === '/' );\n            }}\n            activeClassName='nav-link active' \n            to={{pathname : '/'}}>\n            Home\n          </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className='nav-link'\n            activeClassName='nav-link active' \n            to={{pathname : '/documentation'}}>\n            Documentation\n          </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className='nav-link'\n            activeClassName='nav-link active' \n            to={{pathname : '/editor'}}>\n            Editor\n          </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className='nav-link'\n            activeClassName='nav-link active' \n            to={{pathname : '/debug'}}>\n            Debug\n          </NavLink>\n        </Nav.Item>\n      </Nav>\n    );\n  }\n}","/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\nimport React from 'react';\n\nimport './HomeView.css';\n\nimport { Link } from 'react-router-dom';\nimport { Col, Row } from 'react-bootstrap';\n\nimport NavBar from './NavBar';\n\nexport default class HomeView extends React.Component {\n// CLASS METHODS\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if ( sessionStorage.getItem( 'code' ) !== null && sessionStorage.getItem( 'input' ) !== null && sessionStorage.getItem( 'breakpoints' ) !== null ) {\n      this.setState( {\n        code : sessionStorage.getItem( 'code' ),\n        input : sessionStorage.getItem( 'input' ),\n        breakpoints : sessionStorage.getItem( 'breakpoints' ).split( ',' ).map(\n          breakpointString => {\n            return( Number( breakpointString ) );\n          }\n        )\n      } );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( this.props );\n    }\n  }\n\n  saveStorage = e => {\n    sessionStorage.setItem( 'code', this.state.code );\n    sessionStorage.setItem( 'input', this.state.input );\n    sessionStorage.setItem( 'breakpoints', this.state.breakpoints );\n  }\n\n// DARK MODE\n  toggleDarkMode = e => {\n    localStorage.setItem( 'theme', localStorage.getItem( 'theme' ) === 'light' ? 'dark' : 'light' );\n    \n    document.body.classList.replace( localStorage.getItem( 'theme' ) === 'light' ? 'dark' : 'light', localStorage.getItem( 'theme' ) );\n  }\n\n// RENDER\n  render() {\n    if ( localStorage.getItem( 'theme' ) !== null ) {\n      document.body.classList.replace( localStorage.getItem( 'theme' ) === 'light' ? 'dark' : 'light', localStorage.getItem( 'theme' ) );\n    } else {\n      document.body.classList.add( 'light' );\n\n      localStorage.setItem( 'theme', 'light' );\n    }\n\n    return(\n      <React.Fragment>\n        <NavBar onClick={this.saveStorage} pathname={this.props.location.pathname} />\n        <div className=\"mainbody\">\n          <Row>\n            <Col>\n              <h1>Sigma17 home page</h1>\n            </Col>\n            <Col>\n              <div className='dark-mode-container' >\n                <label className=\"switch\">\n                  <input \n                    type=\"checkbox\" \n                    onClick={this.toggleDarkMode}\n                    defaultChecked={localStorage.getItem( 'theme' ) !== null ? localStorage.getItem( 'theme' ) === 'dark' : false }\n                  />\n                  <span className=\"slider round\"></span>\n                </label>\n                <div style={{display : 'inline-block', marginLeft : '10px'}}>\n                  <strong>Dark Mode</strong>\n                </div>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              Sigma16 is a computer architecture designed for research and teaching in computer systems. This application provides a complete environment for experimenting with the architecture.\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              Currently, this emulator and IDE runs <strong>fully functional</strong> on, but not limited to, <strong>Google Chrome</strong>, <strong>Safari</strong>, and, <strong>Firefox</strong>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              When using the emulator, <strong>do not</strong> navigate the pages with the browser's built-in forward and backwards buttons as <strong>code will not save.</strong> Navigate using <strong>only</strong> the nav bar at the top of the screen\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"click-editor\">\n                <Link to={{pathname : \"/editor\"}}>\n                  Click Here To Run IDE\n                </Link>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              This web-based IDE is not to be used in complete replacement the original written by John O'Donnel as it has properties of it which could mean that programs written using this emulator <strong>will not work</strong> with the original and could lead to repercussions because of it\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"click-editor\">\n                <a href=\"https://github.com/QuestioWo/Sigma17\" target='_blank' rel='noopener noreferrer'>\n                  View Source Directory on GitHub\n                </a>\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\n// CONSTS FOR COMMAND RECOGNITION\n  const allCommands = {\n    add : 'rrr', \n    sub : 'rrr', \n    mul : 'rrr', \n    div : 'rrr', \n    cmplt : 'rrr', \n    cmpeq : 'rrr', \n    cmpgt : 'rrr', \n    and : 'rrr', \n    andold : 'rrr', \n    or : 'rrr', \n    orold : 'rrr', \n    xor : 'rrr',\n    xorold : 'rrr',\n    trap : 'rrr',\n\n    cmp : 'rr', \n    inv : 'rr',\n    invold : 'rr',\n\n    lea : 'rx', \n    load : 'rx', \n    store : 'rx', \n    jumpf : 'rx', \n    jumpt : 'rx', \n    jal : 'rx', \n    testset : 'rx',\n\n    jump : 'jx', \n\n    jumpc0 : 'kx', \n    jumpc1 : 'kx',\n\n    jumple : 'jumpAlias',\n    jumpne : 'jumpAlias',\n    jumpge : 'jumpAlias',\n    jumpnv : 'jumpAlias',\n    jumpnvu : 'jumpAlias',\n    jumpnco : 'jumpAlias',\n    jumpnso : 'jumpAlias',\n\n    jumplt : 'jumpAlias',\n    jumpeq : 'jumpAlias',\n    jumpgt : 'jumpAlias',\n    jumpv : 'jumpAlias',\n    jumpvu : 'jumpAlias',\n    jumpco : 'jumpAlias',\n    jumpso : 'jumpAlias',\n\n    data : 'x',\n\n    rfi : 'noEXP',\n\n    execute : 'rrEXP',\n\n    save : 'rrxEXP',\n    restore : 'rrxEXP',\n\n    getctl : 'rcEXP',\n    putctl : 'rcEXP',\n\n    push : 'rrrEXP',\n    pop : 'rrrEXP',\n    top : 'rrrEXP',\n    addc : 'rrrEXP',\n\n    shiftl : 'rrkEXP',\n    shiftr : 'rrkEXP',\n\n    getbit : 'rkEXP',\n    getbiti : 'rkEXP',\n    putbit : 'rkEXP',\n    putbiti : 'rkEXP',\n\n    field : 'injectIAlias',\n\n    extract : 'rrkkEXP',\n    extracti : 'rrkkEXP',\n\n    inject : 'rrrkkEXP',\n    injecti : 'rrrkkEXP',\n    logicb : 'rrrkkEXP',\n\n    logicw : 'rrrkEXP',\n\n    andb : 'logicAliasRRRK',\n    orb : 'logicAliasRRRK',\n    xorb : 'logicAliasRRRK',\n\n    invb : 'logicAliasRRK',\n\n    andnew : 'logicAliasRRR',\n    ornew : 'logicAliasRRR',\n    xornew : 'logicAliasRRR',\n\n    invnew : 'logicAliasRR'\n  };\n\n  // const fullyCompatibleCommands = [\n  //   'add',\n  //   'sub',\n  //   'mul',\n  //   'div',\n  //   'cmp',\n  //   'cmplt',\n  //   'cmpeq',\n  //   'cmpgt',\n  //   'inv',\n  //   'invold',\n  //   'and',\n  //   'andold',\n  //   'or',\n  //   'orold',\n  //   'xor',\n  //   'xorold',\n  //   'trap',\n\n  //   'lea',\n  //   'load',\n  //   'store',\n  //   'jump',\n  //   'jumpc0',\n  //   'jumpc1',\n  //   'jumpf',\n  //   'jumpt',\n  //   'jal',\n\n  //   'jumple',\n  //   'jumpne',\n  //   'jumpge',\n  //   'jumpnv',\n  //   'jumpnvu',\n  //   'jumpnco',\n\n  //   'jumplt',\n  //   'jumpeq',\n  //   'jumpgt',\n  //   'jumpv',\n  //   'jumpvu',\n  //   'jumpco',\n\n  //   'data',\n\n  //   'save',\n  //   'restore',\n\n  //   'shiftl',\n  //   'shiftr',\n\n  //   'extract',\n  //   'extracti',\n\n  //   'inject',\n  //   'injecti',\n  //   'logicb',\n\n  //   'logicw',\n\n  //   'andb',\n  //   'orb',\n  //   'xorb',\n\n  //   'invb'\n  // ];\n\n  const partiallyCompatibleCommands = { // recognised by assembler but has other effects\n    testset : 'Assembles but no functionality',\n    rfi : 'Assembles, but hangs when ran in a program',\n    execute : 'Assembles, however, not as per docs and has no functionality',\n    getctl : 'Assembles differently and has different range of functionality',\n    putctl : 'Assembles differently and has different range of functionality',\n    push : 'Assembles but no functionality',\n    pop : 'Assembles but no functionality',\n    top : 'Assembles but no functionality',\n    field : 'Assembler accepts but does not produce any codes'\n  };\n\n  const nonCompatibleCommands = [ // not even recognised by assembler\n    'addc',\n    'getbit',\n    'getbiti',\n    'putbit',\n    'putbiti',\n    'jumpnso',\n    'jumpso',\n    'andnew',\n    'ornew',\n    'xornew',\n    'invnew'\n  ];\n  \n  const firstColumn = Math.pow( 16, 3 );\n  const secondColumn = Math.pow( 16, 2 );\n  const thirdColumn = Math.pow( 16, 1 );\n  const fourthColumn = Math.pow( 16, 0 );\n\n  // RRR\n    const rrCommands = {\n      cmp : 4,\n      inv : 8,\n      invold : 8\n    };\n    const rrrCommands = { \n      add : 0, \n      sub : 1,\n      mul : 2,\n      div : 3,\n      cmplt : 5,\n      cmpeq : 6,\n      cmpgt : 7,\n      and : 9,\n      andold : 9,\n      or : 0xa,\n      orold : 0xa,\n      xor : 0xb,\n      xorold : 0xb,\n      trap : 0xd\n    };\n\n  // RX\n    const jxCommands = {\n      jump : 3\n    };\n    const jumpAliasCommands = { // 4 is jumpc0, 5 is jumpc1\n      jumple : [ 4, 1 ],\n      jumpne : [ 4, 2 ],\n      jumpge : [ 4, 3 ],\n      jumpnv : [ 4, 6 ],\n      jumpnvu : [ 4, 5 ],\n      jumpnco : [ 4, 7 ],\n      jumpnso : [ 4, 8 ],\n\n      jumplt : [ 5, 3 ],\n      jumpeq : [ 5, 2 ],\n      jumpgt : [ 5, 1 ],\n      jumpv : [ 5, 6 ],\n      jumpvu : [ 5, 5 ],\n      jumpco : [ 5, 7 ],\n      jumpso : [ 5, 8 ]\n    };\n    const kxCommands = {\n      jumpc0 : 4,\n      jumpc1 : 5\n    };\n    const rxCommands = {\n      lea : 0,\n      load : 1,\n      store : 2,\n      jumpf : 6,\n      jumpt : 7,\n      jal : 8,\n      testset : 9\n    };\n\n  // X\n    const xCommands = {\n      data : 0 // data doesnt have an op code since it kind of isnt a command but for convention sake, its in a dictionary\n    };\n\n  // EXP\n    const noEXPCommands = {\n      rfi : 0\n    };\n\n    const rrEXPCommands = {\n      execute : 0xc\n    };\n\n    const rrxEXPCommands = {\n      save : 8,\n      restore : 9\n    };\n\n    const rcEXPCommands = {\n      getctl : 0xa,\n      putctl : 0xb\n    };\n\n    const rrrEXPCommands = {\n      push : 0xd,\n      pop : 0xe,\n      top : 0xf,\n      addc : 0x1c\n    };\n\n    const rrkEXPCommands = {\n      shiftl : 0x10,\n      shiftr : 0x11,\n    };\n\n    const rkEXPCommands = {\n      getbit : 0x18,\n      getbiti : 0x19,\n      putbit : 0x1a,\n      putbiti : 0x1b,\n    };\n\n    const rrkkEXPCommands = {\n      extract : 0x12,\n      extracti : 0x13\n    };\n\n    const rrrkkEXPCommands = {\n      inject : 0x14,\n      injecti : 0x15,\n      logicb : 0x17\n    };\n\n    const rrrkEXPCommands = {\n      logicw : 0x16\n    };\n\n    const logicAliasRRRKCommands = {\n      andb : [ 0x17, 1 ],\n      orb : [ 0x17, 7 ],\n      xorb : [ 0x17, 6 ]\n    };\n\n    const logicAliasRRKCommands = {\n      invb : [ 0x17, 0xc ]\n    };\n\n    const logicAliasRRRCommands = {\n      andnew : [ 0x16, 1 ],\n      ornew : [ 0x16, 7 ],\n      xornew : [ 0x16, 6 ]\n    };\n\n    const logicAliasRRCommands = {\n      invnew : [ 0x16, 0xc ]\n    };\n\n    const injectIAliasCommands = {\n      field : [ 0x15, 0, 0 ]\n    };\n\n    const allCommandsList = Object.keys( allCommands );\n\n    const registerRegExp = '[rR]((1[0-5])|([0-9]))';\n    const controlRegisterRegExp = '((pc)|(ir)|(adr))';\n\n    const constantPositiveRegExp = '((\\\\$((\\\\d)|([a-fA-F]))+)|(\\\\#(1|0)+)|(\\\\d))+';\n    const constantRegExp = '((\\\\$((\\\\d)|([a-fA-F]))+)|(\\\\#(1|0)+)|(-\\\\d)|(\\\\d))+';\n\n    const dispAndIndexRegExp = '((\\\\$((\\\\d)|([a-fA-F]))+)|(\\\\#(1|0)+)|(-(\\\\d))|(\\\\d)|(\\\\w))+\\\\[' + registerRegExp + '\\\\]';\n    const dispAndIndexEXPRegExp = '((\\\\$((\\\\d)|([a-fA-F]))+)|(\\\\#(1|0)+)|(\\\\d))+\\\\[' + registerRegExp + '\\\\]';\n\n    // define check regexps here as called when loading file module so doesnt have to made each time the check command is ran\n      const rrRegExp = new RegExp( '^' + registerRegExp + ',' + registerRegExp  + '$' );\n      const rrrRegExp = new RegExp( '^' + registerRegExp + ',' + registerRegExp + ',' + registerRegExp + '$' );\n      const jxRegExp = new RegExp( '^' + dispAndIndexRegExp + '$' );\n      const kxRegExp = new RegExp( '^' + constantPositiveRegExp + ',' + dispAndIndexRegExp + '$' );\n      const rxRegExp = new RegExp( '^' + registerRegExp + ',' + dispAndIndexRegExp + '$' );\n      const xRegExp = new RegExp( '^' + constantRegExp + '$' );\n      const rrxRegExp = new RegExp( '^' + registerRegExp + ',' + registerRegExp + ',' + dispAndIndexEXPRegExp + '$' );\n      const rcRegExp = new RegExp( '^' + registerRegExp + ',' + controlRegisterRegExp + '$' );\n      const rrkRegExp = new RegExp( '^' + registerRegExp + ',' + registerRegExp + ',' + constantPositiveRegExp + '$' );\n      const rkRegExp = new RegExp( '^' + registerRegExp + ',' + constantPositiveRegExp + '$' );\n      const rkkRegExp = new RegExp( '^' + registerRegExp + ',' + constantPositiveRegExp + ',' + constantPositiveRegExp + '$' );\n      const rrkkRegExp = new RegExp( '^' + registerRegExp + ',' + registerRegExp + ',' + constantPositiveRegExp + ',' + constantPositiveRegExp + '$' );\n      const rrrkkRegExp = new RegExp( '^' + registerRegExp + ',' + registerRegExp + ',' + registerRegExp + ',' + constantPositiveRegExp + ',' + constantPositiveRegExp + '$' );\n      const rrrkRegExp = new RegExp( '^' + registerRegExp + ',' + registerRegExp + ',' + registerRegExp + ',' + constantPositiveRegExp + '$' );\n\n// UTIL FUNCTIONS\n  export function readSignedHex( a ) {\n    a = Number( a );\n    if ( a < 65536 && a >= -32768 ) {\n      if ( ( a & 0x8000 ) > 0) {\n        a = a - 0x10000;\n      }\n      return a;\n    }\n    return 65536;\n  }\n\n  export function readUnsignedHex( a ) {\n    if ( a < 65536 && a >= -32768 ) {\n      if ( a < 0 ) {\n        a = a + 0x10000;\n      }\n      return a;\n    }\n    return 65536;\n  }\n\n  function readConstant( argument, labels ) {\n    var info = 0;\n\n    if ( ! isNaN( argument ) ) {\n      // number is in decimal\n      info = readUnsignedHex( Number( argument ) );\n    } else {\n      // number is either hex, binary, or, string\n      if ( isValidNumber( argument ) ) {\n        var parseBy = 16;\n        if ( argument.startsWith( '$' ) ) {          \n          parseBy = 16;\n        } else if ( argument.startsWith( '#' ) ) {\n          parseBy = 2;\n        }\n\n        argument = argument.slice( 1, argument.length );\n        info = parseInt( argument, parseBy );\n      } else {\n        if ( labels && Object.keys( labels ).includes( argument ) ) {\n          info = labels[argument];\n        } else {\n          info = argument;\n        }\n      }\n    }\n\n    return info;\n  }\n\n  function readCompatibleConstant( argument ) {\n    var info = 0;\n\n    if ( ! isNaN( argument ) ) {\n      // number is in decimal\n      info = argument;\n    } else {\n      // number is either hex, binary, or, string\n      if ( isValidNumber( argument ) ) {\n        info = readConstant( argument, {} );\n      } else {\n        info = argument;\n      }\n    }\n\n    return info;\n  }\n\n  export function isValidNumber( numString ) {\n    var num = 0;\n\n    if ( !isNaN( numString ) ) {\n      num = readUnsignedHex( parseInt( numString ) );\n    } else if ( numString.startsWith( '$' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = readUnsignedHex( parseInt( numString, 16 ) );\n    } else if ( numString.startsWith( '#' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = readUnsignedHex( parseInt( numString, 2 ) );\n    } else {\n      num = 65536;\n    }\n\n    return ( num < 65536 && num >= 0 ) ? true : false;\n  }\n\n  function isValidNumberBit( numString ) {\n    var num = 0;\n\n    if ( !isNaN( numString ) ) {\n      num = parseInt( numString );\n    } else if ( numString.startsWith( '$' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = parseInt( numString, 16 );\n    } else if ( numString.startsWith( '#' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = readUnsignedHex( parseInt( numString, 2 ) );\n    } else {\n      num = 16;\n    }\n\n    return ( num <= 15 && num >= 0 ) ? true : false;\n  }\n\n  function isValidNumberGH( numString ) {\n    var num = 0;\n\n    if ( !isNaN( numString ) ) {\n      num = parseInt( numString );\n    } else if ( numString.startsWith( '$' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = parseInt( numString, 16 );\n    } else if ( numString.startsWith( '#' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = readUnsignedHex( parseInt( numString, 2 ) );\n    } else {\n      num = 256;\n    }\n\n    return ( num <= 255 && num >= 0 ) ? true : false;\n  }\n\n  export function writeHex( x ) {\n    if ( x !== undefined ) {\n      if ( !x.length ) {\n        x = x.toString( 16 );\n      }\n      while ( x.length < 4 ) { x = '0' + x; }\n      return x;\n    }\n    return x;\n  }\n\n  function getBitFromRegister( registerValue, bitNum ) {\n    return ( ( registerValue >> ( 15 - bitNum ) ) % 2 );\n  }\n\n  function setBitInRegister( registerValue, bitValue, bitNum ) {\n    const shiftLDist = 15 - bitNum;\n\n    const mask = 0xffff - ( 1 << shiftLDist );\n    \n    return ( ( registerValue & mask ) | ( bitValue << shiftLDist ) );\n  }\n\n  function setBitInRegisterMultiple( destRegisterValue, sourceRegisterValue, bitFrom, bitTo ) {\n    const shiftRDist = 15 - bitFrom + bitTo;\n    const shiftLDist = 15 - bitFrom;\n\n    const radjustedField = 0xffff >> shiftRDist;\n    const mask = ~( radjustedField << shiftLDist ) & 0xffff;\n    const x = sourceRegisterValue & radjustedField;\n\n    // if either bit is on in registers[Re] or in x, shifted to the left to fit in correct gap to be injected into then bit is on\n    return ( ( destRegisterValue & mask ) | ( x << shiftLDist ) );\n  }\n\n  function getR15Dict() {\n    return {\n      'G' : 0,\n      'g' : 0,\n      'E' : 0,\n      'l' : 0,\n      'L' : 0,\n      'V' : 0,\n      'v' : 0,\n      'C' : 0,\n      'S' : 0\n    };\n  }\n\n  function setR15Flags( flagDict ) {\n    var r15 = 0;\n\n    if ( flagDict['G'] === 1 ) r15 += ( 0b1000000000000000 );\n    if ( flagDict['g'] === 1 ) r15 += ( 0b0100000000000000 );\n    if ( flagDict['E'] === 1 ) r15 += ( 0b0010000000000000 );\n    if ( flagDict['l'] === 1 ) r15 += ( 0b0001000000000000 );\n    if ( flagDict['L'] === 1 ) r15 += ( 0b0000100000000000 );\n    if ( flagDict['V'] === 1 ) r15 += ( 0b0000010000000000 );\n    if ( flagDict['v'] === 1 ) r15 += ( 0b0000001000000000 );\n    if ( flagDict['C'] === 1 ) r15 += ( 0b0000000100000000 );\n    if ( flagDict['S'] === 1 ) r15 += ( 0b0000000010000000 );\n\n    return r15;\n  }\n\n  function guarantee16Bits( number ) {\n    return ( number % 0x10000 );\n  }\n\n// CHECKING METHODS\n  function checkRRCommand( rr ) {\n    // check that rrr is in the form of rd,ra,rb\n    if ( !( rrRegExp.test( rr ) ) ) {\n      return 'arguments must be in the form of \"Ra,Rb\"';\n    }\n    return true;\n  }\n\n  function checkRRRCommand( rrr ) {\n    // check that rrr is in the form of rd,ra,rb\n    if ( !( rrrRegExp.test( rrr ) ) ) {\n      return 'arguments must be in the form of \"Rd,Ra,Rb\"';\n    }\n    return true;\n  }\n\n  function checkJXCommand( jx, labels ) {\n    // check that jx is in the form of disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( jxRegExp.test( jx ) ) ) {\n      return 'arguments must be in the form of \"disp[Ra]\"';\n    }\n    var disp = jx.split( '[' )[0];\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, a hex, binary, or, an initailised label';\n    }\n  }\n\n  function checkKXCommand( kx, labels ) {\n    // check that kx is in the form of k,disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( kxRegExp.test( kx ) ) ) {\n      return 'arguments must be in the form of \"k,disp[Ra]\", negative integers not allowed for k argument';\n    }\n    var splat = kx.split( ',' );\n    var k = splat[0];\n    var disp = splat[1].split( '[' )[0];\n\n    if ( ! isValidNumberBit( k ) ) {\n      return 'k argument must either be a decimal, hex, or, binary value between 0 and 15, negative integers not allowed';\n    }\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, hex, binary, or, an initailised label';\n    }\n  }\n\n  function checkRXCommand( rx, labels ) {\n    // check that rx is in the form of rd,disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( rxRegExp.test( rx ) ) ) {\n      return 'arguments must be in the form of \"Rd,disp[Ra]\"';\n    }\n    var disp = rx.split( ',' )[1].split( '[' )[0];\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, a hex, binary, or, an initailised label';\n    }\n  }\n\n  function checkXCommand( x ) {\n    // check that x is a number, either hex, binary, or, decimal\n    const xsplit = x.split( ',' );\n    for ( var i = 0; i < xsplit.length; i++ ) {\n      var xtest = xsplit[i];\n\n      if ( !( xRegExp.test( xtest ) ) ) {\n        return 'arguments must be in the form of \"constant\" up to 65535 and down to -32768';\n      }\n\n      if ( !( isValidNumber( xtest ) ) ) {\n        return 'data must be followed by either a decimal or hex number <= 65535 and >=-32768';\n      }\n    }\n    return true;\n  }\n\n  function checkNOexpCommand( no ) {\n    // doesnt matter the arguments, NOexp commands evaluate in the same way\n    return true;\n  }\n\n  function checkRRXexpCommand( rrx ) {\n    // check that rrx is in the form of re,rf,disp[rd], where disp can be either hex, or a decimal integer \n    if ( !( rrxRegExp.test( rrx ) ) ) {\n      return 'arguments must be in the form of \"Re,Rf,disp[Rd]\", negative integers not allowed';\n    }\n    var disp = rrx.split( ',' )[2].split( '[' )[0];\n\n    if ( isValidNumberGH( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, hex, or, binary with decimal values between 0 and 255';\n    }\n  }\n\n  function checkRCexpCommand( rc ) {\n    // check that rc is in the form of rd,controlRegister, where controlRegister can be pc, ir, or adr\n    if ( !( rcRegExp.test( rc ) ) ) {\n      return 'arguments must be in the form of \"Rd,controlRegisterName\"';\n    }\n\n    return true;\n  }\n\n  function checkRRKexpCommand( rrk ) {\n    // check that rrk is in the form of re,rf,gh, where gh can be either hex, or a decimal integer between 0 and 15\n    if ( !( rrkRegExp.test( rrk ) ) ) {\n      return 'arguments must be in the form of \"Rd,Re,g\", negative integers not allowed';\n    }\n    var g = rrk.split( ',' )[2];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, hex, or, binary value between 0 and 15';\n    }\n    return true;\n  }\n\n  function checkRKexpCommand( rk ) {\n    // check that rk is in the form of rd,g, where g can be either hex, or a decimal integer between 0 and 15\n    if ( !( rkRegExp.test( rk ) ) ) {\n      return 'arguments must be in the form of \"Rd,g\", negative integers not allowed';\n    }\n    var g = rk.split( ',' )[1];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, hex, or, binary value between 0 and 15';\n    }\n    return true;\n  }\n\n  function checkRKKexpCommand( rkk ) {\n    // check that rrk is in the form of rd,g,h where g and h can be either hex, or a decimal integer between 0 and 15\n    if ( !( rkkRegExp.test( rkk ) ) ) {\n      return 'arguments must be in the form of \"Rd,g,h\", negative integers not allowed';\n    }\n    var g = rkk.split( ',' )[1];\n    var h = rkk.split( ',' )[2];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, hex, or, binary value between 0 and 15';\n    }\n    if ( ! isValidNumberBit( h ) ) {\n      return 'h argument must either be a decimal, hex, or, binary value between 0 and 15';\n    }\n    return true;\n  }\n\n  function checkRRKKexpCommand( rrkk ) {\n    // check that rrkk is in the form of rd,re,g,h, where g and h can be either hex, or a decimal integer between 0 and 15\n    if ( !( rrkkRegExp.test( rrkk ) ) ) {\n      return 'arguments must be in the form of \"Rd,Re,g,h\", negative integers not allowed';\n    }\n    var splat = rrkk.split( ',' );\n    var g = splat[2];\n    var h = splat[3];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, hex, or, binary value between 0 and 15, negative integers not allowed';\n    }\n    if ( ! isValidNumberBit( h ) ) {\n      return 'h argument must either be a decimal, hex, or, binary value between 0 and 15, negative integers not allowed';\n    }\n    return true;\n  }\n\n  function checkRRRKKexpCommand( rrrkk ) {\n    // check that rrrkk is in the form of rd,re,rf,g,h, where g and h can be either hex, or a decimal integer between 0 and 15\n    if ( !( rrrkkRegExp.test( rrrkk ) ) ) {\n      return 'arguments must be in the form of \"Rd,Re,Rf,g,h\", negative integers not allowed';\n    }\n    var splat = rrrkk.split( ',' );\n    var g = splat[3];\n    var h = splat[4];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, hex, or, binary value between 0 and 15, negative integers not allowed';\n    }\n    if ( ! isValidNumberBit( h ) ) {\n      return 'h argument must either be a decimal, hex, or, binary value between 0 and 15, negative integers not allowed';\n    }\n    return true;\n  }\n\n  function checkRRRKexpCommand( rrrk ) {\n    // check that rrrk is in the form of rd,re,rf,gh, where gh can be either hex, or a decimal integer between 0 and 255\n    if ( !( rrrkRegExp.test( rrrk ) ) ) {\n      return 'arguments must be in the form of \"Rd,Re,Rf,g\", negative integers not allowed';\n    }\n    var splat = rrrk.split( ',' );\n    var g = splat[3];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, hex, or, binary value between 0 and 15, negative integers not allowed';\n    }\n    return true;\n  }\n\n  function checkCommands( command, argument, labels ) {\n    var check;\n    switch ( allCommands[command] ) {\n      case 'rr' :\n        // first word is an rr command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRRCommand( argument );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by 2 registers in form Rx,Rx';\n        }\n        break;\n\n      case 'rrr' :\n        // first word is an rrr command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRRRCommand( argument );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by 3 registers in form Rx,Rx,Rx';\n        }\n        break;\n\n      case 'jx' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkJXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of disp[Ra]';\n        }\n        break;\n\n      case 'jumpAlias' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkJXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of disp[Ra]';\n        }\n        break;\n\n      case 'kx' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkKXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of k,disp[Ra], where k is a bit';\n        }\n        break;\n\n      case 'rx' :\n        // first word is an rx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of Rd,disp[Ra]';\n        }\n        break;\n\n      case 'x' :\n        // first word is an x command i.e data\n        if ( argument ) { \n          // there is a second argument\n          check = checkXCommand( argument );\n        } else {\n          check = command + ' must be followed by a number, either decimal or hex ( preceeded by $ )';\n        }\n        break;\n\n      case 'noEXP' :\n        // first word is an noEXP command i.e rfi\n        check = checkNOexpCommand( argument );\n        break;\n\n      case 'rrEXP' :\n        // first word is an rrEXP command i.e execute\n        if ( argument ) {\n          check = checkRRCommand( argument ); // same format as RR commands\n        } else {\n          check = command + ' must be followed by 2 registers in form Rx,Rx';\n        }\n        break;\n\n      case 'rrxEXP' :\n        // first word is an rrxEXP command i.e save\n        if ( argument ) {\n          check = checkRRXexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers then a disp in the form of Rx,Rx,disp[Rx]';\n        }\n        break;\n\n      case 'rcEXP' :\n        // first word is an rcEXP command i.e getctl\n        if ( argument ) {\n          check = checkRCexpCommand( argument );\n        } else {\n          check = command + ' must be followed by a register and a control register in the form Rx,(pc/ir/adr)';\n        }\n        break;\n\n      case 'rrrEXP' :\n        // first word is an rrrEXP command i.e push\n        if ( argument ) {\n          check = checkRRRCommand( argument ); // same format as RRR commands\n        } else {\n          check = command + ' must be followed by 3 registers in form Rx,Rx,Rx';\n        }\n        break;\n\n      case 'rrkEXP' :\n        // first word is an rrkEXP command i.e shiftl\n        if ( argument ) {\n          check = checkRRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers and a constant in form Rx,Rx,k';\n        }\n        break;\n\n      case 'rkEXP' :\n        // first word is an rrkEXP command i.e shiftl\n        if ( argument ) {\n          check = checkRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by a register and a constant in form Rx,k';\n        }\n        break;\n\n      case 'rrkkEXP' :\n        // first word is an rrkkEXP command i.e extract\n        if ( argument ) {\n          check = checkRRKKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers and 2 constants in form Rx,Rx,k1,k2';\n        }\n        break;\n\n      case 'rrrkkEXP' :\n        // first word is an rrrkkEXP command i.e inject\n        if ( argument ) {\n          check = checkRRRKKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 3 registers and 2 constants in form Rx,Rx,Rx,k1,k2';\n        }\n        break;\n\n      case 'rrrkEXP' :\n        // first word is an rrrkEXP command i.e logicw\n        if ( argument ) {\n          check = checkRRRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 3 registers and a constant in form Rx,Rx,Rx,k';\n        }\n        break;\n\n      case 'logicAliasRRRK' :\n        // first word is an logicAliasRRRK command i.e andb\n        if ( argument ) {\n          check = checkRRRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 3 registers and a constant in form Rx,Rx,Rx,k';\n        }\n        break;\n\n      case 'logicAliasRRK' :\n        // first word is an logicAliasRRK command i.e invb\n        if ( argument ) {\n          check = checkRRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers and a constant in form Rx,Rx,k';\n        }\n        break;\n\n      case 'logicAliasRRR' :\n        // first word is an logicAliasRRR command i.e andnew\n        if ( argument ) {\n          check = checkRRRCommand( argument );\n        } else {\n          check = command + ' must be followed by 3 registers in form Rx,Rx,Rx';\n        }\n        break;\n\n      case 'logicAliasRR' :\n        // first word is an logicAliasRR command i.e invnew\n        if ( argument ) {\n          check = checkRRCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers in form Rx,Rx';\n        }\n        break;\n\n      case 'injectIAlias' :\n        // first word is an rrkEXP command i.e shiftl\n        if ( argument ) {\n          check = checkRKKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by a register and 2 constants in form Rx,k1,k2';\n        }\n        break;\n\n      default :\n        check = 'not a valid command with known command type';\n        break;\n    }\n    return check;\n  }\n\n  function checkLabel( label ) {\n    if ( !( /^[a-zA-Z_]/.test( label ) ) ) {\n      return 'label must start with an alphabet character';\n    }\n\n    if ( label.includes( '$' ) || label.includes( '#' ) ) {\n      return 'label must not contain \"$\" or \"#\" symbols as these denote constants';\n    }\n\n    if ( !( /^\\w+$/.test( label ) ) ) {\n      return 'label must be made up of purely alphanumerical characters';\n    }\n\n    return true;\n  }\n\n  export function checkLine( line, labels ) {\n    var linesplit = line.split( ';' )[0].trim().split( /\\s+/ );\n    var error = true;\n\n    if ( linesplit[0] ) {\n      // lines isnt empty\n      if ( allCommandsList.includes( linesplit[0] ) ) {\n        // first word is a command\n        if ( linesplit.length <= 2 ) {\n          error = checkCommands( linesplit[0], linesplit[1], labels ); // will return error is arguments not present so dont have to check\n        } else {\n          error = 'non-comment after arguments';\n        }\n      } else {\n        // first word is not a command\n        // first word is a label\n        error = checkLabel( linesplit[0] );\n\n        if ( !( error.length ) ) {\n          // label is valid\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( allCommandsList.includes( linesplit[1] ) ) {\n              if ( linesplit.length <= 3 ) {\n                error = checkCommands( linesplit[1], linesplit[2], labels );\n              } else {\n                error = 'non-comment after arguments';\n              }\n            } else {\n              error = 'not a valid command following label';\n            }\n          }\n        }\n        // just a correct label, therefore allowed and function returns label error check\n      }\n    }\n\n    // return error, as it woud have updated to error message if probelm, otherwise, will have stayed positive\n    return error;\n  }\n\n  function checkCommandIsCompatible( command, argument ) {\n    var result = {\n      warn : '',\n      error : ''\n    };\n\n    if ( Object.keys( partiallyCompatibleCommands ).includes( command ) ) {\n      result['warn'] = partiallyCompatibleCommands[command];\n    } else if ( nonCompatibleCommands.includes( command ) ) {\n      result['error'] = 'Assembler does not recognise command at all and will return an error';\n    } else if ( command === 'data' ) {\n      if ( argument && argument.split( ',' ).length > 1 ) {\n        result['warn'] = 'Multiple data constants is not supported by the original emulator';\n      }\n    }\n    // else, is fully compatible\n\n    return result;\n  }\n\n  function checkLineIsComaptible( line ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    var parsed = {\n      warn : '',\n      error : ''\n    };\n\n    if ( linesplit[0] ) {\n      // lines isnt empty\n      if ( allCommandsList.includes( linesplit[0] ) ) {\n        // first word is a command\n        parsed = checkCommandIsCompatible( linesplit[0], linesplit[1] ); // will return error is arguments not present so dont have to check\n      } else if ( linesplit[0] && linesplit[1] && allCommandsList.includes( linesplit[1] ) ) {    \n        parsed = checkCommandIsCompatible( linesplit[1], linesplit[2] );\n      }\n    }\n\n    // return error, as it woud have updated to error message if problem, otherwise, will have stayed positive\n    return parsed;\n  }\n\n  export function checkCodeIsCompatible( code ) {\n    var lines = code.split( '\\n' );\n    var check;\n\n    var lineWarn = {};\n    var lineError = {};\n\n    var compatible = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      check = checkLineIsComaptible( lines[i] );\n\n      if ( check['warn'].length ) {\n        lineWarn[i + 1] = check;\n      } else if ( check['error'].length ) {\n        lineError[i + 1] = check;\n        compatible = false;\n      } \n    }\n\n    return [compatible, lineWarn, lineError];\n  }\n\n// PARSING METHODS\n  function findInstuctionInfo( command, argument ) {\n    var result = {\n      words : 0,\n      type : '',\n      op : 0\n    };\n\n    switch ( allCommands[command] ) {\n      case 'rr' :\n        result['words'] = 1;\n        result['type'] = 'rrr';\n        result['op'] = rrCommands[command];\n        break;\n        \n      case 'rrr' :\n        result['words'] = 1;\n        result['type'] = 'rrr';\n        result['op'] = rrrCommands[command];\n        break;\n        \n      case 'jx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = jxCommands[command];\n        break;\n        \n      case 'jumpAlias' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = jumpAliasCommands[command][0];\n        break;\n        \n      case 'kx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = kxCommands[command];\n        break;\n        \n      case 'rx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = rxCommands[command];\n        break;\n        \n      case 'x' :\n        result['words'] = 1;\n        result['type'] = 'x';\n        result['op'] = xCommands[command];\n        break;\n\n      case 'noEXP' :\n        result['words'] = 1;\n        result['type'] = 'exp0';\n        result['op'] = noEXPCommands[command];\n        break;\n\n      case 'rrEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // doesnt matter if exp4 or exp8, g, h and gh elements will be 0 either way\n        result['op'] = rrEXPCommands[command];\n        break;\n\n      case 'rrxEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp8'; // g and h arguments will be 0 and gh will carry the 8 bit disp\n        result['op'] = rrxEXPCommands[command];\n        break;\n\n      case 'rcEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // exp4 as doubt that there will be more than 16 control registers ( even if interupts are added )\n        result['op'] = rcEXPCommands[command];\n        break;\n\n      case 'rrrEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // doesnt matter if exp4 or exp8, g, h and gh elements will be 0 either way\n        result['op'] = rrrEXPCommands[command];\n        break;\n\n      case 'rrkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // f will be 0 and h will hold k argument as k only goes upto 15\n        result['op'] = rrkEXPCommands[command];\n        break;\n\n      case 'rkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // g and h will hold k arguments as k only goes upto 15\n        result['op'] = rkEXPCommands[command];\n        break;\n\n      case 'rrkkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // two k arguments to be held in g and h fields, needs to be a exp4\n        result['op'] = rrkkEXPCommands[command];\n        break;\n\n      case 'rrrkkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // two k arguments to be held in g and h fields, needs to be a exp4\n        result['op'] = rrrkkEXPCommands[command];\n        break;\n\n      case 'rrrkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // one k field to be held as a 4 bit number, needs to be a exp4\n        result['op'] = rrrkEXPCommands[command];\n        break;\n\n      case 'logicAliasRRRK' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // one k field to be held as a 4 bit number and one constant held in g as instruction type, needs to be a exp4\n        result['op'] = logicAliasRRRKCommands[command][0];\n        break;\n\n      case 'logicAliasRRK' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // one k field to be held as a 4 bit number and one constant held in g as instruction type, needs to be a exp4\n        result['op'] = logicAliasRRKCommands[command][0];\n        break;\n\n      case 'logicAliasRRR' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // does matter as logic type is set in g field\n        result['op'] = logicAliasRRRCommands[command][0];\n        break;\n\n      case 'logicAliasRR' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // does matter as logic type is set in g field\n        result['op'] = logicAliasRRCommands[command][0];\n        break;\n\n      case 'injectIAlias' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // does matter as bitStart and bitEnd are set in g and h fields as 4 bit numbers\n        result['op'] = injectIAliasCommands[command][0];\n        break;\n\n      default :\n        break;\n    }\n\n    return result;\n  }\n\n  function findArgumentInfo( command, argument, labels ) {\n    var result = {\n      d : 0,\n      a : 0,\n      b : 0,\n      disp : 0,\n\n      e : 0,\n      f : 0,\n      g : 0,\n      h : 0,\n      gh : 0\n    };\n\n    var argumentList = [];\n\n    switch ( allCommands[command] ) {\n      case 'rr' :\n        argumentList = argument.split( ',' );\n        result['a'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['b'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['d'] = result['a'];\n        break;\n        \n      case 'rrr' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['b'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        break;\n        \n      case 'jx' :\n        argumentList = argument.split( '[' );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentList[0], labels );\n\n        result['d'] = 0;\n        break;\n        \n      case 'jumpAlias' :\n        argumentList = argument.split( '[' );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentList[0], labels );\n\n        result['d'] = jumpAliasCommands[command][1];\n        break;\n        \n      case 'kx' :\n        argumentList = argument.split( ',' );\n        result['d'] = readConstant( argumentList[0], labels );\n\n        argumentList = argumentList[1].split( '[' );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentList[0], labels );\n        break;\n        \n      case 'rx' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n\n        argumentList = argumentList[1].split( '[' );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentList[0], labels );\n        break;\n        \n      case 'x' :\n        result['disp'] = [];\n        const xsplit = argument.split( ',' );\n\n        for ( var i = 0; i < xsplit.length; i++ ) {\n          var x = xsplit[i];\n\n          result['disp'].push( readConstant( x, labels ) );\n        }\n        break;\n\n      case 'noEXP' :\n        // no need for argument handling as exp0 takes no arguments\n        break;\n\n      case 'rrEXP' :\n        // copy of 'rr' case with a and b changed to d and e respectively\n        argumentList = argument.split( ',' );\n        result['e'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['f'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        break;\n\n      case 'rrxEXP' :\n        argumentList = argument.split( ',' );\n        result['e'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['f'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n\n        argumentList = argumentList[2].split( '[' );\n        result['d'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['gh'] = readConstant( argumentList[0], labels );\n        break;\n\n      case 'rcEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        \n        switch ( argumentList[1] ) {\n          case 'pc' :\n            result['g'] = 1;\n            break;\n\n          case 'ir' :\n            result['g'] = 2;\n            break;\n\n          case 'adr' :\n            result['g'] = 3;\n            break;\n\n          default :\n            result['g'] = 0;\n            break;\n        }\n        break;\n\n      case 'rrrEXP' :\n        // copy of 'rrr' case with d, a, and b changed to d, e, and f respectively\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        break;\n\n      case 'rrkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['g'] = readConstant( argumentList[2], labels );\n        break;\n\n      case 'rkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        \n        result['g'] = readConstant( argumentList[1], labels );\n        break;\n\n      case 'rrkkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['g'] = readConstant( argumentList[2], labels );\n        result['h'] = readConstant( argumentList[3], labels );\n        break;\n\n      case 'rrrkkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        \n        result['g'] = readConstant( argumentList[3], labels );\n        result['h'] = readConstant( argumentList[4], labels );\n        break;\n\n      case 'rrrkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        \n        result['g'] = readConstant( argumentList[3], labels );\n        break;\n\n      case 'logicAliasRRRK' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        \n        result['g'] = logicAliasRRRKCommands[command][1];\n        result['h'] = readConstant( argumentList[3], labels );\n        break;\n\n      case 'logicAliasRRK' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['g'] = logicAliasRRKCommands[command][1];\n        result['h'] = readConstant( argumentList[2], labels );\n        break;\n\n      case 'logicAliasRRR' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        \n        result['g'] = logicAliasRRRCommands[command][1];\n        break;\n\n      case 'logicAliasRR' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['g'] = logicAliasRRCommands[command][1];\n        break;\n\n      case 'injectIAlias' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        \n        result['e'] = injectIAliasCommands[command][1];\n        result['f'] = injectIAliasCommands[command][2];\n        \n        result['g'] = readConstant( argumentList[1], labels );\n        result['h'] = readConstant( argumentList[2], labels );\n        break;\n\n      default :\n        break;\n    }\n\n    return result;\n  }\n\n  function generateMachineCode( command, argument, labels ) {\n    var result = [];\n\n    var commandInfo = findInstuctionInfo( command, argument );\n    var argumentInfo = findArgumentInfo( command, argument, labels );\n\n    switch ( commandInfo['type'] ) {\n      case 'rrr' :\n        result.push( commandInfo['op']*firstColumn + argumentInfo['d']*secondColumn + argumentInfo['a']*thirdColumn + argumentInfo['b']*fourthColumn );\n        break;\n\n      case 'rx' :\n        result.push( 0xf*firstColumn + argumentInfo['d']*secondColumn + argumentInfo['a']*thirdColumn + commandInfo['op']*fourthColumn );\n\n        result.push( argumentInfo['disp'] );\n        break;\n\n      case 'x' :\n        for ( var i = 0; i < argumentInfo['disp'].length; i++ ) {\n          result.push( argumentInfo['disp'][i] );\n        }\n        break;\n\n      case 'exp0' :\n        result.push( 0xe*firstColumn + argumentInfo['d']*secondColumn + commandInfo['op']*fourthColumn );\n        break;\n\n      case 'exp4' :\n        result.push( 0xe*firstColumn + argumentInfo['d']*secondColumn + commandInfo['op']*fourthColumn );\n        \n        result.push( argumentInfo['e']*firstColumn + argumentInfo['f']*secondColumn + argumentInfo['g']*thirdColumn + argumentInfo['h']*fourthColumn );\n        break;\n\n      case 'exp8' :\n        result.push( 0xe*firstColumn + argumentInfo['d']*secondColumn + commandInfo['op']*fourthColumn );\n        \n        result.push( argumentInfo['e']*firstColumn + argumentInfo['f']*secondColumn + argumentInfo['gh']*fourthColumn );\n        break;\n\n      default :\n        break;\n    }\n\n    return result;\n  }\n\n  export function parseLineForLabels( line ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    \n    var result = {\n      label : '',\n      instructionWords : 0,\n      justLabel : false\n    };\n\n    if ( linesplit[0] && linesplit[0] !== '' ) {\n      // lines isnt empty\n      if ( allCommandsList.includes( linesplit[0] ) ) {\n        // first word is a command\n        result['instructionWords'] = findInstuctionInfo( linesplit[0], linesplit[1] )['words'];\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( allCommandsList.includes( linesplit[1] ) ) {\n              result['label'] = linesplit[0];\n              result['instructionWords'] = findInstuctionInfo( linesplit[1], linesplit[2] )['words'];\n            }\n          } else {\n            // just a label, therefore allowed and function returns true\n            result['label'] = linesplit[0];\n            result['instructionWords'] = 1;\n            result['justLabel'] = true;\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  export function parseLineForMachineCode( line, labels ) {\n    var machineCode;\n\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n\n    if ( linesplit[0] && linesplit[0] !== '' ) {\n      // lines isnt empty\n      if ( allCommandsList.includes( linesplit[0] ) ) {\n        // first word is a command\n        machineCode = generateMachineCode( linesplit[0], linesplit[1], labels );\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( allCommandsList.includes( linesplit[1] ) ) {\n              machineCode = generateMachineCode( linesplit[1], linesplit[2], labels );\n            }\n          } else {\n            // is a just a label and must not be recognised as a seperate command so \n            // undefined is returned so that parent method can skip it from being added to machine code\n            machineCode = undefined;\n          }\n        }\n      }\n    }\n\n    return machineCode;\n  }\n\n  function findLineInfo( line ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    var lineResult = {\n      label : ' ',\n      command : '',\n      argument : '',\n      comment : ''\n    };\n\n    if ( line.includes( ';' ) ) lineResult['comment'] = ';' + line.trim().split( ';' )[1];\n\n    if ( linesplit[0] && linesplit[0] !== '' ) {\n      // lines isnt empty\n      if ( allCommandsList.includes( linesplit[0] ) ) {\n        // first word is a command\n        lineResult['command'] = linesplit[0];\n        lineResult['argument'] = linesplit[1];\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          lineResult['label'] = linesplit[0] + ' ';\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( allCommandsList.includes( linesplit[1] ) ) {\n              lineResult['command'] = linesplit[1];\n              lineResult['argument'] = linesplit[2];\n            }\n          } else {\n            // is just a label\n            lineResult['label'] = linesplit[0] + ' ';\n          }\n        }\n      }\n    }\n\n    return lineResult;\n  }\n\n  function infoToLine( lineResult ) {\n    var line = lineResult['label'];\n\n    var argumentList = [];\n\n    if ( lineResult['command'].length ) {\n      line += lineResult['command'] + ' ';\n\n      switch ( allCommands[lineResult['command']] ) {\n        case 'rr' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'rrr' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          break;\n          \n        case 'jx' :\n          argumentList = lineResult['argument'].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'jumpAlias' :\n          argumentList = lineResult['argument'].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'kx' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += argumentList[0];\n          line += ',';\n\n          argumentList = argumentList[1].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'rx' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n\n          argumentList = argumentList[1].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'x' :\n          const splat = lineResult['argument'].split( ',' );\n          for ( var i = 0; i < splat.length; i++ ) {\n            line += readCompatibleConstant( splat[i] );\n\n            if ( i !== splat.length - 1 ) {\n              line += lineResult['comment'];\n              line += '\\n';\n              line += ' ' + lineResult['command'] + ' ';\n            }\n          }\n          break;\n\n        case 'noEXP' :\n          // no need for lineResult['argument'] handling as exp0 takes no arguments\n          break;\n\n        case 'rrEXP' :\n          // copy of 'rr' case with a and b changed to d and e respectively\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n\n        case 'rrxEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n\n          argumentList = argumentList[2].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n\n        case 'rcEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += argumentList[1];\n          break;\n\n        case 'rrrEXP' :\n          // copy of 'rrr' case with d, a, and b changed to d, e, and f respectively\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          break;\n\n        case 'rrkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += readCompatibleConstant( argumentList[2] );\n          break;\n\n        case 'rkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += readCompatibleConstant( argumentList[1] );\n          break;\n\n        case 'rrkkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += readCompatibleConstant( argumentList[2] );\n          line += ',';\n          line += readCompatibleConstant( argumentList[3] );\n          break;\n\n        case 'rrrkkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          line += ',';\n          line += readCompatibleConstant( argumentList[3] );\n          line += ',';\n          line += readCompatibleConstant( argumentList[4] );\n          break;\n\n        case 'rrrkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          line += ',';\n          line += readCompatibleConstant( argumentList[3] );\n          break;\n\n        case 'logicAliasRRRK' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          line += ',';\n          line += readCompatibleConstant( argumentList[3] );\n          break;\n\n        case 'logicAliasRRK' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += readCompatibleConstant( argumentList[2] );\n          break;\n\n        case 'logicAliasRRR' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          break;\n\n        case 'logicAliasRR' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n\n        case 'injectIAlias' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += readCompatibleConstant( argumentList[1] );\n          line += ',';\n          line += readCompatibleConstant( argumentList[2] );\n          break;\n\n        default :\n          break;\n      }\n    }\n\n    line += lineResult['comment'];\n\n    return line;\n  }\n\n  export function parseCodeToCompatible( code ) {\n    var lines = code.split( '\\n' );\n\n    var codeResult = '';\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      codeResult += infoToLine( findLineInfo( lines[i] ) ) + '\\n';\n    }\n\n    return codeResult;\n  }\n\n// RUNNING FUNCTIONS\n  export function setMemory( machineCode ) {\n    var memory = {};\n\n    for ( var i = 0; i < machineCode.length; i++ ) {\n      memory[i] = machineCode[i];\n    }\n\n    return memory;\n  }\n\n  function compareRegisters( RaValue, RbValue, flagDict ) {\n    var RaValueSigned = readSignedHex( RaValue );\n    var RbValueSigned = readSignedHex( RbValue );\n\n    var signedEquals = false;\n\n    // signed comparisons\n    if ( RaValueSigned > RbValueSigned ) {\n      flagDict['g'] = 1;\n    } else if ( RaValueSigned < RbValueSigned ) {\n      flagDict['l'] = 1;\n    } else {\n      signedEquals = true;\n    }\n    \n    // unsigned comparisons\n    if ( RaValue > RbValue ) {\n      flagDict['G'] = 1;\n    } else if ( RaValue < RbValue ) {\n      flagDict['L'] = 1;\n    } else if ( signedEquals ) {\n      flagDict['E'] = 1;\n    }\n\n    return flagDict;\n  }\n\n  function processTRAPInstruction( control, registers, memory, input, output, Rd, Ra, Rb ) {\n    var halted = false;\n\n    switch ( registers[Rd] ) {\n      case 0x0 :\n        halted = true;\n        break;\n\n      case 0x1 :\n        var memoryBufferStartInput = registers[Ra];\n\n        for ( var i = 0; i < registers[Rb]; i++ ) {\n          if ( input.length > i ) {\n            memory[memoryBufferStartInput + i] = input.charCodeAt( i );\n          } else {\n            memory[memoryBufferStartInput + i] = 0;\n          }\n        }\n        output += '>>' + input.slice( 0, registers[Rb] );\n        input = input.slice( registers[Rb], input.length );\n\n        break;\n\n      case 0x2 :\n        var memoryBufferStartOutput = registers[Ra];\n\n        for ( var it = 0; it < registers[Rb]; it++ ) {\n          // if in memory, add to output, else add default memory value\n          if ( memory[memoryBufferStartOutput + it] ) {\n            output += String.fromCharCode( memory[memoryBufferStartOutput + it] );\n          } else {\n            output += String.fromCharCode( 0 );\n          }\n        }\n        break;\n\n      default :\n        break;\n    }\n\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory, \n      'input': input, \n      'output' : output, \n      'halted' : halted \n    };\n  }\n\n  function processRXInstruction( control, registers, memory, Rd, Ra, Op, adr ) {\n    const effectiveADR = guarantee16Bits( registers[Ra] + adr );\n\n    var jumped = false;\n\n    switch ( Op ) {\n      case 0x0 :\n        // lea\n        registers[Rd] = effectiveADR;\n        break;\n\n      case 0x1 :\n        // load\n        if ( !( memory[ effectiveADR ] ) ) memory[ effectiveADR ] = 0;\n\n        registers[Rd] = memory[ effectiveADR ];\n        break;\n\n      case 0x2 :\n        // store\n        memory[ effectiveADR ] = registers[Rd];\n        break;\n\n      case 0x3 :\n        // jump\n        control['pc'] = effectiveADR;\n        jumped = true;\n        break;\n\n      case 0x4 :\n        // jumpc0\n        if ( getBitFromRegister( registers[15], Rd ) === 0 ) {\n          control['pc'] = effectiveADR;\n          jumped = true;\n        }\n\n        break;\n\n      case 0x5 :\n        // jumpc1\n        if ( getBitFromRegister( registers[15], Rd ) > 0 ) {\n          control['pc'] = effectiveADR;\n          jumped = true;\n        }\n\n        break;\n\n      case 0x6 :\n        // jumpf\n        if ( registers[Rd] === 0 ) {\n          control['pc'] = effectiveADR;\n          jumped = true;\n        }\n        break;\n\n      case 0x7 :\n        // jumpt\n        if ( registers[Rd] === 1 ) {\n          control['pc'] = effectiveADR;\n          jumped = true;\n        }\n        break;\n\n      case 0x8 :\n        // jal\n        registers[Rd] = control['pc'] + 2;\n        control['pc'] = effectiveADR;\n        jumped = true;\n        break;\n\n      case 0x9 :\n        // testset\n        registers[Rd] = memory[effectiveADR];\n        memory[effectiveADR] = 1;\n\n        break;\n\n      default :\n\n        break;\n    }\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory,\n      'jumped' : jumped\n    };\n  }\n\n  function processEXPInstruction( control, registers, memory, input, output, Rd, Ra, Rb, adr ) {\n    var halted = false;\n    var jumped = false;\n\n    var flagDict = getR15Dict();\n    var setR15 = false;\n\n    const ab = ( Ra * thirdColumn ) + Rb;\n\n    const Re = Math.floor( adr / firstColumn );\n    const Rf = Math.floor( ( adr - ( Re * firstColumn ) ) / secondColumn );\n\n    const gh = Math.floor( adr - ( Rf * secondColumn ) - ( Re * firstColumn ) );\n\n    const g = Math.floor( gh / thirdColumn );\n    const h = Math.floor( ( gh - ( g * thirdColumn ) ) / fourthColumn );\n\n    var instructionWords;\n\n    switch ( ab ) {\n      case 0x0 :\n        // rfi\n        instructionWords = 1;\n        // currently nop as no interrupt registers to be affected\n\n        break;\n\n      case 0x8 :\n        // save\n        instructionWords = 2;\n        var effectiveADRsave = registers[Rd] + gh;\n\n        var diffSave = 0;\n        if ( Re > Rf ) {\n          diffSave = Math.abs( Re - ( Rf + 16 ) );\n        } else {\n          diffSave = Math.abs( Re - Rf );\n        }\n\n        for ( var iSave = Re; iSave <= ( Re + diffSave ); iSave++ ) {\n          var regNoSave = iSave % 16;\n          var validMemorySave = guarantee16Bits( effectiveADRsave + ( iSave - Re ) );\n          memory[validMemorySave] = registers[regNoSave];\n        }\n\n        break;\n\n      case 0x9 :\n        // restore\n        instructionWords = 2;\n        var effectiveADRrestore = registers[Rd] + gh;\n\n        var diffRestore = 0;\n        if ( Re > Rf ) {\n          diffRestore = Math.abs( Re - ( Rf + 16 ) );\n        } else {\n          diffRestore = Math.abs( Re - Rf );\n        }\n\n        for ( var iRestore = Re; iRestore <= ( Re + diffRestore ); iRestore++ ) {\n          var regNoRestore = iRestore % 16;\n\n          var validMemoryRestore = guarantee16Bits( effectiveADRrestore + ( iRestore - Re ) );\n\n          if ( memory[validMemoryRestore] ) {\n            registers[regNoRestore] = memory[validMemoryRestore];\n          } else {\n            registers[regNoRestore] = 0;\n          }\n        }\n\n        break;\n\n      case 0xa :\n        // getctl\n        instructionWords = 2;\n        switch ( g ) {\n          case 1 :\n            registers[Rd] = control['pc'];\n            break;\n\n          case 2 :\n            registers[Rd] = control['ir'];\n            break;\n\n          case 3 :\n            registers[Rd] = control['adr'];\n            break;\n\n          default :\n            break;\n        }\n        break;\n\n      case 0xb :\n        // putctl\n        instructionWords = 2;\n        switch ( g ) {\n          case 1 :\n            control['pc'] = registers[Rd];\n            jumped = true;\n            break;\n\n          case 2 :\n            control['ir'] = registers[Rd];\n            break;\n\n          case 3 :\n            control['adr'] = registers[Rd];\n            break;\n\n          default :\n            break;\n        }\n        break;\n\n      case 0xc :\n        // execute\n        instructionWords = 2;\n\n        if ( !( registers[Re] === 0xe00c && registers[Rf] === adr ) ) {\n\n          var processed = runFromInstruction( control, registers, memory, input, output, registers[Re], registers[Rf] );\n\n          control = processed['control'];\n          registers = processed['registers'];\n          memory = processed['memory'];\n          input = processed['input'];\n          output = processed['output'];\n          halted = processed['halted'];\n          jumped = processed['jumped'];\n\n          // do not update control registers ir and adr as can make reading executed program confusing\n          // control['ir'] = registers[Re];\n          // control['adr'] = registers[Rf];\n\n          control['ir'] = 0xe00c;\n          control['adr'] = adr;\n\n          setR15 = true;\n        } else {\n          halted = true;\n        }\n\n        break;\n\n      case 0xd :\n        // push\n        instructionWords = 2;\n        if ( registers[Re] < registers[Rf] ) {\n          registers[Re] += 1;\n\n          memory[registers[Re]] = registers[Rd];\n        } else {\n          // stack overflow flag set and nop\n          flagDict['S'] = 1;\n          setR15 = true;\n        }\n        break;\n\n      case 0xe :\n        // pop\n        instructionWords = 2;\n        if ( registers[Re] <= registers[Rf] ) {\n          registers[Rd] = memory[registers[Re]];\n\n          registers[Re] -= 1;\n        }\n        break;\n\n      case 0xf :\n        // top\n        instructionWords = 2;\n        registers[Rd] = memory[registers[Re]];\n        break;\n\n      case 0x10 :\n        // shiftl\n        instructionWords = 2;\n        registers[Rd] = registers[Re] << g;\n\n        if ( registers[Rd] >= 0x10000 && Rd !== 15 ) {\n          flagDict['V'] = 1;\n\n          registers[Rd] = guarantee16Bits( registers[Rd] );\n        }\n        setR15 = true;\n        break;\n\n      case 0x11 :\n        // shiftr\n        instructionWords = 2;\n        registers[Rd] = registers[Re] >> g;\n        break;\n\n      case 0x12 :\n        // extract\n        instructionWords = 2;\n        var resultExtract = 0;\n\n        // shiftl Rd,Re,g\n        resultExtract = guarantee16Bits( registers[Re] << g );\n\n        // shiftr Rd,Rr,15-h+g\n        resultExtract = resultExtract >> ( 15 - h + g );\n\n        registers[Rd] = resultExtract;\n        break;\n\n      case 0x13 :\n        // extracti\n        instructionWords = 2;\n        var resultExtractI = 0;\n\n        // inv Rd,Re\n        resultExtractI = ( registers[Re] ^ 0xffff );\n\n        // shiftl Rd,Rd,g\n        resultExtractI = guarantee16Bits( resultExtractI << g );\n\n        // shiftr Rd,Rr,15-h+g\n        resultExtractI = resultExtractI >>> ( 15 - h + g );\n\n        registers[Rd] = resultExtractI;\n        break;\n\n      case 0x14 :\n        // inject\n        instructionWords = 2;\n\n        registers[Rd] = setBitInRegisterMultiple( registers[Re], registers[Rf], h, g );\n        break;\n\n      case 0x15 :\n        // injecti\n        instructionWords = 2;\n\n        registers[Rd] = setBitInRegisterMultiple( registers[Re], ( registers[Rf] ^ 0xffff ), h, g );\n        break;\n\n      case 0x16 :\n        // logicw\n        instructionWords = 2;\n\n        switch ( g ) {\n          case 1 :\n            // and\n            registers[Rd] = registers[Re] & registers[Rf];\n            break;\n\n          case 6 :\n            // xor\n            registers[Rd] = registers[Re] ^ registers[Rf];\n            break;\n\n          case 7 :\n            // or\n            registers[Rd] = registers[Re] | registers[Rf];\n            break;\n\n          case 0xc :\n            // inv \n            registers[Rd] = registers[Re] ^ 0xffff;\n            break;\n\n          default :\n            break;\n        };\n\n        break;\n\n      case 0x17 :\n        // logicb\n        instructionWords = 2;\n        switch ( g ) {\n          case 1 :\n            // andb\n            const bitToSetAnd = getBitFromRegister( registers[Re] & registers[Rf], h );\n\n            registers[Rd] = setBitInRegister( registers[Rd], bitToSetAnd, h );\n            break;\n\n          case 6 :\n            // xorb\n            const bitToSetXor = getBitFromRegister( registers[Re] ^ registers[Rf], h );\n\n            registers[Rd] = setBitInRegister( registers[Rd], bitToSetXor, h );\n            break;\n\n          case 7 :\n            // orb\n            const bitToSetOr = getBitFromRegister( registers[Re] | registers[Rf], h );\n\n            registers[Rd] = setBitInRegister( registers[Rd], bitToSetOr, h );\n            break;\n\n          case 0xc :\n            // invb \n            const bitToSetInv = ( getBitFromRegister( registers[Re], h ) ^ 1 );\n\n            registers[Rd] = setBitInRegister( registers[Rd], bitToSetInv, h );\n            break;\n\n          default :\n            break;\n        };\n        break;\n\n      case 0x18 :\n        // getbit\n        instructionWords = 2;\n        \n        const bit = getBitFromRegister( registers[15], g );\n\n        registers[Rd] = bit;\n\n        break;\n\n      case 0x19 :\n        // getbiti\n        instructionWords = 2;\n\n        const bitI = getBitFromRegister( registers[15], g );\n\n        registers[Rd] = ( bitI ^ 1 );\n        \n        break;\n\n      case 0x1a :\n        // putbit\n        instructionWords = 2;\n\n        const bitToSetPut = getBitFromRegister( registers[Rd], g );\n\n        registers[15] = setBitInRegister( registers[15], bitToSetPut, g );\n        break;\n\n      case 0x1b :\n        // putbiti\n        instructionWords = 2;\n        \n        const bitToSetPutI = ( getBitFromRegister( registers[Rd], g ) ^ 1 );\n        \n        registers[15] = setBitInRegister( registers[15], bitToSetPutI, g );\n        break;\n\n      case 0x1c :\n        // addc\n        instructionWords = 2;\n\n        const R15CarryBit = getBitFromRegister( registers[15], 7 );\n        registers[Rd] = registers[Re] + registers[Rf] + R15CarryBit;\n\n        if ( registers[Rd] >= 0x10000 ) {\n          registers[Rd] = guarantee16Bits( registers[Rd] );\n          flagDict['V'] = 1;\n          flagDict['C'] = 1;\n        }\n        \n        flagDict = compareRegisters( registers[Rd], registers[0], flagDict );\n        setR15 = true;\n        break;\n\n      default :\n        instructionWords = 1;\n        // unrecognised so nop\n        break;\n    }\n\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory,\n      'input' : input,\n      'output' : output,\n      'instructionWords' : instructionWords,\n      'halted' : halted,\n      'jumped' : jumped,\n      'flagDict' : flagDict,\n      'setR15' : setR15\n    };\n  }\n\n  function runFromInstruction( control, registers, memory, input, output, instructionIr, instructionADR ) {\n    var halted = false;\n    var processed = {};\n\n    var jumped = false;\n\n    var instructionWords = 0;\n\n    const Op = Math.floor( instructionIr / firstColumn );\n    const Rd = Math.floor( ( instructionIr - ( Op * firstColumn ) ) / secondColumn );\n    const Ra = Math.floor( ( instructionIr - ( Rd * secondColumn ) - ( Op * firstColumn ) ) / thirdColumn );\n    const Rb = Math.floor( ( instructionIr - ( Ra * thirdColumn ) - ( Rd * secondColumn ) - ( Op * firstColumn ) ) / fourthColumn );\n\n    var RaValue = registers[Ra];\n    var RbValue = registers[Rb];\n\n    var flagDict = getR15Dict();\n    var setR15 = false;\n\n    control['ir'] = instructionIr;\n    control['adr'] = instructionADR;\n\n    switch ( Op ) {\n      case 0x0 :\n        // add\n        instructionWords = 1;\n        registers[Rd] = RaValue + RbValue;\n\n        if ( registers[Rd] >= 0x10000 ) {\n          registers[Rd] = guarantee16Bits( registers[Rd] );\n          flagDict['V'] = 1;\n          flagDict['C'] = 1;\n        }\n        \n        flagDict = compareRegisters( registers[Rd], registers[0], flagDict );\n        setR15 = true;\n\n        break;\n\n      case 0x1 :\n        // sub\n        instructionWords = 1;\n        \n        registers[Rd] = RaValue;\n\n        if ( RaValue < RbValue ) {\n          flagDict['v'] = 1;\n          registers[Rd] += 0x10000;\n        }\n\n        registers[Rd] -= RbValue;\n        \n        flagDict = compareRegisters( registers[Rd], registers[0], flagDict );\n        setR15 = true;\n\n        break;\n\n      case 0x2 :\n        // mul\n        instructionWords = 1;\n        registers[Rd] = RaValue * RbValue;\n\n        if ( registers[Rd] >= 0x10000 ) {\n          flagDict['V'] = 1;\n          registers[Rd] = guarantee16Bits( registers[Rd] );\n        }\n        \n        flagDict = compareRegisters( registers[Rd], registers[0], flagDict );\n        setR15 = true;\n\n        break;\n\n      case 0x3 :\n        // div\n        instructionWords = 1;\n\n        RaValue = readSignedHex( RaValue );\n        RbValue = readSignedHex( RbValue );\n\n        if ( RbValue !== 0 ) {\n          registers[Rd] = readUnsignedHex( Math.floor( RaValue / RbValue ) );\n\n          if ( Rd !== 15 ) {\n            registers[15] = readUnsignedHex( RaValue % RbValue );\n          }\n        } else {\n          registers[Rd] = readUnsignedHex( RaValue );\n\n          if ( Rd !== 15 ) {\n            registers[15] = 0;\n          }\n        }\n\n        // no flags being set in r15 as div works differently\n\n        break;\n\n      case 0x4 :\n        // cmp\n        instructionWords = 1;\n        flagDict = compareRegisters( RaValue, RbValue, flagDict );\n        setR15 = true;\n\n        break;\n\n      case 0x5 :\n        // cmplt\n        instructionWords = 1;\n        ( readSignedHex( RaValue ) < readSignedHex( RbValue ) ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        \n        break;\n\n      case 0x6 :\n        // cmpeq\n        instructionWords = 1;\n        ( readSignedHex( RaValue ) === readSignedHex( RbValue ) ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0x7 :\n        // cmpgt\n        instructionWords = 1;\n        ( readSignedHex( RaValue ) > readSignedHex( RbValue ) ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0x8 :\n        // inv\n        instructionWords = 1;\n        registers[Ra] = RbValue ^ 0xffff;\n\n        break;\n\n      case 0x9 :\n        // and\n        instructionWords = 1;\n        registers[Rd] = registers[Ra] & registers[Rb];\n        break;\n\n      case 0xa :\n        // or\n        instructionWords = 1;\n        registers[Rd] = registers[Ra] | registers[Rb];\n        break;\n\n      case 0xb :\n        // xor\n        instructionWords = 1;\n        registers[Rd] = registers[Ra] ^ registers[Rb];\n        break;\n\n      case 0xc :\n        // nop\n        instructionWords = 1;\n\n        break;\n\n      case 0xd :\n        // trap\n        instructionWords = 1;\n        processed = processTRAPInstruction( control, registers, memory, input, output, Rd, Ra, Rb );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n        input = processed['input'];\n        output = processed['output'];\n\n        halted = processed['halted'];\n\n        break;\n\n      case 0xe :\n        processed = processEXPInstruction( control, registers, memory, input, output, Rd, Ra, Rb, instructionADR );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n        input = processed['input'];\n        output = processed['output'];\n        instructionWords = processed['instructionWords'];\n        halted = processed['halted'];\n        jumped = processed['jumped'];\n        flagDict = processed['flagDict'];\n        setR15 = processed['setR15'];\n\n        break;\n\n      case 0xf :\n        instructionWords = 2;\n        processed = processRXInstruction( control, registers, memory, Rd, Ra, Rb, instructionADR );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n        jumped = processed['jumped'];\n        \n        break;\n\n      default :\n        instructionWords = 1;\n        halted = true;\n        break;\n    }\n\n    if ( Rd !== 15 && setR15 ) {\n      registers[15] = setR15Flags( flagDict );\n    }\n\n    // R0 holds constant 0\n    registers[0] = 0;\n\n    return {\n      'control' : control,\n      'registers' : registers,\n      'memory' : memory,\n      'input' : input,\n      'output' : output,\n      'halted' : halted,\n      'instructionWords' : instructionWords,\n      'jumped' : jumped\n    };\n  }\n\n  export function runMemory( control, registers, memory, input, output, testMode=false ) {\n    // memory for execution is valid\n    const instructionIr = memory[control['pc']];\n    if ( !( memory[control['pc'] + 1] ) && instructionIr >= 0xe008 ) memory[control['pc'] + 1] = 0;\n\n    // update adr with memory values\n    var instructionADR = 0;\n    if ( instructionIr >= 0xe008 ) instructionADR = memory[control['pc'] + 1]; // 0xe008 as this is the start of the EXP4, EXP8, and, RX commands which are all two words\n\n    // run the ir with adr\n    const ran = runFromInstruction( control, registers, memory, input, output, instructionIr, instructionADR );\n\n    control = ran['control'];\n    registers = ran['registers'];\n    memory = ran['memory'];\n    input = ran['input'];\n    output = ran['output'];\n    var halted = ran['halted'];\n    const instructionWords = ran['instructionWords'];\n    const jumped = ran['jumped'];\n\n    if ( !jumped ) {\n      control['pc'] += instructionWords;\n\n      if ( !( control['pc'] < 0x10000 ) ) {\n        halted = true; \n        control['pc'] = 0;\n      }\n    }\n\n    if ( !halted && !testMode && !( memory[control['pc']] ) ) memory[control['pc']] = 0;\n\n    // checking that happens outwith running that would break the emulator during next execution\n    // commented out as may be useful as developer to use if such an error does occur, howver assumed that it wont so check in regualr use will slow down program\n    // if ( Object.values( registers ).includes( NaN ) || Object.values( registers ).includes( undefined )  ) {\n    //   console.log( control );\n    //   console.log( registers );\n    //   console.log( memory );\n\n    //   output += '==== SEVERE SYSTEM ERROR ====';\n\n    //   halted = true;\n    // }\n\n    return { \n      'control' : control, \n      'registers' : registers, \n      'memory' : memory, \n      'input': input, \n      'output' : output, \n      'halted' : halted \n    };\n  }\n","/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\nimport React from 'react';\n\nimport './DocumentationView.css';\n\nimport { Button, Col, Collapse, Row, Table } from 'react-bootstrap';\nimport { FaBackward, FaBug, FaChevronDown, FaChevronUp, FaDownload, FaEye, FaEyeSlash, FaHammer, FaMinus, FaPen, FaPlay, FaStepForward, FaTimes, FaUpload } from 'react-icons/fa';\nimport Select from 'react-select';\n\nimport * as Emulator from './utils/Emulator';\n\nimport NavBar from './NavBar';\n\nexport default class DocumentationView extends React.Component {\n// CLASS METHODS\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n      input : '',\n\n      display : {},\n\n      searchSubHeadings : [\n        'Contents', // Contents\n\n        'To know before coding', // To know before coding\n\n          'Toknow before coding/Introduction to language', // Introduction to language\n            'Toknow before coding/Introduction to language/Constants', // Constants\n            'Toknow before coding/Introduction to language/Comments', // Comments\n            'Toknow before coding/Introduction to language/Labels', // Labels\n\n          'Toknow before coding/Introduction to machine code', // Introduction to machine code\n\n          'Toknow before coding/Overview of architecture', // Overview of architecture\n            'Toknow before coding/Overview of architecture/CPU', // CPU\n            'Toknow before coding/Overview of architecture/Registers', // Registers\n              'Toknow before coding/Overview of architecture/Registers/R0', // R0\n              'Toknow before coding/Overview of architecture/Registers/R15', // R15\n            'Toknow before coding/Overview of architecture/Memory', // Memory\n\n\n        'Instruction set', // Instruction set\n\n          'Instruction set/data', // data\n\n          'Instruction set/RRR', // RRR\n            'Instruction set/RRR/add', // add\n            'Instruction set/RRR/sub', // sub\n            'Instruction set/RRR/mul', // mul\n            'Instruction set/RRR/div', // div\n            'Instruction set/RRR/cmp', // cmp\n            'Instruction set/RRR/cmplt', // cmplt\n            'Instruction set/RRR/cmpeq', // cmpeq\n            'Instruction set/RRR/cmpgt', // cmpgt\n            'Instruction set/RRR/inv', // inv\n            'Instruction set/RRR/and', // and\n            'Instruction set/RRR/or', // or\n            'Instruction set/RRR/xor', // xor\n            'Instruction set/RRR/trap', // trap\n\n          'Instruction set/RX', // RX\n            'Instruction set/RX/lea', // lea\n            'Instruction set/RX/load', // load\n            'Instruction set/RX/store', // store\n            'Instruction set/RX/jump', // jump\n            'Instruction set/RX/jumpc0', // jumpc0\n            'Instruction set/RX/jumpc1', // jumpc1\n            'Instruction set/RX/jumpf', // jumpf\n            'Instruction set/RX/jumpt', // jumpt\n            'Instruction set/RX/jal', // jal\n            'Instruction set/RX/testset', // testset\n            'Instruction set/RX/Conditional jumps', // Conditional jumps\n\n          'Instruction set/EXP', // EXP\n            'Instruction set/EXP/EXP0', // EXP0\n              'Instruction set/EXP/EXP0/rfi', // rfi\n\n            'Instruction set/EXP/EXP4', // EXP4\n              'Instruction set/EXP/EXP4/execute', // execute\n              'Instruction set/EXP/EXP4/getctl', // getctl\n              'Instruction set/EXP/EXP4/putctl', // putctl\n              'Instruction set/EXP/EXP4/push', // push\n              'Instruction set/EXP/EXP4/pop', // pop\n              'Instruction set/EXP/EXP4/top', // top\n              'Instruction set/EXP/EXP4/addc', // addc\n              'Instruction set/EXP/EXP4/shiftl', // shiftl\n              'Instruction set/EXP/EXP4/shiftr', // shiftr\n              'Instruction set/EXP/EXP4/getbit', // getbit\n              'Instruction set/EXP/EXP4/getbiti', // getbiti\n              'Instruction set/EXP/EXP4/putbit', // putbit\n              'Instruction set/EXP/puP4i/getbit', // putbiti\n              'Instruction set/EXP/EXP4/extract', // extract\n              'Instruction set/EXP/EXP4/extracti', // extracti\n              'Instruction set/EXP/EXP4/inject', // inject\n              'Instruction set/EXP/EXP4/injecti', // injecti\n              'Instruction set/EXP/EXP4/field', // field\n              'Instruction set/EXP/EXP4/logicw', // logicw\n              'Instruction set/EXP/EXP4/logicb', // logicb\n              'Instruction set/EXP/EXP4/Logic aliases', // Logic aliases\n\n            'Instruction set/EXP/EXP8', // EXP8\n              'Instruction set/EXP/EXP8/save', // save\n              'Instruction set/EXP/EXP8/restore', // restore\n\n          'Instruction set/All instructions', // All instructions\n\n\n        'Using the IDE', // Using the IDE\n          'Using the IDE/Notes about the IDE that are unbelievably important', // Notes about the IDE that are unbelievably important\n\n          'Using the IDE/Editing a program', // Editing a program\n            'Using the IDE/Editing a program/Input editing', // Input editing\n\n          'Using the IDE/Running a program', // Running a program\n          \n          'Using the IDE/Debugging a program', // Debugging a program\n            'Using the IDE/Debugging a program/Syntax errors', // Syntax errors\n            'Using the IDE/Debugging a program/Semantic errors - Debugger', // Semantic errors - Debugger\n              'Using the IDE/Debugging a program/Semantic errors - Debugger/Breakpoints', // Breakpoints\n\n          'Using the IDE/Exporting a program', // Exporting a program\n            'Using the IDE/Exporting a program/Exporting - Raw', // Exporting - Raw\n            'Using the IDE/Exporting a program/Exporting - Raw Compatible', // Exporting - Raw Compatible\n            'Using the IDE/Exporting a program/Exporting - Binary', // Exporting - Binary\n            'Using the IDE/Exporting a program/Exporting - Hex', // Exporting - Hex\n            'Using the IDE/Exporting a program/Exporting - Hex Compatible', // Exporting - Hex Compatible\n\n          'Using the IDE/Importing a program' // Importing a program\n      ],\n\n      labels : {\n        'test' : 0x0010\n      },\n\n      scrollOnOpen : false,\n      scrollTo : ''\n    };\n\n    for ( var i = 0; i < this.state.searchSubHeadings.length; i++ ) {\n      const splat = this.state.searchSubHeadings[i].replace( /\\s+/g, '' ).split( '/' );\n      const showName = splat[splat.length - 1];\n      this.state.display[showName] = true;\n    }\n\n    this.state.setParentState = this.setParentState.bind( this );\n    this.state.infoAreaOpenCallback = this.infoAreaOpenCallback.bind( this );\n  }\n\n  componentDidMount() {\n    if ( sessionStorage.getItem( 'code' ) !== null && sessionStorage.getItem( 'input' ) !== null && sessionStorage.getItem( 'breakpoints' ) !== null ) {\n      this.setState( {\n        code : sessionStorage.getItem( 'code' ),\n        input : sessionStorage.getItem( 'input' ),\n        breakpoints : sessionStorage.getItem( 'breakpoints' ).split( ',' ).map(\n          breakpointString => {\n            return( Number( breakpointString ) );\n          }\n        )\n      } );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( this.props );\n    }\n  }\n\n  saveStorage = e => {\n    sessionStorage.setItem( 'code', this.state.code );\n    sessionStorage.setItem( 'input', this.state.input );\n    sessionStorage.setItem( 'breakpoints', this.state.breakpoints );\n  }\n\n// ABSTRACTION\n  flagsSet( title, flags, renderUnless=true ) {\n    return (\n      <React.Fragment>\n        <li>Flags set in R15\n          { renderUnless &&\n            <React.Fragment>\n              , unless Rd is R15\n            </React.Fragment> }\n          {'\\xa0'/**&nbsp*/}:\n        </li>\n        <ul>\n          { flags.map( flag => {\n            return ( <li key={ title + flag }>{flag}</li> );\n          } ) }\n        </ul>\n      </React.Fragment>\n    );\n  }\n\n  machineCode( command, argument, opCode, opCodeName='op' ) {\n    const compiledCommands = Emulator.parseLineForMachineCode( command + ' ' + argument, this.state.labels );\n\n    var writtenCommands = '';\n\n    for ( var i = 0; i < compiledCommands.length; i++ ) {\n      writtenCommands += '$' + Emulator.writeHex( compiledCommands[i] );\n      if ( i !== compiledCommands.length - 1 ) {\n        writtenCommands += ',';\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <code>{command + ' ' + argument}</code> := <code>{writtenCommands}</code>, since the <strong>{opCodeName}</strong> code of <code>{command}</code> is <strong>${opCode.toString( 16 )}</strong>\n      </React.Fragment>\n    );\n  }\n\n  wrongGroupings( command, is, why, groupedAs ) {\n    return(\n      <React.Fragment>\n        <code>{command}</code> is technically <strong>{is}</strong> command since it takes <strong>{why}</strong>, however, its <strong>machine code representation</strong> it that of <strong>{groupedAs}</strong> command, therefore, it is grouped as such\n      </React.Fragment>\n    );\n  }\n\n  theOriginalEmulator() {\n    return (\n      <React.Fragment>\n        the{'\\xa0'/**&nbsp*/}\n        <a\n          href='https://jtod.github.io/home/Sigma16/'\n          target='_blank'\n          rel='noopener noreferrer'>\n          original emulator \n        </a>\n      </React.Fragment>\n    );\n  }\n\n  expParsedAs( command, argument, parsedAs ) {\n    return(\n      <React.Fragment>        \n        Since <code>{command}</code> takes <strong>{argument}</strong>, it is parsed as a <strong>{parsedAs}</strong> command\n      </React.Fragment>\n    );\n  }\n\n  summaryTableRow( command, func, toMc ) {\n    const compiledCommands = Emulator.parseLineForMachineCode( toMc, this.state.labels );\n\n    var writtenCommands = '';\n\n    for ( var i = 0; i < compiledCommands.length; i++ ) {\n      writtenCommands += '$' + Emulator.writeHex( compiledCommands[i] );\n      if ( i !== compiledCommands.length - 1 ) {\n        writtenCommands += ',';\n      }\n    }\n\n    return (\n      <tr>\n        <td><code>{command}</code></td>\n        <td>{func}</td>\n        <td><code>{toMc}</code> := <code>{writtenCommands}</code></td>\n      </tr>\n    );\n  }\n\n// COLLAPSE METHODS\n  setParentState = e => {\n    this.setState( e );\n  }\n\n// CONTENTS AND SEARCH METHODS\n  searchChoose = e => {\n    if ( this.state.display[e.value] ) {\n      this.scrollToId( e.value )\n    } else {\n      let displayCopy = this.state.display;\n\n      for ( var i = 0; i < this.state.searchSubHeadings.length; i++ ) {\n        var displayNameList = this.state.searchSubHeadings[i].replace( /\\s+/g, '' ).split( '/' );\n\n        if ( displayNameList[displayNameList.length - 1] === e['value'] ) {\n\n          for ( var it = 0; it < displayNameList.length; it++ ) {\n            displayCopy[displayNameList[it]] = true;\n          }\n\n        }\n      }\n\n      this.setState( { display : displayCopy, scrollOnOpen : true, scrollTo : e.value } );\n    }\n  }\n\n  contentsChoose = e => {\n    e.target.blur();\n    const sliced = e.target.id.slice( 0, e.target.id.length - 4 ).replace( /\\s+/g, '' );\n\n    if ( this.state.display[sliced] ) {\n      this.scrollToId( sliced )\n    } else {\n      let displayCopy = this.state.display;\n\n      for ( var i = 0; i < this.state.searchSubHeadings.length; i++ ) {\n        var displayNameList = this.state.searchSubHeadings[i].replace( /\\s+/g, '' ).split( '/' );\n\n        if ( displayNameList[displayNameList.length - 1] === sliced ) {\n\n          for ( var it = 0; it < displayNameList.length; it++ ) {\n            displayCopy[displayNameList[it]] = true;\n          }\n\n        }\n      }\n\n      this.setState( { display : displayCopy, scrollOnOpen : true, scrollTo : sliced } );\n    }\n  }\n\n  scrollToId( id ) {\n    const elementToScrollTo = document.getElementById( id );\n    elementToScrollTo.scrollIntoView();\n  }\n\n  infoAreaOpenCallback = async e => {\n    if ( this.state.scrollOnOpen ) {\n      await new Promise( r => setTimeout( r, 1 ) );\n      // waits one millisecond so that deeply nested InfoArea's have time for their parents to un-collapse properly, thus updating their offsetTop properly\n\n      this.scrollToId( this.state.scrollTo );\n\n      this.setState( { scrollOnOpen : false } );\n    }\n  }\n\n// BUTTON METHODS\n  setDisplaysAs( as ) {\n    let displayCopy = this.state.display;\n\n    for ( var i = 0; i < this.state.searchSubHeadings.length; i++ ) {\n      const splat = this.state.searchSubHeadings[i].replace( /\\s+/g, '' ).split( '/' );\n      const showName = splat[splat.length - 1];\n      displayCopy[showName] = as;\n    }\n\n    this.setState( { display : displayCopy } );\n  }\n\n  setDisplaysClose = e => {\n    this.setDisplaysAs( false );\n  }\n\n  setDisplaysOpen = e => {\n    this.setDisplaysAs( true );\n  }\n\n// RENDER\n  render() {\n    if ( localStorage.getItem( 'theme' ) !== null ) {\n      document.body.classList.replace( localStorage.getItem( 'theme' ) === 'light' ? 'dark' : 'light', localStorage.getItem( 'theme' ) );\n    } else {\n      document.body.classList.add( 'light' );\n\n      localStorage.setItem( 'theme', 'light' );\n    }\n    \n    var subHeadings = [];\n    for ( var i = 0; i < this.state.searchSubHeadings.length; i++ ) {\n      var indent = '';\n      const splat = this.state.searchSubHeadings[i].split( '/' );\n      while ( splat.length - 1 > ( indent.length / 2 ) ) { indent += '->' };\n      indent += '  ';\n      const showName = splat[splat.length - 1].replace( /\\s+/g, '' );\n      subHeadings.push( {value : showName, label : indent + splat[splat.length - 1]} );\n    }\n\n    return(\n      <React.Fragment>\n        <NavBar onClick={this.saveStorage} pathname={'/#' + this.props.location.pathname} />\n        <div className=\"mainbody\">\n          <Row>\n            <Col>\n              Original documentation of the Sigma16 language can be found{`\\xa0`/**&nbsp*/}\n              <a \n                href='https://jtod.github.io/home/Sigma16/releases/3.1.3/docs/html/userguide/userguide.html' \n                target='_blank' \n                rel='noopener noreferrer'>\n                  here\n                </a>\n              . All of this emulator and command set works the same, except anything to do with the linker, e.g modules.\n              <Row>\n                <Col md={10}>\n                  <Select\n                    isSearchable={true}\n                    options={subHeadings}\n                    theme={{borderRadius : 7}}\n                    onChange={this.searchChoose}\n                    placeholder='Search section titles...'\n                  />\n                </Col>\n                <Col md={2}>\n                  <Button variant='outline-secondary' size='md' onClick={this.setDisplaysClose}>\n                    <FaChevronUp/>\n                  </Button>\n                  <div style={{float : 'right'}}>\n                    <Button variant='outline-secondary' size='md' onClick={this.setDisplaysOpen}>\n                      <FaChevronDown/>\n                    </Button>\n                  </div>\n                </Col>\n              </Row>\n              <InfoArea state={this.state} title={'Contents'} depth={1}>\n                <div className='info-body white'>\n                  {\n                    this.state.searchSubHeadings.map( ( subHeading, index ) => {\n                      var indent = '';\n                      const splat = subHeading.split( '/' );\n                      const indentor = '\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0';\n                      while ( splat.length - 1 > ( indent.length / indentor.length ) ) { indent += indentor };\n                      return(\n                        <div key={subHeading + ' con'}>\n                          {indent}\n                          <span\n                            className='documentation-page-link'\n                            id={splat[splat.length - 1] + ' con'}\n                            onClick={this.contentsChoose}>\n                            {splat[splat.length - 1]}\n                          </span>\n                          <br/>\n                        </div>\n                      );\n                    } )\n                  }\n                </div>\n              </InfoArea>\n              <InfoArea state={this.state} title={'To know before coding'} depth={1}>\n                <InfoArea state={this.state} title={'Introduction to language'} depth={2}>\n                  <div className='info-body white'>\n                    Sigma16 is a computer <strong>architecture</strong> designed for <strong>research</strong> and <strong>teaching</strong> in computer systems. This application provides a <strong>complete environment</strong> for <strong>experimenting</strong> with the architecture<br/>\n                    <br/>\n                    Like other languages, Sigma16 <strong>takes</strong> the <strong>code</strong> provided and <strong>compiles</strong> it to <strong>machine code</strong> which is then <strong>iterated over</strong> to <strong>execute</strong> a program<br/>\n                  </div>\n                  <InfoArea state={this.state} title={'Constants'} depth={3}>\n                    <div className='info-body white'>\n                      Constants in Sigma16 can either be written as <strong>decimal</strong>, <strong>hexadecimal</strong> - hex for short - or, <strong>binary</strong><br/>\n                      <br/>\n                      <strong>Decimal</strong> representation in Sigma16 comes as just regular numbers with <strong>no prefix</strong> :<br/>\n                      <code>10</code> represents <strong>decimal</strong> 10<br/> \n                      <br/>\n                      <strong>Hexadecimal</strong> representation in Sigma16 comes as a <strong>hex</strong> number, number characters <strong>0-9</strong> and <strong>a-f</strong>, with a <strong>$</strong> prefix :<br/>\n                      <code>$10</code> represents <strong>decimal</strong> 16<br/>\n                      <br/>\n                      <strong>Binary</strong> representation in Sigma16 comes as a <strong>binary</strong> number, number characters <strong>0</strong> or <strong>1</strong>, with a <strong>#</strong> prefix :<br/>\n                      <code>#10</code> represents <strong>decimal</strong> 2<br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Comments'} depth={3}>\n                    <div className='info-body white'>\n                      <strong>Comments</strong> in Sigma16 are defined as <strong>anything after</strong> a <strong>semi-colon</strong> - <code>;</code><br/>\n                      <br/>\n                      <strong>Comments</strong> are <strong>ignored</strong> by the <strong>compiler</strong><br/>\n                      This means that the <strong>contents</strong> of comments <strong>do not</strong> have to be in a specific <strong>format</strong> as they are <strong>not parsed</strong> at all<br/>\n                      <br/>\n                      In another way, <code>add R1,R2,R3</code> and <code>add R1,R2,R3; R1 := R2 + R3</code> will be <strong>compiled</strong> to be the <strong>same machine code</strong>; <code>$0123</code>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Labels'} depth={3}>\n                    <div className='info-body white'>\n                      <strong>Labels</strong> can be made up of <strong>any alphanumerical</strong> characters including the underscore character - <strong>_</strong><br/>\n                      <br/>\n                      Labels <strong>must start</strong> with an <strong>alphabet</strong> character or an <strong>underscore</strong> character - <strong>_</strong><br/>\n                      <br/>\n                      Labels are <strong>case-sensitive</strong><br/>\n                      <br/>\n                      Labels <strong>cannot contain</strong> either a dollar sign - <strong>$</strong> - or a hash sign - <strong>#</strong>. This is because both of <strong>these</strong> are used to <strong>represent</strong> hex and binary <strong>constants</strong> repectively<br/>\n                    </div>\n                  </InfoArea>\n                </InfoArea>\n                <InfoArea state={this.state} title={'Introduction to machine code'} depth={2}>\n                  <div className='info-body white'>\n                    Sigma16's <strong>machine code</strong> is comprised of <strong>16-bit \"words\"</strong> ( 2 bytes ) which are <strong>compiled</strong> from the assembly <strong>program provided</strong><br/>\n                    <br/>\n                    This <strong>machine code</strong> is then <strong>set</strong> into the <strong>memory</strong>, starting at the <strong>0</strong>th position. The <strong>memory</strong> then <strong>runs</strong> through, taking one or more words and <strong>executing functions</strong> based off of those words' <strong>associated meanings</strong><br/>\n                  </div>\n                </InfoArea>\n                <InfoArea state={this.state} title={'Overview of architecture'} depth={2}>\n                  <InfoArea state={this.state} title={'CPU'} depth={3}>\n                    <div className='info-body white'>\n                      The CPU of Sigma16 is defined by the <strong>Control registers</strong><br/>\n                      <br/>\n                      These control registers help the program to...<br/>\n                      <ul>\n                        <li>keep track of what address in memory is to be executed - the <strong>Program Counter 'pc'</strong> register</li>\n                        <li>show the first machine code instruction being executed is - the <strong>Instruction 'ir'</strong> register</li>\n                        <li>show the second <strong>sometimes omitted</strong> machine code instruction being executed is - the <strong>Address 'adr'</strong> register</li>\n                      </ul>\n                      These control registers are sometimes <strong>accessed</strong> or <strong>altered</strong> by instructions and in such cases, the <strong>psuedo-code</strong> representation for this will be <strong>control[control register name]</strong><br/>\n                      i.e, <strong>control[pc]</strong> for accessing the Program Counter register\n\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Registers'} depth={3}>\n                    <div className='info-body white'>\n                      The registers of Sigma16 are shown by the values labelled <strong>R0 -> R15</strong><br/>\n                      <br/>\n                      These registers are what <strong>most</strong> instructions are <strong>affecting</strong> and <strong>relying</strong> on to produce an <strong>output</strong> of the program<br/>\n                      <br/>\n                      Sometimes only specific <strong>bits</strong> of these registers will be required though<br/>\n                      In Sigma16, bits are counted from the most important, <strong>left-most</strong>, to the least important, <strong>right-most</strong>, sides<br/>\n                      i.e <strong>R15.0</strong> will be the <strong>left-most</strong> bit and <strong>R15.15</strong> the <strong>right-most</strong><br/>\n                      <br/>\n                      Most registers just hold a value, however, there are <strong>special registers</strong> built in that have very specific purposes :<br/>\n                    </div>\n                    <InfoArea state={this.state} title={'R0'} depth={4}>\n                      <div className='info-body white'>\n                        <strong>Always holds the value 0</strong><br/>\n                        <br/>\n                        <strong>Can</strong> have functions <strong>set values</strong> into it, however, this register <strong>will always</strong> equal <strong>0</strong>\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'R15'} depth={4}>\n                      <div className='info-body white'>\n                        <strong>Will have different values based on certain instructions</strong><br/>\n                        <br/>\n                        R15's value relies on different <strong>flags</strong> being set in it. These <strong>flags represent bits</strong> in the registers <strong>16-bit</strong> word. This means that when a <strong>flag</strong> equals <strong>1</strong>, the <strong>corresponding</strong> bit in R15 will be set to <strong>1</strong><br/>\n                        <br/>\n                        The <strong>flags</strong>, their <strong>corresponding bits</strong> and the <strong>meanings</strong> behind the flags are :<br/>\n                        <Table bordered hover size='sm'>\n                          <thead>\n                            <tr>\n                              <th>Flag</th>\n                              <th>Bit</th>\n                              <th>Meaning</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <tr>\n                              <td><strong>G</strong></td>\n                              <td>0</td>\n                              <td>Unsigned greater than ( or greater than 0 )</td>\n                            </tr>\n                            <tr>\n                              <td><strong>g</strong></td>\n                              <td>1</td>\n                              <td>Signed greater than ( or greater than 0 )</td>\n                            </tr>\n                            <tr>\n                              <td><strong>E</strong></td>\n                              <td>2</td>\n                              <td>Equal to ( or equal to 0 )</td>\n                            </tr>\n                            <tr>\n                              <td><strong>l</strong></td>\n                              <td>3</td>\n                              <td>Signed less than ( or less than 0 )</td>\n                            </tr>\n                            <tr>\n                              <td><strong>L</strong></td>\n                              <td>4</td>\n                              <td>Unsigned less than ( or less than 0 )</td>\n                            </tr>\n                            <tr>\n                              <td><strong>V</strong></td>\n                              <td>5</td>\n                              <td>Unsigned integer overflow</td>\n                            </tr>\n                            <tr>\n                              <td><strong>v</strong></td>\n                              <td>6</td>\n                              <td>Signed integer overflow</td>\n                            </tr>\n                            <tr>\n                              <td><strong>C</strong></td>\n                              <td>7</td>\n                              <td>Carry output</td>\n                            </tr>\n                            <tr>\n                              <td><strong>S</strong></td>\n                              <td>8</td>\n                              <td>Stack overflow ( only implemented in this emulator )</td>\n                            </tr>\n                          </tbody>\n                        </Table>\n                      </div>\n                    </InfoArea>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Memory'} depth={3}>\n                    <div className='info-body white'>\n                      The memory is an array of words that are accessed by address<br/>\n                      <br/>\n                      <strong>A memory address is a 16-bit word</strong>, and there is one memory location corresponding to each address, so there are <strong>2^16 - 64k - memory locations</strong><br/>\n                      These memory addresses can be used to <strong>access</strong> and <strong>update</strong> memory values by the <strong>psuedo-code</strong> notation of <strong>memory[address]</strong><br/>\n                      <br/>\n                      Each memory location is also a <strong>16-bit word</strong><br/>\n                    </div>\n                  </InfoArea>\n                </InfoArea>\n              </InfoArea>\n              <InfoArea state={this.state} title={'Instruction set'} depth={1}>\n                <InfoArea state={this.state} title={'data'} depth={2}>\n                  <div className='info-body white'>\n                    Use :<br/>\n                    <code>data constant[,constant,constant,...]</code><br/>\n                    Effects :<br/>\n                    <ul>\n                      <li>The value in memory corresponding to the line is set as the passed-in constants</li>\n                    </ul>\n\n                    Machine code :<br/>\n                    <code>data $0010</code> := <code>$0010</code>, since <code>data</code> is parsed so that the <strong>constant</strong> is set into the line's <strong>corresponding memory cell/location</strong><br/>\n                    <br/>\n                    Note :<br/>\n                    <strong>Multiple</strong> constants can be <strong>optionally</strong> passed-in to the <code>data</code> command as arguments to fill <strong>subsequent</strong> memory <strong>cells</strong>, however, this <strong>feature</strong> is not supported in {this.theOriginalEmulator()}\n                  </div>\n                </InfoArea>\n                <InfoArea state={this.state} title={'RRR'} depth={2}>\n                  <div className='info-body white' style={{marginBottom : '7px'}}>\n                    Compiled RRR instructions take up one word in memory, or one memory cell/location<br/>\n                    <br/>\n                    Their compiled states can be broken down into :<br/>\n                    <ul>\n                      <li>op - the <strong>operation code</strong>, signifies which operation to execute on the passed-in arguments</li>\n                      <li>d - the number of the <strong>destination register</strong>, <strong>Rd</strong></li>\n                      <li>a - the number of <strong>first argument</strong> register, <strong>Ra</strong></li>\n                      <li>b - the number of <strong>second argument</strong> register, <strong>Rb</strong></li>\n                    </ul>\n                    These components make up a machine code word by setting the <strong>first</strong> letter, <strong>0-9 and a-f</strong>, of the 4 letter hex word as the <strong>op</strong> code<br/>\n                    Then the <strong>d</strong> code as the <strong>second</strong> letter<br/>\n                    The <strong>a</strong> code as the <strong>third</strong> letter<br/>\n                    Finally, the <strong>b</strong> code is set as the <strong>fourth</strong> letter<br/>\n                    <br/>\n                    <div className='machine-code-template'>\n                      <pre>\n                        ---------------------<br/>\n                        | op |  d |  a |  b |<br/>\n                        ---------------------\n                      </pre>\n                    </div>\n                  </div>\n                  <InfoArea state={this.state} title={'add'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>add Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Rd := Ra + Rb</li>\n                        {this.flagsSet( 'add', [ 'G', 'g', 'E', 'l', 'L', 'V', 'C' ] )}\n                      </ul>\n\n                      Machine code :<br/>\n                      {this.machineCode( 'add', 'R1,R2,R3', 0 )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'sub'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>sub Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Rd := Ra - Rb</li>\n                        {this.flagsSet( 'sub', [ 'G', 'g', 'E', 'l', 'L', 'v' ] )}\n                      </ul>\n\n                      Machine code :<br/>\n                      {this.machineCode( 'sub', 'R1,R2,R3', 1 )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'mul'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>mul Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Rd := Ra * Rb</li>\n                        {this.flagsSet( 'mul', [ 'G', 'g', 'E', 'l', 'L', 'V' ] )}\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'mul', 'R1,R2,R3', 2 )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'div'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>div Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Rd := Ra / Rb</li>\n                        <li>R15 := Ra % Rb, unless Rd is R15</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'div', 'R1,R2,R3', 3 )}<br/>\n                      <br/>\n                      Note :<br/>\n                      <strong>Floor</strong> division is <strong>always</strong> performed, even on <strong>negative</strong> numbers. i.e -10 / 3 := <strong>-4</strong>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'cmp'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>cmp Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Compares Ra and Rb</li>\n                        {this.flagsSet( 'cmp', [ 'G', 'g', 'E', 'l', 'L' ], false )}\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'cmp', 'R1,R2', 4 )}\n                      <br/>\n                      Note :<br/>\n                      {this.wrongGroupings( 'cmp', 'an RR', 'two register arguments', 'an RRR' )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'cmplt'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>cmplt Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Checks if is Ra {'<'} Rb, using their <strong>signed</strong> values</li>\n                        <li>Rd := 1 <strong>or</strong> 0, based on the result of the comparison</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'cmplt', 'R1,R2,R3', 5 )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'cmpeq'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>cmpeq Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Checks if is Ra == Rb</li>\n                        <li>Rd := 1 <strong>or</strong> 0, based on the result of the comparison</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'cmpeq', 'R1,R2,R3', 6 )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'cmpgt'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>cmpgt Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Checks if is Ra {'>'} Rb, using their <strong>signed</strong> values</li>\n                        <li>Rd := 1 <strong>or</strong> 0, based on the result of the comparison</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'cmpgt', 'R1,R2,R3', 7 )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'inv'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>inv Rd,Ra</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Inverts all the bits of Ra; <strong>the bitwise inverse</strong>, denoted by <strong>~</strong></li>\n                        <li>Rd := ~ Ra</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'inv', 'R1,R2', 8 )}<br/>\n                      <br/>\n                      Note :<br/>\n                      This command has an <strong>alias</strong> of <code>invold</code> so that it is compatible with {this.theOriginalEmulator()}. It is in the <strong>same RR</strong> format and was only added for <strong>backwards compatibility</strong><br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'and'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>and Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Finds all the <strong>bits</strong> that are equal to 1 in <strong>both</strong> Ra <strong>and</strong> Rb; <strong>the bitwise and</strong>, denoted by <strong>&</strong></li>\n                        <li>Rd := Ra & Rb</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'and', 'R1,R2,R3', 9 )}<br/>\n                      <br/>\n                      Note :<br/>\n                      This command has an <strong>alias</strong> of <code>andold</code> so that it is compatible with {this.theOriginalEmulator()}. It is in the <strong>same RRR</strong> format and was only added for <strong>backwards compatibility</strong><br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'or'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>or Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Finds all the <strong>bits</strong> that are equal to 1 in <strong>either</strong> Ra <strong>or</strong> Rb; <strong>the bitwise or</strong>, denoted by <strong>|</strong></li>\n                        <li>Rd := Ra | Rb</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'or', 'R1,R2,R3', 0xa )}<br/>\n                      <br/>\n                      Note :<br/>\n                      This command has an <strong>alias</strong> of <code>orold</code> so that it is compatible with {this.theOriginalEmulator()}. It is in the <strong>same RRR</strong> format and was only added for <strong>backwards compatibility</strong><br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'xor'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>xor Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>Finds all the <strong>bits</strong> that are equal to 1 in <strong>either</strong> Ra <strong>or</strong> Rb, but <strong>not both</strong>; <strong>the bitwise xor</strong>, denoted by <strong>^</strong></li>\n                        <li>Rd := Ra ^ Rb</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'xor', 'R1,R2,R3', 0xb )}<br/>\n                      <br/>\n                      Note :<br/>\n                      This command has an <strong>alias</strong> of <code>xorold</code> so that it is compatible with {this.theOriginalEmulator()}. It is in the <strong>same RRR</strong> format and was only added for <strong>backwards compatibility</strong><br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'trap'} depth={3}>\n                    <div className='info-body white'>\n                      Use :<br/>\n                      <code>trap Rd,Ra,Rb</code><br/>\n                      Effects :<br/>\n                      <ul>\n                        <li>If Rd := 0 :</li>\n                        <ul>\n                          <li>Program execution <strong>terminated</strong>, no matter what</li>\n                          <li>Ra and Rb have <strong>no effect</strong> on this operation but, are expected to be R0</li>\n                          <li>Running a program at full speed <strong>requires</strong> a <code>trap R0,R0,R0</code> command, to prevent the IDE from hanging</li>\n                        </ul>\n                        <li>If Rd := 1 :</li>\n                        <ul>\n                          <li>Rb, <strong>the buffer's size</strong>, number of characters of the input are <strong>read</strong> in</li>\n                          <li>These characters are then <strong>stored</strong> in memory <strong>starting</strong> at Ra, <strong>the buffer address</strong></li>\n                        </ul>\n                        <li>If Rd := 2 :</li>\n                        <ul>\n                          <li>Rb, <strong>the buffer's size</strong>, number of characters <strong>from</strong> the <strong>buffer's start</strong>, Ra are <strong>outputted</strong></li>\n                        </ul>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'trap', 'R1,R2,R3', 0xd )}\n                    </div>\n                  </InfoArea>\n                </InfoArea>\n                <InfoArea state={this.state} title={'RX'} depth={2}>\n                  <div className='info-body white' style={{marginBottom : '7px'}}>\n                    Compiled RX instructions take up two word in memory, or two memory cells/locations<br/>\n                    <br/>\n                    Their compiled states can be broken down into :<br/>\n                    <ul>\n                      <li>op - the <strong>operation code</strong>, like RRR instructions, however, <strong>is always f</strong> for RX instructions</li>\n                      <li>d - has <strong>several uses</strong>, depending on the function being performed</li>\n                      <li>a - the number of the <strong>index register</strong>, <strong>Ra</strong></li>\n                      <li>b - the <strong>secondary operation code</strong>, like the op code for RRR instructions, this specifies which function to perform, based on the passed-in arguments</li>\n                      <li>disp - the <strong>displacement</strong>, the second word of the RX instruction</li>\n                    </ul>\n                    These components make up the machine code words by setting the <strong>first</strong> letter, <strong>0-9 and a-f</strong>, of the <strong>first</strong> 4 letter hex word as the <strong>op</strong> code<br/>\n                    Then the <strong>d</strong> code as the <strong>second</strong> letter<br/>\n                    The <strong>a</strong> code as the <strong>third</strong> letter<br/>\n                    And, the <strong>b</strong> code is set as the <strong>fourth</strong> letter<br/>\n                    <br/>\n                    Next, the second word is set to the <strong>memory value</strong> of the <strong>label</strong> in the <strong>disp</strong> field, or to the <strong>constant</strong> in its place<br/>\n                    <br/>\n                    RX instructions all access memory. They do this through <strong>effective addresses</strong>. Effective addresses are calculated by <strong>adding</strong> the <strong>value of Ra</strong> and the <strong>disp field</strong> before any RX instruction is run. If this addition <strong>exceeds</strong> $ffff, it wraps around to <strong>0</strong>.<br/>\n                    i.e, <strong>effective address := Ra + disp</strong><br/>\n                    <br/>\n                    Note :<br/>\n                    All machine code examples will involve passing in 'test' as the disp argument. 'test' has an <strong>arbitrary</strong> memory <strong>address</strong> of $0010.<br/>\n                    <br/>\n                    <div className='machine-code-template'>\n                      <pre>\n                        ---------------------<br/>\n                        | op |  d |  a |  b |<br/>\n                        ---------------------<br/>\n                        |    displacement   |<br/>\n                        ---------------------\n                      </pre>\n                    </div>\n                  </div>\n                  <InfoArea state={this.state} title={'lea'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>lea Rd,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>Rd := effective address</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'lea', 'R1,test[R2]', 0, 'b' )}<br/>\n                      <br/>\n                      Note :<br/>\n                      <code>lea</code> stands for <strong>load effective address</strong>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'load'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>load Rd,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>Rd := memory[effective address]</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'load', 'R1,test[R2]', 1, 'b' )}<br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'store'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>store Rd,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>memory[effective address] := Rd</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'store', 'R1,test[R2]', 2, 'b' )}<br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'jump'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>jump disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>control[pc] := memory[effective address]</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'jump', 'test[R2]', 3, 'b' )}<br/>\n                      <br/>\n                      Note :<br/>\n                      {this.wrongGroupings( 'jump', 'a JX', 'a disp field and an Ra argument', 'an RX' )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'jumpc0'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>jumpc0 d,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>Gets the value of the <strong>bit</strong> R15.d</li>\n                        <li>If this bit is equal to <strong>0</strong>, control[pc] := memory[effective address]</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'jumpc0', '1,test[R2]', 4, 'b' )}<br/>\n                      <br/>\n                      Note :<br/>\n                      {this.wrongGroupings( 'jumpc0', 'a KX', 'a 4-bit constant ( 0 - 15 ), a disp field, and, an Ra argument', 'an RX' )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'jumpc1'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>jumpc1 d,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul> \n                        <li>Gets the value of the <strong>bit</strong> R15.d</li>\n                        <li>If this bit is equal to <strong>1</strong>, control[pc] := memory[effective address]</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'jumpc1', '1,test[R2]', 5, 'b' )}<br/>\n                      <br/>\n                      Note :<br/>\n                      {this.wrongGroupings( 'jumpc1', 'a KX', 'a 4-bit constant ( 0 - 15 ), a disp field, and, an Ra argument', 'an RX' )}\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'jumpf'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>jumpf Rd,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>If the value of Rd is equal to <strong>0</strong>, control[pc] := memory[effective address]</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'jumpf', 'R1,test[R2]', 6, 'b' )}<br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'jumpt'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>jumpt Rd,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>If the value of Rd is equal to <strong>1</strong>, control[pc] := memory[effective address]</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'jumpt', 'R1,test[R2]', 7, 'b' )}<br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'jal'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>jal Rd,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>Rd := control[pc] <strong>+ 2</strong></li>\n                        <li>control[pc] := memory[effective address]</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'jal', 'R13,test[R2]', 8, 'b' )}<br/>\n                      <br/>\n                      Note :<br/>\n                      <code>jal</code> stands for <strong>jump and link</strong><br/>\n                      <br/>\n                      It is also standard to use R13 as the destination register for <code>jal</code> commands.<br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'testset'} depth={3}>\n                    <div className='info-body white'>\n                      Use:<br/>\n                      <code>testset Rd,disp[Ra]</code><br/>\n                      Effects:<br/>\n                      <ul>\n                        <li>Rd := memory[effective address]</li>\n                        <li>memory[effective address] := 1</li>\n                      </ul>\n                      Machine code :<br/>\n                      {this.machineCode( 'testset', 'R1,test[R2]', 9, 'b' )}<br/>\n                      <br/>\n                      Note :<br/>\n                      <code>testset</code> is not implemented in {this.theOriginalEmulator()}, however, this implementation does fulfil its intended purpose as per the{'\\xa0'/**&nbsp*/}\n                      <a \n                        href='https://jtod.github.io/home/Sigma16/releases/3.1.3/docs/html/userguide/userguide.html' \n                        target='_blank' \n                        rel='noopener noreferrer'>\n                        original documentation\n                      </a>\n                      .\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Conditional jumps'} depth={3}>\n                    <div className='info-body white'>\n                      There are a number of <strong>conditional jumps</strong> that act as <strong>aliases</strong> of the <code>jumpc0</code> and <code>jumpc1</code> commands :<br/>\n                      <br/>\n                      <Table bordered hover size='sm'>\n                        <thead>\n                          <tr>\n                            <th>Command</th>\n                            <th>Jumps to effective address if...</th>\n                            <th>Alias of</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <td><code>jumple disp[Ra]</code></td>\n                            <td>...signed <strong>less than</strong> or <strong>equal to</strong></td>\n                            <td><code>jumpc0 1,disp[Ra]</code></td>\n                          </tr>\n                          <tr>\n                            <td><code>jumplt disp[Ra]</code></td>\n                            <td>...signed <strong>less than</strong></td>\n                            <td><code>jumpc1 3,disp[Ra]</code></td>\n                          </tr>\n\n                          <tr>\n                            <td><code>jumpne disp[Ra]</code></td>\n                            <td>...not <strong>equal to</strong></td>\n                            <td><code>jumpc0 2,disp[Ra]</code></td>\n                          </tr>\n                          <tr>\n                            <td><code>jumpeq disp[Ra]</code></td>\n                            <td>...<strong>equal to</strong></td>\n                            <td><code>jumpc1 2,disp[Ra]</code></td>\n                          </tr>\n\n                          <tr>\n                            <td><code>jumpgt disp[Ra]</code></td>\n                            <td>...signed <strong>greater than</strong></td>\n                            <td><code>jumpc1 1,disp[Ra]</code></td>\n                          </tr>\n                          <tr>\n                            <td><code>jumpge disp[Ra]</code></td>\n                            <td>...signed <strong>greater than</strong> or <strong>equal to</strong></td>\n                            <td><code>jumpc0 3,disp[Ra]</code></td>\n                          </tr>\n\n                          <tr>\n                            <td><code>jumpvu disp[Ra]</code></td>\n                            <td>...<strong>unsigned overflow</strong></td>\n                            <td><code>jumpc1 5,disp[Ra]</code></td>\n                          </tr>\n                          <tr>\n                            <td><code>jumpnvu disp[Ra]</code></td>\n                            <td>...no <strong>unsigned overflow</strong></td>\n                            <td><code>jumpc0 5,disp[Ra]</code></td>\n                          </tr>\n\n                          <tr>\n                            <td><code>jumpv disp[Ra]</code></td>\n                            <td>...<strong>signed overflow</strong></td>\n                            <td><code>jumpc1 6,disp[Ra]</code></td>\n                          </tr>\n                          <tr>\n                            <td><code>jumpnv disp[Ra]</code></td>\n                            <td>...no <strong>signed overflow</strong></td>\n                            <td><code>jumpc0 6,disp[Ra]</code></td>\n                          </tr>\n\n                          <tr>\n                            <td><code>jumpco disp[Ra]</code></td>\n                            <td>...<strong>carry output</strong></td>\n                            <td><code>jumpc1 7,disp[Ra]</code></td>\n                          </tr>\n                          <tr>\n                            <td><code>jumpnco disp[Ra]</code></td>\n                            <td>...no <strong>carry output</strong></td>\n                            <td><code>jumpc0 7,disp[Ra]</code></td>\n                          </tr>\n\n                          <tr>\n                            <td><code>jumpso disp[Ra]</code></td>\n                            <td>...<strong>stack overflow</strong></td>\n                            <td><code>jumpc1 8,disp[Ra]</code></td>\n                          </tr>\n                          <tr>\n                            <td><code>jumpnso disp[Ra]</code></td>\n                            <td>...no <strong>stack overflow</strong></td>\n                            <td><code>jumpc0 8,disp[Ra]</code></td>\n                          </tr>                            \n                        </tbody>\n                      </Table>\n                      Note :<br/>\n                      <code>jumpso</code> and <code>jumpnso</code> are not a part of {this.theOriginalEmulator()} as the associated flags in R15 are not implemented either.\n                    </div>\n                  </InfoArea>\n                </InfoArea>\n                <InfoArea state={this.state} title={'EXP'} depth={2}>\n                  <div className='info-body white' style={{marginBottom : '7px'}}>\n                    The compiled states of EXP commands differ between each <strong>sub-type</strong> : <strong>EXP0</strong>, <strong>EXP4</strong>, or, <strong>EXP8</strong>. However, the element that <strong>does not differ</strong> between different sub-types is the <strong>op code</strong> which is <strong>always e</strong><br/>\n                    <br/>\n                    Note :<br/>\n                    <strong>EXP</strong> stands for both <strong>EXPanded</strong> and <strong>EXPerimental</strong> :<br/>\n                    <strong>Expanded</strong> since the <strong>secondary operation code</strong>, <strong>ab</strong>, allows for up to <strong>256</strong> different <strong>functions</strong> to be performed on the arguments<br/>\n                    <strong>Experimental</strong> since <q>it allows for experimental instructions for research purposes</q>, from {this.theOriginalEmulator()}.\n                  </div>\n                  <InfoArea state={this.state} title={'EXP0'} depth={3}>\n                    <div className='info-body white'>\n                      Compiled <strong>EXP0</strong> instructions take up <strong>one</strong> word in memory, or one memory cell/location<br/>\n                      <br/>\n                      EXP0 commands' compiled states can be broken down into :<br/>\n                      <ul>\n                        <li>op - the <strong>operation code</strong>, <strong>is always e</strong> for EXP commands</li>\n                        <li>d - has <strong>no uses</strong> in <strong>any</strong> of the implemented EXP0 commands, <strong>will be ignored</strong></li>\n                        <li>ab - the <strong>secondary operation code</strong>, like the op code for RRR instructions, this specifies which function to perform, based on the passed-in arguments. This field also takes up <strong>two hex numbers</strong>, i.e <strong>8-bits</strong>. This allows for <strong>256</strong> different EXP commands to be implemented</li>\n                      </ul>\n                      These components make up a machine code word by setting the <strong>first</strong> letter, <strong>0-9 and a-f</strong>, of the 4 letter hex word as the <strong>op</strong> code<br/>\n                      Then the <strong>d</strong> code as the <strong>second</strong> letter<br/>\n                      And finally, the <strong>ab</strong> code is set as the <strong>third and fourth</strong> letters<br/>\n                      <br/>\n                      <div className='machine-code-template'>\n                        <pre>\n                          ---------------------<br/>\n                          | op |  d |    ab   |<br/>\n                          ---------------------\n                        </pre>\n                      </div>\n                      Note :<br/>\n                      EXP0 commands are named so as they are <strong>EXP</strong> commands that have an <strong>argument constant field length</strong> of <strong>0</strong>, since they have <strong>no</strong> argument constants, i.e no <strong>g</strong> or <strong>h</strong> field.\n                    </div>\n                    <InfoArea state={this.state} title={'rfi'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>rfi</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>None</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'rfi', '', 0, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        Currently a nop, <strong>no operation</strong>, as the required <strong>control registers</strong> from {this.theOriginalEmulator()} have been chosen to not be implemented.<br/>\n                        <br/>\n                        {this.expParsedAs( 'rfi', 'no arguments', 'noEXP' )}. So, <strong>even when given</strong> arguments, i.e <code>rfi R1,R2,R3</code>, the resultant machine code will still be parsed as <code>$e000</code>\n                      </div>\n                    </InfoArea>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'EXP4'} depth={3}>\n                    <div className='info-body white'>\n                      Compiled <strong>EXP4</strong> instructions take up <strong>two</strong> words in memory, or two memory cells/locations<br/>\n                      <br/>\n                      EXP4 commands' compiled states can be broken down into :<br/>\n                      <ul>\n                        <li>op - the <strong>operation code</strong>, <strong>is always e</strong> for EXP commands</li>\n                        <li>d - the number of <strong>a register</strong> which has <strong>several uses</strong> depending on which function is being performed, however, is <strong>mostly</strong> treated as a <strong>destination</strong> register</li>\n                        <li>ab - the <strong>secondary operation code</strong>, like the op code for RRR instructions, this specifies which function to perform, based on the passed-in arguments. This field also takes up <strong>two hex numbers</strong>, i.e <strong>8-bits</strong>. This allows for <strong>256</strong> different EXP commands to be implemented</li>\n                        <li>e - the number of the <strong>first argument register</strong></li>\n                        <li>f - the number of the <strong>second argument register</strong></li>\n                        <li>g - the first <strong>4-bit</strong> argument <strong>constant</strong></li>\n                        <li>h - the second <strong>4-bit</strong> argument <strong>constant</strong></li>\n                      </ul>\n                      These components make up the machine code words by setting the <strong>first</strong> letter, <strong>0-9 and a-f</strong>, of the first 4 letter hex word as the <strong>op</strong> code<br/>\n                      Then the <strong>d</strong> code as the <strong>second</strong> letter<br/>\n                      And, the <strong>ab</strong> code is set as the <strong>third and fourth</strong> letters of the first word<br/>\n                      For the <strong>second</strong> word, the <strong>first</strong> to <strong>fourth</strong> letters of the hex word are set as the <strong>e field</strong> to the <strong>h field</strong> respectively<br/>\n                      <br/>\n                      <div className='machine-code-template'>\n                        <pre>\n                          ---------------------<br/>\n                          | op |  d |    ab   |<br/>\n                          ---------------------<br/>\n                          |  e |  f |  g |  h |<br/>\n                          ---------------------\n                        </pre>\n                      </div>\n                      Note :<br/>\n                      EXP4 commands are named so as they are <strong>EXP</strong> commands that have an <strong>argument constant field length</strong> of <strong>4</strong>, since they have <strong>two</strong> argument constants, both <strong>4</strong>-bits long\n                    </div>\n                    <InfoArea state={this.state} title={'getctl'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>getctl Rd,cR</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Rd := control[cR], where cR is a control register; <strong>pc</strong>, <strong>ir</strong>, or, <strong>adr</strong></li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'getctl', 'R1,pc', 0xa, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not fully implemented</strong> like {this.theOriginalEmulator()} as many control registers are not the same. This may make the command perform unpredictably between this emulator and {this.theOriginalEmulator()}<br/>\n                        <br/>\n                        The <strong>control register</strong> argument is parsed such that the <strong>g field</strong> will be set as a corresponding constant; <strong>pc</strong> := <strong>1</strong>, <strong>ir</strong> := <strong>2</strong>, <strong>adr</strong> := <strong>3</strong><br/>\n                        <br/>\n                        {this.expParsedAs( 'getctl', 'a register and a control register', 'rcEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'putctl'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>putctl Rd,cR</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Rd := control[cR], where cR is a control register; <strong>pc</strong>, <strong>ir</strong>, or, <strong>adr</strong></li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'putctl', 'R1,pc', 0xb, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not fully implemented</strong> like {this.theOriginalEmulator()} as many control registers are not the same. This may make the command perform unpredictably between this emulator and {this.theOriginalEmulator()}<br/>\n                        <br/>\n                        The <strong>control register</strong> argument is parsed such that the <strong>g field</strong> will be set as a corresponding constant; <strong>pc</strong> := <strong>1</strong>, <strong>ir</strong> := <strong>2</strong>, <strong>adr</strong> := <strong>3</strong><br/>\n                        <br/>\n                        {this.expParsedAs( 'putctl', 'a register and a control register', 'rcEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'execute'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>execute Re,Rf</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Runs the machine code present in Re and Rf</li>\n                          <li>Will terminate program execution if the passed-in values of Re and Rf are infinitely recursive</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'execute', 'R1,R2', 0xc, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        If the command <strong>represented</strong> by the machine code in Re is an <strong>RRR</strong> or an <strong>EXP0</strong> command, i.e <strong>one word</strong>, then Rf is ignored<br/>\n                        <br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} so edge cases such as infinite recursion have been handled as seen appropriate. The command does assemble however, not as per {this.theOriginalEmulator()}'s documentation, and it has no functionality<br/>\n                        <br/>\n                        {this.expParsedAs( 'execute', 'two registers', 'rrEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'push'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>push Rd,Re,Rf</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Pushes to the defined stack, or more precisely :</li>\n                          <li>If Re, the <strong>stack top</strong>, is <strong>less than</strong> Rf, the <strong>stack bottom</strong>, i.e the <strong>stack</strong> is <strong>not full</strong>, then :</li>\n                          <ul>\n                            <li>Re := Re + 1</li>\n                            <li>memory[Re] := Rd</li>\n                          </ul>\n                          <li>else :</li>\n                          <ul>\n                            {this.flagsSet( 'push', [ 'S' ], false )}\n                          </ul>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'push', 'R1,R2,R3', 0xd, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} as even though it parses, it does not have <strong>any functionality</strong><br/>\n                        <br/>\n                        {this.expParsedAs( 'push', 'three registers', 'rrrEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'pop'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>pop Rd,Re,Rf</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Pops the defined stack, or more precisely :</li>\n                          <li>If Re, the <strong>stack top</strong>, is <strong>less then</strong> or <strong>equal to</strong> Rf, the <strong>stack bottom</strong>, i.e the <strong>stack</strong> is <strong>defined properly</strong> and is <strong>either full</strong> or <strong>not</strong>, then :</li>\n                          <ul>\n                            <li>Rd := memory[Re]</li>\n                            <li>Re := Re - 1</li>\n                          </ul>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'pop', 'R1,R2,R3', 0xe, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} as even though it parses, it does not have <strong>any functionality</strong><br/>\n                        <br/>\n                        {this.expParsedAs( 'pop', 'three registers', 'rrrEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'top'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>top Rd,Re,Rf</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Rd := memory[Re], i.e loads the stack top without popping the stack</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'top', 'R1,R2,R3', 0xf, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} as even though it parses, it does not have <strong>any functionality</strong><br/>\n                        <br/>\n                        {this.expParsedAs( 'top', 'three registers', 'rrrEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'addc'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>addc Rd,Re,Rf</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Adds</strong> Re and Rf along with the <strong>carry</strong> output <strong>bit</strong> in R15</li>\n                          <li>Rd := Re + Rf + R15.7</li>\n                          {this.flagsSet( 'addc', [ 'G', 'g', 'E', 'l', 'L', 'V', 'C' ] )}\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'addc', 'R1,R2,R3', 0xf, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} at all and <strong>will</strong> cause an assembler error<br/>\n                        <br/>\n                        {this.expParsedAs( 'addc', 'three registers', 'rrrEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'shiftl'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>shiftl Rd,Re,g</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Bit shifts</strong> Re, g number of bits <strong>left</strong></li>\n                          {this.flagsSet( 'shiftl', [ 'V' ], false )}\n                          <li>Rd := Re {'<<'} g</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'shiftl', 'R1,R2,3', 0x10, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        {this.expParsedAs( 'shiftl', 'two registers and a constant', 'rrkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'shiftr'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>shiftr Rd,Re,g</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Bit shifts</strong> Re, g number of bits <strong>right</strong>, adding padding <strong>0</strong>s to the <strong>start</strong> of the result to keep it <strong>16-bits long</strong></li>\n                          {this.flagsSet( 'shiftr', [ 'V' ], false )}\n                          <li>Rd := Re {'>>'} g</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'shiftr', 'R1,R2,3', 0x11, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        {this.expParsedAs( 'shiftr', 'two registers and a constant', 'rrkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'getbit'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>getbit Rd,g</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Updates</strong> the <strong>g</strong>th bit of Rd to the <strong>g</strong>th of R15</li>\n                          <li>Rd.g := R15.g</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'getbit', 'R1,2', 0x18, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} at all and <strong>will</strong> cause an assembler error<br/>\n                        <br/>\n                        {this.expParsedAs( 'getbit', 'a register and a constant', 'rkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'getbiti'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>getbiti Rd,g</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Updates</strong> the <strong>g</strong>th bit of Rd to the <strong>inverted g</strong>th of R15</li>\n                          <li>Rd.g := ~ R15.g</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'getbiti', 'R1,2', 0x19, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} at all and <strong>will</strong> cause an assembler error<br/>\n                        <br/>\n                        {this.expParsedAs( 'getbiti', 'a register and a constant', 'rkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'putbit'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>putbit Rd,g</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Updates</strong> the <strong>g</strong>th bit of R15 to the <strong>g</strong>th of Rd</li>\n                          <li>R15.g := Rd.g</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'putbit', 'R1,2', 0x1a, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} at all and <strong>will</strong> cause an assembler error<br/>\n                        <br/>\n                        {this.expParsedAs( 'putbit', 'a register and a constant', 'rkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'putbiti'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>putbiti Rd,g</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Updates</strong> the <strong>g</strong>th bit of R15 to the <strong>inverted g</strong>th of Rd</li>\n                          <li>R15.g := Rd.g</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'putbiti', 'R1,2', 0x1b, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()} at all and <strong>will</strong> cause an assembler error<br/>\n                        <br/>\n                        {this.expParsedAs( 'putbiti', 'a register and a constant', 'rkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'extract'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>extract Rd,Re,g,h</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Finds the bits in Re <strong>from</strong> g <strong>to</strong> h, and sets Rd to the <strong>value</strong> of these bits. This can be performed with <strong>two bit shifts</strong> :</li>\n                          <ul>\n                            <li>Rd := Re {'<<'} g</li>\n                            <li>Rd := Rd {'>>'} 15 - h + g</li>\n                          </ul>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'extract', 'R1,R2,3,4', 0x12, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        {this.expParsedAs( 'extract', 'two registers and two constants', 'rrkkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'extracti'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>extracti Rd,Re,g,h</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Inverts</strong> Re and <strong>then</strong>, finds the bits <strong>from</strong> g <strong>to</strong> h, and sets Rd to the <strong>value</strong> of these inverted bits. This can be performed with <strong>one inversion</strong> and <strong>two bit shifts</strong> :</li>\n                          <ul>\n                            <li>Rd := ~ Re </li>\n                            <li>Rd := Rd {'<<'} g</li>\n                            <li>Rd := Rd {'>>'} 15 - h + g</li>\n                          </ul>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'extracti', 'R1,R2,3,4', 0x13, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        {this.expParsedAs( 'extracti', 'two registers and two constants', 'rrkkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'inject'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>inject Rd,Re,Rf,g,h</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Sets the bits <strong>from</strong> g <strong>to</strong> h <strong>in</strong> Rf to the <strong>same</strong> bits in Re and <strong>sets</strong> the result into Rd</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'inject', 'R1,R2,R3,4,5', 0x14, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        {this.expParsedAs( 'inject', 'three registers and two constants', 'rrrkkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'injecti'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>injecti Rd,Re,Rf,g,h</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li><strong>Inverts</strong> Rf's bits</li>\n                          <li>Sets these <strong>inverted</strong> bits <strong>from</strong> g <strong>to</strong> h <strong>in</strong> Rf to the <strong>same</strong> bits in Re and <strong>sets</strong> the result into Rd</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'injecti', 'R1,R2,R3,4,5', 0x15, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        {this.expParsedAs( 'injecti', 'three registers and two constants', 'rrrkkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'field'} depth={4}>\n                      <div className='info-body white'>\n                        <code>field</code> is an <strong>alias</strong> for the <code>injecti</code> command.<br/>\n                        It allows a range of bits to be set, from <strong>g</strong> to <strong>h</strong>, as <strong>1</strong>, creating a <strong>field</strong> of bits, hence the name<br/>\n                        <br/>\n                        Use :<br/>\n                        <code>field Rd,g,h</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Sets a <strong>field</strong> of bits from <strong>g</strong> to <strong>h</strong> into Rd</li>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'field', 'R1,2,3', 0x15, 'ab' )}<br/>\n                        The same <strong>op code</strong> as <code>injecti</code> as that is what its an <strong>alias</strong> of<br/>\n                        Note how the <strong>f field</strong> is <strong>0</strong> as that is the what is being <strong>injected from</strong>, <strong>R0</strong><br/>\n                        <br/>\n                        Note :<br/>\n                        This command is also <strong>not implemented</strong> in {this.theOriginalEmulator()}. It <strong>will not cause</strong> an assembler <strong>error</strong>, however, it <strong>will not compile</strong> with machine code translations and therefore <strong>not work</strong> as a command<br/>\n                        <br/>\n                        Since <code>field</code> is an <strong>alias</strong> of <code>injecti</code>, it is parsed as an <strong>injectIAlias</strong> command, similar to an <strong>rkkEXP</strong> command, but specifically for <code>injecti</code> aliases<br/>\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'logicw'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>logicw Rd,Re,Rf,g</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Depending on the <strong>value</strong> of the constant <strong>g</strong>, different <strong>logic operations</strong> get performed on the <strong>argument registers</strong>, setting the result into <strong>Rd</strong> :</li>\n                          <li>g := <strong>1</strong> :</li>\n                            <ul>\n                              <li>Bitwise and</li>\n                              <li>Rd := Re & Rf</li>\n                            </ul>\n                          <li>g := <strong>6</strong> :</li>\n                            <ul>\n                              <li>Bitwise exclusive or</li>\n                              <li>Rd := Re ^ Rf</li>\n                            </ul>\n                          <li>g := <strong>7</strong> :</li>\n                            <ul>\n                              <li>Bitwise or</li>\n                              <li>Rd := Re | Rf</li>\n                            </ul>\n                          <li>g := <strong>$c</strong> :</li>\n                            <ul>\n                              <li>Bitwise inverse</li>\n                              <li>Rd := ~ Re</li>\n                            </ul>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'logicw', 'R1,R2,R3,4', 0x16, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        {this.expParsedAs( 'logicw', 'three registers and a constant', 'rrrkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'logicb'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>logicb Rd,Re,Rf,g,h</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>Depending on the <strong>value</strong> of the constant <strong>g</strong>, different <strong>logic operations</strong> get performed on the <strong>argument registers h</strong>th bit, setting the result into <strong>Rd</strong>'s <strong>h</strong>th bit :</li>\n                          <li>g := <strong>1</strong> :</li>\n                            <ul>\n                              <li>Bit and</li>\n                              <li>Rd.h := Re.h & Rf.h</li>\n                            </ul>\n                          <li>g := <strong>6</strong> :</li>\n                            <ul>\n                              <li>Bit exclusive or</li>\n                              <li>Rd.h := Re.h ^ Rf.h</li>\n                            </ul>\n                          <li>g := <strong>7</strong> :</li>\n                            <ul>\n                              <li>Bit or</li>\n                              <li>Rd.h := Re.h | Rf.h</li>\n                            </ul>\n                          <li>g := <strong>$c</strong> :</li>\n                            <ul>\n                              <li>Bit inverse</li>\n                              <li>Rd.h := ~ Re.h</li>\n                            </ul>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'logicb', 'R1,R2,R3,4,5', 0x17, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        {this.expParsedAs( 'logicb', 'three registers and two constants', 'rrrkkEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'Logic aliases'} depth={4}>\n                      <div className='info-body white'>\n                        There are a number of <strong>aliases</strong> of the <code>logicw</code> and <code>logicb</code> commands :<br/>\n                        <br/>\n                        <Table bordered hover size='sm'>\n                          <thead>\n                            <tr>\n                              <th>Command</th>\n                              <th>Meaning</th>\n                              <th>Alias of</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <tr>\n                              <td><code>invnew Rd,Re</code></td>\n                              <td>Rd := <strong>~</strong> Re</td>\n                              <td><code>logicw Rd,Re,R0,$c</code></td>\n                            </tr>\n                            <tr>\n                              <td><code>andnew R1,Re,Rf</code></td>\n                              <td>Rd := Re <strong>&</strong> Rf</td>\n                              <td><code>logicw Rd,Re,Rf,1</code></td>\n                            </tr>\n                            <tr>\n                              <td><code>ornew Rd,Re,Rf</code></td>\n                              <td>Rd := Re <strong>|</strong> Rf</td>\n                              <td><code>logicw Rd,Re,Rf,7</code></td>\n                            </tr>\n                            <tr>\n                              <td><code>xornew Rd,Re,Rf</code></td>\n                              <td>Rd := Re <strong>^</strong> Rf</td>\n                              <td><code>logicw Rd,Re,Rf,6</code></td>\n                            </tr>\n\n                            <tr>\n                              <td><code>invb Rd,Re,h</code></td>\n                              <td>Rd<strong>.h</strong> := <strong>~</strong> Re<strong>.h</strong></td>\n                              <td><code>logicb Rd,Re,R0,$c,h</code></td>\n                            </tr>\n                            <tr>\n                              <td><code>andb Rd,Re,Rf,h</code></td>\n                              <td>Rd<strong>.h</strong> := Re<strong>.h &</strong> Rf<strong>.h</strong></td>\n                              <td><code>logicb Rd,Re,Rf,1,h</code></td>\n                            </tr>\n                            <tr>\n                              <td><code>orb Rd,Re,Rf,h</code></td>\n                              <td>Rd<strong>.h</strong> := Re<strong>.h |</strong> Rf<strong>.h</strong></td>\n                              <td><code>logicb Rd,Re,Rf,7,h</code></td>\n                            </tr>\n                            <tr>\n                              <td><code>xorb Rd,Re,Rf,h</code></td>\n                              <td>Rd<strong>.h</strong> := Re<strong>.h ^</strong> Rf<strong>.h</strong></td>\n                              <td><code>logicb Rd,Re,Rf,6,h</code></td>\n                            </tr>\n                          </tbody>\n                        </Table>\n                        Note :<br/>\n                        <code>invnew</code>, <code>andnew</code>, <code>ornew</code>, and, <code>xornew</code> are <strong>no longer</strong> a part of {this.theOriginalEmulator()}, however, the <strong>same functionality</strong> can be had with <strong>replacing</strong> them with their <strong>non-new</strong> variants, i.e <code>andnew</code> becomes <code>and</code>\n                      </div>\n                    </InfoArea>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'EXP8'} depth={3}>\n                    <div className='info-body white'>\n                      Compiled <strong>EXP8</strong> instructions take up <strong>two</strong> words in memory, or two memory cells/locations<br/>\n                      <br/>\n                      EXP8 commands' compiled states can be broken down into :<br/>\n                      <ul>\n                        <li>op - the <strong>operation code</strong>, <strong>is always e</strong> for EXP commands</li>\n                        <li>d - the number of <strong>a register</strong> which has <strong>several uses</strong> depending on which function is being performed, however, is <strong>mostly</strong> treated as a <strong>destination</strong> register</li>\n                        <li>ab - the <strong>secondary operation code</strong>, like the op code for RRR instructions, this specifies which function to perform, based on the passed-in arguments. This field also takes up <strong>two hex numbers</strong>, i.e <strong>8-bits</strong>. This allows for <strong>256</strong> different EXP commands to be implemented</li>\n                        <li>e - the number of the <strong>first argument register</strong></li>\n                        <li>f - the number of the <strong>second argument register</strong></li>\n                        <li>gh - the <strong>8-bit</strong> argument <strong>constant</strong></li>\n                      </ul>\n                      These components make up the machine code words by setting the <strong>first</strong> letter, <strong>0-9 and a-f</strong>, of the first 4 letter hex word as the <strong>op</strong> code<br/>\n                      Then the <strong>d</strong> code as the <strong>second</strong> letter<br/>\n                      And, the <strong>ab</strong> code is set as the <strong>third and fourth</strong> letters of the first word<br/>\n                      For the <strong>second</strong> word, the <strong>first</strong> and <strong>second</strong> letters of the hex word are set as the <strong>e field</strong> and the <strong>f field</strong> respectively<br/>\n                      Then lastly, the <strong>third and fourth</strong> letters are set as the <strong>gh field</strong> to complete the second word<br/>\n                      <br/>\n                      <div className='machine-code-template'>\n                        <pre>\n                          ---------------------<br/>\n                          | op |  d |    ab   |<br/>\n                          ---------------------<br/>\n                          |  e |  f |    gh   |<br/>\n                          ---------------------\n                        </pre>\n                      </div>\n                      Note :<br/>\n                      EXP8 commands are named so as they are <strong>EXP</strong> commands that have an <strong>argument constant field length</strong> of <strong>8</strong>, since they have <strong>one</strong> argument constant which is <strong>8</strong>-bits long\n                    </div>\n                    <InfoArea state={this.state} title={'save'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>save Re,Rf,disp[Rd]</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>For each register between and including Re and Rf :</li>\n                            <ul>\n                              <li>memory[disp + Rd + iteration] := R(e + iteration)</li>\n                            </ul>\n                          <li>i.e, <code>save R1,R4,10[Rd]</code> is equivalent to :</li>\n                          <ul>\n                            <li><code>store R1,10[Rd]</code></li>\n                            <li><code>store R2,11[Rd]</code></li>\n                            <li><code>store R3,12[Rd]</code></li>\n                            <li><code>store R4,13[Rd]</code></li>\n                          </ul>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'save', 'R1,R2,3[R4]', 0x8, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        the <strong>disp</strong> field takes a constant value from <strong>0</strong> to <strong>255</strong><br/>\n                        <br/>\n                        If <strong>Re</strong> is <strong>greater than Rf</strong>, then the registers are <strong>iterated</strong> through normally, <strong>wraps around</strong> to <strong>R0</strong> after reaching <strong>R15</strong><br/>\n                        <br/>\n                        {this.expParsedAs( 'save', 'two registers, a disp field, and, an index register', 'rrxEXP' )}\n                      </div>\n                    </InfoArea>\n                    <InfoArea state={this.state} title={'restore'} depth={4}>\n                      <div className='info-body white'>\n                        Use :<br/>\n                        <code>restore Re,Rf,disp[Rd]</code><br/>\n                        Effects :<br/>\n                        <ul>\n                          <li>For each register between and including Re and Rf :</li>\n                            <ul>\n                              <li>R(e + iteration) := memory[disp + Rd + iteration]</li>\n                            </ul>\n                          <li>i.e, <code>restore R1,R4,10[Rd]</code> is equivalent to :</li>\n                          <ul>\n                            <li><code>load R1,10[Rd]</code></li>\n                            <li><code>load R2,11[Rd]</code></li>\n                            <li><code>load R3,12[Rd]</code></li>\n                            <li><code>load R4,13[Rd]</code></li>\n                          </ul>\n                        </ul>\n\n                        Machine code :<br/>\n                        {this.machineCode( 'restore', 'R1,R2,3[R4]', 0x9, 'ab' )}<br/>\n                        <br/>\n                        Note :<br/>\n                        the <strong>disp</strong> field takes a constant value from <strong>0</strong> to <strong>255</strong><br/>\n                        <br/>\n                        If <strong>Re</strong> is <strong>greater than Rf</strong>, then the registers are <strong>iterated</strong> through normally, <strong>wraps around</strong> to <strong>R0</strong> after reaching <strong>R15</strong><br/>\n                        <br/>\n                        {this.expParsedAs( 'restore', 'two registers, a disp field, and, an index register', 'rrxEXP' )}\n                      </div>\n                    </InfoArea>\n                  </InfoArea>\n                </InfoArea>\n                <InfoArea state={this.state} title={'All instructions'} depth={2}>\n                  <div className='info-body white'>\n                    <Table bordered hover size='sm'>\n                      <thead>\n                        <tr>\n                          <th>Command</th>\n                          <th>Summary of function</th>\n                          <th>Example and Machine Code</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.summaryTableRow( 'data', 'Memory cell of line := constant', 'data $001f' )}\n                        {this.summaryTableRow( 'add', 'Rd := Ra + Rb; R15 flags set', 'add R1,R2,R3' )}\n                        {this.summaryTableRow( 'sub', 'Rd := Ra - Rb; R15 flags set', 'sub R1,R2,R3' )}\n                        {this.summaryTableRow( 'mul', 'Rd := Ra * Rb; R15 flags set', 'mul R1,R2,R3' )}\n                        {this.summaryTableRow( 'div', 'Rd := Ra / Rb; R15 := Ra % Rb', 'div R1,R2,R3' )}\n                        {this.summaryTableRow( 'cmp', 'R15 flags set', 'cmp R1,R2' )}\n                        {this.summaryTableRow( 'cmplt', 'Rd := Ra < Rb', 'cmplt R1,R2,R3' )}\n                        {this.summaryTableRow( 'cmpeq', 'Rd := Ra == Rb', 'cmpeq R1,R2,R3' )}\n                        {this.summaryTableRow( 'cmpgt', 'Rd := Ra > Rb', 'cmpgt R1,R2,R3' )}\n                        {this.summaryTableRow( 'inv', 'Rd := ~ Ra', 'inv R1,R2' )}\n                        {this.summaryTableRow( 'invold', 'Rd := ~ Ra', 'invold R1,R2' )}\n                        {this.summaryTableRow( 'and', 'Rd := Ra & Rb', 'and R1,R2,R3' )}\n                        {this.summaryTableRow( 'andold', 'Rd := Ra & Rb', 'andold R1,R2,R3' )}\n                        {this.summaryTableRow( 'or', 'Rd := Ra | Rb', 'or R1,R2,R3' )}\n                        {this.summaryTableRow( 'orold', 'Rd := Ra | Rb', 'orold R1,R2,R3' )}\n                        {this.summaryTableRow( 'xor', 'Rd := Ra ^ Rb', 'xor R1,R2,R3' )}\n                        {this.summaryTableRow( 'xorold', 'Rd := Ra ^ Rb', 'xorold R1,R2,R3' )}\n                        {this.summaryTableRow( 'trap', 'Terminates, reads in, or, writes out', 'trap R1,R2,R3' )}\n\n                        {this.summaryTableRow( 'rfi', 'nop', 'rfi' )}\n                        {this.summaryTableRow( 'save', 'Stores registers Re -> Rf in memory[disp + Rd + iteration]', 'save R1,R2,3[R4]' )}\n                        {this.summaryTableRow( 'restore', 'Loads registers Re -> Rf with memory[disp + Rd + iteration]', 'restore R1,R2,3[R4]' )}\n                        {this.summaryTableRow( 'getctl', 'Rd := control[cR]', 'getctl R1,pc' )}\n                        {this.summaryTableRow( 'putctl', 'control[cR] := Rd', 'putctl R1,pc' )}\n                        {this.summaryTableRow( 'execute', 'Executes Re and Rf as machine code', 'execute R1,R2' )}\n                        {this.summaryTableRow( 'push', 'Pushes to defined stack; R15 flags set', 'push R1,R2,R3' )}\n                        {this.summaryTableRow( 'pop', 'Pops from defined stack', 'pop R1,R2,R3' )}\n                        {this.summaryTableRow( 'top', 'Peeks at top of defined stack', 'top R1,R2,R3' )}\n                        {this.summaryTableRow( 'shiftl', 'Rd := Re << g', 'shiftl R1,R2,3' )}\n                        {this.summaryTableRow( 'shiftr', 'Rd := Re >> g', 'shiftr R1,R2,3' )}\n                        {this.summaryTableRow( 'extract', 'Rd := Re >> g; Rd := Rd << 15 - h + g', 'extract R1,R2,3,4' )}\n                        {this.summaryTableRow( 'extracti', 'Rd := ~ Re; Rd := Rd >> g; Rd := Rd << 15 - h + g', 'extracti R1,R2,3,4' )}\n                        {this.summaryTableRow( 'inject', 'Rd := Re injected with bits g -> h from Rf', 'inject R1,R2,R3,4,5' )}\n                        {this.summaryTableRow( 'injecti', 'Rd := Re injected with inverted bits g -> h from Rf', 'injecti R1,R2,R3,4,5' )}\n                        {this.summaryTableRow( 'field', 'Rd.g -> Rd.h := 1', 'field R1,2,3' )}\n                        {this.summaryTableRow( 'logicw', 'Bit-wise logic operation performed on Re and Rf based on g', 'logicw R1,R2,R3,4' )}\n                        {this.summaryTableRow( 'invnew', 'Rd := ~ Re', 'invnew R1,R2' )}\n                        {this.summaryTableRow( 'andnew', 'Rd := Re & Rf', 'andnew R1,R2,R3' )}\n                        {this.summaryTableRow( 'ornew', 'Rd := Re | Rf', 'ornew R1,R2,R3' )}\n                        {this.summaryTableRow( 'xornew', 'Rd := Re ^ Rf', 'xornew R1,R2,R3' )}\n                        {this.summaryTableRow( 'logicb', 'Bit logic operation performed on Re.h and Rf.h based on g', 'logicb R1,R2,R3,4,5' )}\n                        {this.summaryTableRow( 'invb', 'Rd.h := ~ Re.h', 'invb R1,R2,3' )}\n                        {this.summaryTableRow( 'andb', 'Rd.h := Re.h & Rf.h', 'andb R1,R2,R3,4' )}\n                        {this.summaryTableRow( 'orb', 'Rd.h := Re.h | Rf.h', 'orb R1,R2,R3,4' )}\n                        {this.summaryTableRow( 'xorb', 'Rd.h := Re.h ^ Rf.h', 'xorb R1,R2,R3,4' )}\n                        {this.summaryTableRow( 'getbit', 'Rd.g := R15.g', 'getbit R1,2' )}\n                        {this.summaryTableRow( 'getbiti', 'Rd.g := ~ R15.g', 'getbiti R1,2' )}\n                        {this.summaryTableRow( 'putbit', 'R15.g := Rd.g', 'putbit R1,2' )}\n                        {this.summaryTableRow( 'putbiti', 'R15.g := ~ Rd.g', 'putbiti R1,2' )}\n                        {this.summaryTableRow( 'addc', 'Rd := Re + Rf + R15.7; R15 flags set', 'addc R1,R2,R3' )}\n\n                        {this.summaryTableRow( 'lea', 'Rd := disp + Ra', 'lea R1,test[R3]' )}\n                        {this.summaryTableRow( 'load', 'Rd := memory[disp + Ra]', 'load R1,test[R3]' )}\n                        {this.summaryTableRow( 'store', 'memory[disp + Ra] := Rd', 'store R1,test[R3]' )}\n                        {this.summaryTableRow( 'jump', 'control[pc] := disp + Ra', 'jump test[R1]' )}\n                        {this.summaryTableRow( 'jumpc0', 'If R15.d := 0, control[pc] := disp + Ra', 'jumpc0 1,test[R2]' )}\n                        {this.summaryTableRow( 'jumple', 'If R15.1 := 0, control[pc] := disp + Ra', 'jumple test[R1]' )}\n                        {this.summaryTableRow( 'jumpne', 'If R15.2 := 0, control[pc] := disp + Ra', 'jumpne test[R1]' )}\n                        {this.summaryTableRow( 'jumpge', 'If R15.3 := 0, control[pc] := disp + Ra', 'jumpge test[R1]' )}\n                        {this.summaryTableRow( 'jumpnvu', 'If R15.5 := 0, control[pc] := disp + Ra', 'jumpnvu test[R1]' )}\n                        {this.summaryTableRow( 'jumpnv', 'If R15.6 := 0, control[pc] := disp + Ra', 'jumpnv test[R1]' )}\n                        {this.summaryTableRow( 'jumpnco', 'If R15.7 := 0, control[pc] := disp + Ra', 'jumpnco test[R1]' )}\n                        {this.summaryTableRow( 'jumpnso', 'If R15.8 := 0, control[pc] := disp + Ra', 'jumpnso test[R1]' )}\n                        {this.summaryTableRow( 'jumpc1', 'If R15.d := 1, control[pc] := disp + Ra', 'jumpc1 1,test[R2]' )}\n                        {this.summaryTableRow( 'jumpgt', 'If R15.1 := 1, control[pc] := disp + Ra', 'jumpgt test[R1]' )}\n                        {this.summaryTableRow( 'jumpeq', 'If R15.2 := 1, control[pc] := disp + Ra', 'jumpeq test[R1]' )}\n                        {this.summaryTableRow( 'jumplt', 'If R15.3 := 1, control[pc] := disp + Ra', 'jumplt test[R1]' )}\n                        {this.summaryTableRow( 'jumpvu', 'If R15.5 := 1, control[pc] := disp + Ra', 'jumpvu test[R1]' )}\n                        {this.summaryTableRow( 'jumpv', 'If R15.6 := 1, control[pc] := disp + Ra', 'jumpv test[R1]' )}\n                        {this.summaryTableRow( 'jumpco', 'If R15.7 := 1, control[pc] := disp + Ra', 'jumpco test[R1]' )}\n                        {this.summaryTableRow( 'jumpso', 'If R15.8 := 1, control[pc] := disp + Ra', 'jumpso test[R1]' )}\n                        {this.summaryTableRow( 'jumpf', 'If Rd := 0, control[pc] := disp + Ra', 'jumpf R1,test[R2]' )}\n                        {this.summaryTableRow( 'jumpt', 'If Rd := 1, control[pc] := disp + Ra', 'jumpt R1,test[R2]' )}\n                        {this.summaryTableRow( 'jal', 'Rd := control[pc] + 2; control[pc] := disp + Ra', 'jal R1,test[R2]' )}\n                        {this.summaryTableRow( 'testset', 'Rd := memory[disp + Ra]; memory[disp + Ra] := 1', 'testset R1,test[R2]' )}\n                      </tbody>\n                    </Table>\n                  </div>\n                </InfoArea>\n              </InfoArea>\n              <InfoArea state={this.state} title={'Using the IDE'} depth={1}>\n                <InfoArea state={this.state} title={'Notes about the IDE that are unbelievably important'} depth={2}>\n                  <div className='info-body white'>\n                    Code <strong>persists</strong> between <strong>webpages</strong>. So the Editor and Documentation can be <strong>navigated between</strong> and the <strong>code in the Editor</strong> will be the <strong>same</strong>. However, code can <strong>only</strong> persist if the <strong>supplied buttons</strong> and <strong>tabs</strong> are used to <strong>navigate</strong> between them. This means that using the <strong>browser's history</strong> or <strong>forwards and backwards arrows</strong> will result in code being <strong>lost</strong><br/>\n                    <strong>Breakpoints</strong> and program <strong>input</strong> works in the <strong>same</strong> way and <strong>will persist</strong> so long as the <strong>proper methods</strong> of navigation are <strong>used</strong><br/>\n                    \n                    <br/>\n                    \n                    When writing out <strong>registers</strong> in arguments for commands, the <strong>capitalisation</strong> of the <q>R</q> is <strong>not needed</strong>. Therefore <code>add r1,r2,r3</code> and <code>add R1,R2,R3</code> and <strong>any variation</strong> is <strong>100% allowed</strong> and will produce the <strong>same machine code</strong> as their capitalised counterparts<br/>\n                    \n                    <br/>\n                    \n                    Unlike {this.theOriginalEmulator()}, <strong>white space</strong> before commands is <strong>not needed</strong>. This means that <code>add R1,R2,R3</code> and <code>{'\\xa0\\xa0\\xa0\\xa0'/** 4 * &nbsp */}add R1,R2,R3</code> will be <strong>parsed</strong> the <strong>exact same</strong> and produce the <strong>same machine code</strong>.\n                  </div>\n                </InfoArea>\n                <InfoArea state={this.state} title={'Editing a program'} depth={2}>\n                  <div className='info-body white'>\n                    A program can be <strong>edited</strong> by updating the text in the <strong>code chunk</strong> provided in the <strong>Editor tab</strong><br/>\n                    \n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/editing1.jpg`} alt='Red box around code chunk in Editor pane'/>\n                  </div>\n                  <InfoArea state={this.state} title={'Input editing'} depth={3}>\n                    <div className='info-body white'>\n                      The <strong>input</strong> of a program can be edited by pressing the <FaPen/> icon at the <strong>far left</strong> of the button toolbar and updating the <strong>text box</strong> of the resulting modal. The input will then be set by either clicking the <strong>Set Input</strong> button or by clicking off the modal<br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/editing2.jpg`} alt='Red box around text box of set input modal'/>\n                    </div>\n                  </InfoArea>\n                </InfoArea>\n                <InfoArea state={this.state} title={'Running a program'} depth={2}>\n                  <div className='info-body white'>\n                    The current program <strong>can be run</strong> by simply pressing the <FaPlay/> icon in the <strong>far-left</strong> grouping in the button toolbar<br/>\n                    \n                    <br/>\n                    \n                    This will cause an <strong>implicit</strong> build - a <strong>compilation of the program</strong> - setting into the memory, and, running through of said memory<br/>\n                    A program can however <strong>only</strong> be <strong>run</strong> in this way if it has a <code>trap R0,R0,R0</code>, <strong>halt</strong>, instruction as this helps <strong>prevent</strong> the website from <strong>hanging</strong><br/>\n                    The <strong>resultant</strong> registers, control registers, memory, and, the output from a successful execution will then be displayed in <strong>modal</strong><br/>\n                    \n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/running1.jpg`} alt='Modal showing program results'/>\n                    \n                    To see <strong>more memory</strong> values, the memory can be <strong>scrolled</strong> through when mousing over it and to <strong>display lower</strong> down memory values<br/>\n\n                    <br/>\n\n                    When a program's <strong>used</strong> memory values <strong>exceeds <code>$500</code>, 1280, </strong>, the memory values will be rendered in <strong>different</strong> memory <strong>windows</strong>. This is done as <strong>rendering more</strong> memory values <strong>at one time</strong> significantly <strong>effects performance</strong><br/>\n\n                    <br/>\n\n                    To <strong>view</strong> these other memory windows, the <strong>tab</strong> at the <strong>top</strong> of the <strong>memory</strong> column can be used, either to view the <strong>previous</strong> or <strong>next</strong> windows<br/>\n\n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/running4.jpg`} alt='Modal with arrows in memory column outlined in red'/>\n\n                    <strong>Rather</strong> than using the arrows, a selection from the <strong>dropdown</strong>, displayed after <strong>clicking</strong> the <strong>currently shown</strong> memory values, can be made. This dropdown also displays which memory window is currently being viewed<br/>\n\n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/running5.jpg`} alt='Modal with dropdown open'/>\n\n                    With the <strong>provided</strong> <q>Hello, World!</q> program, this <strong>memory window navigating cannot</strong> be <strong>used</strong> as there is only <strong>one</strong> memory <strong>window</strong>. However, trying again with a <strong>larger program</strong> such as{'\\xa0'/**&nbsp*/}\n                    <a \n                      target='_blank' \n                      rel='noopener noreferrer' \n                      href='https://github.com/QuestioWo/Sigma17#memory-performance-test-'>\n                      this one\n                    </a> \n                    {'\\xa0'/**&nbsp*/}which uses all the memory cells<br/>\n\n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/running6.jpg`} alt='Modal after running memory performance test and scrolling to $e721'/>\n\n                    Also, the <strong>output</strong> can be <strong>double-clicked</strong> to make it larger to get a better view as well. <strong>Another</strong> double click can be used to return the modal to <strong>how it was</strong><br/>\n                    The results modal can also be <strong>closed</strong> by simply <strong>clicking off</strong> of it<br/>\n                    \n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/running2.jpg`} alt='Modal with larger output field'/>\n                    \n                    With the <strong>default</strong> program on launching the website, a <q>Hello, World!</q> program, the previously shown results will appear, printing <strong>Hello, World!</strong> into the output<br/>\n                    \n                    <br/>\n                    \n                    When <strong>hovering over</strong> memory and register values, their <strong>decimal</strong> and <strong>two's complement</strong> values will be shown to help make hex values <strong>more readable</strong><br/>\n                    \n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/running3.jpg`} alt='Modal while mousing over a value to show decimal representation'/><br/>\n\n                    Also <strong>after running</strong> a program <strong>successfully</strong>, the <strong>raw execution time</strong>, <strong>without displaying the results</strong> modal, will be <strong>printed</strong> out in the <strong>console</strong> as <q>Time to run : <i>*execution time*</i></q>\n                  </div>\n                </InfoArea>\n                <InfoArea state={this.state} title={'Debugging a program'} depth={2}>\n                  <InfoArea state={this.state} title={'Syntax errors'} depth={3}>\n                    <div className='info-body white'>\n                      If you attempt to run a program with a command with an <strong>error</strong>, such as a <strong>syntax error</strong>, it will not run as it will <strong>fail to compile</strong><br/>\n                      The <strong>IDE</strong> will then <strong>display</strong> that an error has occurred at the <strong>top of the Editor tab</strong> with <strong>information</strong> about the said error<br/>\n                      A <strong>syntax error</strong> will produce this error<br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging1.jpg`} alt='Red box around build unsuccessful alert'/><br/>\n                      \n                      <strong>Along</strong> with an alert at the top of the window displaying, the <strong>line</strong> in which error has occurred will have a <strong>red box</strong> replacing nothing in the <strong>column</strong> to the <strong>left</strong> of the <strong>line numbers</strong> in the <strong>code chunk</strong><br/>\n                      When <strong>hovering over</strong> this <strong>red box</strong>, details about why the error occurred will appear<br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging2.jpg`} alt='Red box around error details tooltip'/><br/>\n                      \n                      To help <strong>prevent errors</strong> occurring, <strong>checks</strong> will be performed <strong>during editing</strong> of a program so that the run button <strong>doesn't have</strong> to be pressed <strong>each time</strong> to find <strong>errors</strong><br/>\n                      \n                      <br/>\n                      \n                      On top of this, the program can be <strong>just compiled</strong> with the <strong>build</strong> button, shown by the <FaHammer/> icon<br/>\n                      This will <strong>call</strong> for a <strong>build</strong> to be made which will also result in an <strong>alert</strong> of the <strong>status</strong> of the <strong>build</strong> being shown<br/>\n                      If there are <strong>no errors</strong> with building, a <strong>success</strong> alert will be displayed once the program has <strong>finished</strong> been <strong>built</strong><br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging3.jpg`} alt='Red box around success alert'/><br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Semantic errors - Debugger'} depth={3}>\n                    <div className='info-body white'>\n                      More <strong>semantic</strong> or <strong>logic</strong> errors, such as programs producing an <strong>unintended</strong> sets of <strong>results</strong>, have to have more <strong>powerful tools</strong> used than just syntax checking used on them in order to <strong>debug</strong> them<br/>\n                      \n                      <br/>\n                      \n                      This IDE's <strong>Debugger</strong> can be accessed either by <strong>navigating</strong> to the <q>Debug</q> tab <strong>or</strong> by <strong>pressing</strong> the <FaBug/> icon in the Editor tab<br/>\n                      \n                      <br/>\n                      \n                      This view will show you the programs <strong>current</strong> registers, control registers, memory, input, and, output <strong>values</strong><br/>\n                      It will also show you <strong>which lines</strong> of code is being <strong>executed</strong> in the <strong>code chunk</strong> next to these values<br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging4.jpg`} alt='Red box around success alert'/><br/>\n                      \n                      <strong>Unlike</strong> the Editor tab, the code chunk can be <strong>hidden completely</strong> using the <FaMinus/> icon<br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging5.jpg`} alt='Red box around success alert'/><br/>\n                      \n                      To make sure that the <strong>expected</strong> machine code is being <strong>compiled</strong>, <strong>hovering over</strong> the <strong>line numbers</strong> will show the <strong>memory addresses</strong> of the lines corresponding machine code and the <strong>values</strong> of said <strong>memory</strong> addresses<br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging10.jpg`} alt='Red box around memory info tooltip'/><br/>\n                      \n                      The program can also be <strong>executed</strong> by either running through at <strong>full speed</strong> - like in the Editor tab - or, by <strong>stepping-through</strong> it<br/>\n                      <strong>Full speed</strong> running can be performed by pressing the <FaPlay/><br/>\n                      <strong>Stepping-Through</strong> can be performed by pressing the <FaStepForward/><br/>\n                      Stepping-Through executes <strong>one line</strong> of code at a time and <strong>updates</strong> the registers, control registers, memory, input, and, output <strong>accordingly</strong><br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging6.jpg`} alt='Red box around step-forward button after one press'/><br/>\n                      \n                      Also stepping-through the program shows the different <strong>line overlays</strong>. The <span style={{color : 'blue'}}><strong>blue</strong></span> overlay indicates the line that <strong>has</strong> just been <strong>executed</strong>. The <span style={{color : 'green'}}><strong>green</strong></span> overlay shows the line that is <strong>currently being</strong>/<strong>will</strong> be <strong>executed</strong><br/>\n                      This same <strong>format</strong> of highlighting is used to show the corresponding <strong>cells</strong> in <strong>memory</strong> are <strong>being</strong>/<strong>have</strong> been executed<br/>\n\n                      <br/>\n\n                      <strong>Memory</strong> cells and <strong>registers</strong> coloured <span style={{color : 'darkorange'}}><strong>dark orange</strong></span> denote values that have been <strong>changed</strong><br/>\n                      \n                      <br/>\n\n                      <strong>Executed lines</strong> and corresponding <strong>memory values</strong> are also by default <strong>followed</strong><br/>\n                      This functionality can be <strong>disabled</strong> by pressing the <FaEye/> icon to make it become a <FaEyeSlash/> icon<br/>\n                      There are options to <strong>toggle</strong> this <strong>following of execution</strong> for <strong>both memory</strong> and <strong>code</strong> by the <strong>different</strong> buttons above <strong>each column</strong><br/>\n\n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging11.jpg`} alt='Red box around follow memory and follow code buttons after code follow toggled'/><br/>\n                      \n                      A program can be <strong>stepped-through</strong> or <strong>run</strong> through up until it is <strong>halted</strong>. This is <strong>most commonly</strong> done with a <code>trap R0,R0,R0</code> instruction<br/>\n                      <strong>After</strong> a program is <strong>halted</strong>, the buttons for running and stepping will become <strong>disabled</strong>. Also, the <span style={{color : 'green'}}><strong>green</strong></span> overlay will <strong>disappear</strong> as there will be <strong>no next</strong> line to <strong>execute</strong><br/>\n                      Execution of the program can be <strong>restarted</strong> by pressing the <FaBackward/> icon in the middle of the button toolbar<br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging7.jpg`} alt='Red box around disabled run, step-forward, and, restart buttons'/><br/>\n                    </div>\n                    <InfoArea state={this.state} title={'Breakpoints'} depth={4}>\n                      <div className='info-body white'>\n                        On top of the <strong>stepping-through</strong> functionality, <strong>breakpoints</strong> have been implemented<br/>\n                        \n                        <br/>\n                        \n                        Breakpoints can be <strong>activated</strong> by <strong>clicking</strong> on the <strong>line number</strong> to the <strong>left</strong> of the <strong>code</strong><br/>\n                        This will then show a <strong>filled circle</strong> to indicate the breakpoint has been activated. Also, in the Debugger window, the <strong>corresponding</strong> memory cell to the line will become <strong>underlined</strong> to show <strong>where</strong> in <strong>memory</strong> the program's <strong>execution</strong> will <strong>pause</strong><br/>\n                        \n                        <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging8.jpg`} alt='Red box around activated breakpoint and underlined memory value'/><br/>\n                        \n                        To <strong>disable</strong> breakpoints, they can either be <strong>clicked</strong> again or, to disable <strong>all</strong> breakpoints, the <FaTimes/> icon can be pressed<br/>\n                        This can be done to the <strong>disable</strong> breakpoints in either the <strong>Editor</strong> or the <strong>Debugger</strong> tabs<br/>\n\n                        <br/>\n                        \n                        When breakpoints are <strong>activated</strong>, program execution in the <strong>Debugger</strong> tab will <strong>pause</strong> when a line with a breakpoint is <strong>reached</strong><br/>\n                        \n                        <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/debugging9.jpg`} alt='Red box around activated breakpoint and underlined memory value with program executed to the breakpoint'/><br/>\n                        \n                        Program execution can be <strong>resumed</strong> by just using the <strong>run</strong> or <strong>step-through</strong> buttons<br/>\n                        \n                        <br/>\n                        \n                        It is important to note that breakpoints <strong>only</strong> halt execution in the <strong>Debugger</strong> tab and have <strong>no effect</strong> on <strong>execution</strong> in the regular <strong>Editor</strong> tab<br/>\n                      </div>\n                    </InfoArea>\n                  </InfoArea>\n                </InfoArea>\n                <InfoArea state={this.state} title={'Exporting a program'} depth={2}>\n                  <div className='info-body white'>\n                    Programs can be <strong>exported</strong> from the Editor in a number of ways<br/>\n\n                    <br/>\n\n                    The <strong>easiest</strong> method is to press the <FaDownload/> icon<br/>\n                    This will start the <strong>download</strong> a file that is the code exactly <strong>as-is</strong> in the <strong>code chunk</strong><br/>\n\n                    <br/>\n\n                    If you want to <strong>change</strong> the <strong>file name</strong> that the file downloads as, <strong>or</strong>, want to download the file in <strong>another format</strong>, pressing the <FaChevronDown/> icon will display a modal with <strong>more options</strong><br/>\n\n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting1.jpg`} alt='Red box around export modal'/><br/>\n\n                    From the modal, the <strong>options</strong> for how to download the <strong>current</strong> code chunk is displayed. These options <strong>include</strong> :\n                    <ul>\n                      <li>the <strong>default</strong> option of <strong>as-is</strong>,</li>\n                      <li>the <strong>current code</strong> but in a format which makes it <strong>compatible</strong> with {this.theOriginalEmulator()},</li>\n                      <li>the <strong>pure binary</strong> values of the <strong>compiled</strong> current program,</li>\n                      <li>the current program but in a <strong>'data $' + machine code</strong> format,</li>\n                      <li>the current program but in a <strong>'data $' + machine code</strong> format, that is also <strong>compatible</strong> with {this.theOriginalEmulator()}</li>\n                    </ul>\n                    \n                    Also displayed by the modal is the <strong>file name</strong> field that <strong>chosen file option</strong> will download as, <strong>along with</strong> the displayed appended <strong>extension</strong><br/>\n                  </div>\n                  <InfoArea state={this.state} title={'Exporting - Raw'} depth={3}>\n                    <div className='info-body white'>\n                      Exporting using the <strong>Raw</strong> option of the code chunk will produce a file filled with <strong>exactly</strong> the <strong>contents</strong> of the <strong>code chunk</strong> and <strong>nothing else</strong><br/>\n\n                      If the download can be <strong>completed successfully</strong>, an <strong>alert</strong> will be displayed saying so at the <strong>top of the tab</strong><br/>\n\n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting2.jpg`} alt='Raw file'/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Exporting - Raw Compatible'} depth={3}>\n                    <div className='info-body white'>\n                      Exporting using the <strong>Raw Compatible</strong> option of the code chunk will produce a file filled with the current code chunk with compatible <strong>register arguments</strong>, <strong>indenting before lines with no labels</strong>, and, <strong>indenting before lines with labels</strong><br/>\n\n                      If the current program in the code chunk contains <strong>commands</strong> that would cause an <strong>error</strong> in the <strong>assembler</strong> {this.theOriginalEmulator()}, then an <strong>alert</strong> will display at the top of the page outlining <strong>which lines</strong> have <strong>incompatibilities</strong><br/>\n\n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting3.jpg`} alt='Red box around failed download alert'/><br/>\n\n                      Along with the <strong>alert</strong>, a <strong>red triangle</strong> will appear in the column <strong>next</strong> to the <strong>line numbers</strong><br/>\n                      <strong>Hovering over</strong> this triangle will display information for why this line is <strong>incompatible</strong><br/>\n\n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting4.jpg`} alt='Red box around failed download tooltip'/><br/>\n\n                      If the current program in the code chunk contains <strong>commands</strong> that do not either <strong>compile</strong> or <strong>function</strong> the same between this and {this.theOriginalEmulator()}, then an <strong>alert</strong> will display at the top of the page containing <strong>which lines</strong> may cause these <strong>discrepancies</strong><br/>\n\n                      <br/>\n\n                      The <strong>download</strong>, however, will still <strong>continue</strong> as these are seen as <strong>minor</strong> errors as they <strong>will not</strong> cause {this.theOriginalEmulator()}'s assembler to <strong>error</strong><br/>\n\n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting5.jpg`} alt='Red box around warning download alert'/><br/>\n\n                      Along with the <strong>alert</strong>, an <strong>orange triangle</strong> will appear in the column <strong>next</strong> to the <strong>line numbers</strong><br/>\n                      <strong>Hovering over</strong> this triangle will display information for why this line may cause <strong>discrepancies</strong><br/>\n\n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting6.jpg`} alt='Red box around warning download tooltip'/><br/>\n\n                      However, if <strong>both</strong> commands that will cause <strong>discrepancies</strong> and <strong>errors</strong> are present, then <strong>only</strong> the <strong>error alert</strong> will show, however, <strong>all</strong> the <strong>triangles</strong> of each type will <strong>show</strong><br/>\n\n                      <br/>\n\n                      It is also important to note that the <strong>triangles</strong> will <strong>only</strong> update <strong>after re-attempting</strong> a download of the <strong>same type</strong><br/>\n\n                      <br/>\n\n                      Downloading a <strong>Raw Compatible</strong> file may also disrupt neat indenting, and when downloaded will look like<br/>\n                      Also, <strong>all</strong> constants - decimal, hex, and, binary - <strong>get changed</strong> from their orignal form <strong>to</strong> their <strong>decimal value</strong><br/>\n\n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting7.jpg`} alt='Raw Compatible file'/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Exporting - Binary'} depth={3}>\n                    <div className='info-body white'>\n                      Exporting using the <strong>Binary</strong> option will produce a file filled with purely the binary values of the compiled program<br/>\n                      This will produce a <strong>.bin</strong> file and will need a special file viewer to view<br/>\n\n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting8.jpg`} alt='Binary file'/><br/>\n                      \n                      The <strong>advantages</strong> of this file type are that it takes <strong>very little space</strong> and it <strong>doesn't</strong> have to <strong>worry</strong> about <strong>syntax</strong> across <strong>other emulators</strong> that follow the <strong>Sigma16 ISA</strong> - <strong>Industry Standard Architecture</strong> - as {this.theOriginalEmulator()}<br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Exporting - Hex'} depth={3}>\n                    <div className='info-body white'>\n                      Exporting using the <strong>Hex</strong> option will produce a file filled with <strong>'data $' + machine code</strong><br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting9.jpg`} alt='Hex file'/><br/>\n                      \n                      The <strong>advantage</strong> of this file type is that it <strong>doesn't</strong> have to <strong>worry</strong> about <strong>syntax</strong> across <strong>other emulators</strong> that follow the <strong>Sigma16 ISA</strong> - <strong>Industry Standard Architecture</strong> - as {this.theOriginalEmulator()}<br/>\n                      This is because <strong>all</strong> Sigma16 emulators <strong>should</strong> have the <strong>same functionality</strong> for the <strong>same machine code</strong> for them<br/>\n                    </div>\n                  </InfoArea>\n                  <InfoArea state={this.state} title={'Exporting - Hex Compatible'} depth={3}>\n                    <div className='info-body white'>\n                      Exporting using the <strong>Hex Compatible</strong> option will produce a file filled with <strong>' data $' + machine code</strong><br/>\n                      \n                      <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/exporting10.jpg`} alt='Hex Compatible file'/><br/>\n                      \n                      This file has been made to be <strong>compatible</strong> with {this.theOriginalEmulator()} as {this.theOriginalEmulator()} requires <strong>white space before</strong> commands to <strong>recognise</strong> them properly<br/>\n\n                      <br/>\n\n                      Before this file is downloaded, the <strong>same checks</strong> as the <strong>Raw Compatible</strong> occur, meaning that is there are <strong>commands</strong> that will cause <strong>errors</strong> or <strong>discrepancies</strong> with {this.theOriginalEmulator()} then the appropriate <strong>alerts</strong> and <strong>tooltips</strong> will be displayed<br/>\n                    </div>\n                  </InfoArea>\n                </InfoArea>\n                <InfoArea state={this.state} title={'Importing a program'} depth={2}>\n                  <div className='info-body white'>\n                    For <strong>most</strong> files, <strong>importing</strong> is as easy as <strong>copying</strong> the contents of them and <strong>pasting</strong> the contents into the <strong>code chunk</strong><br/>\n\n                    <br/>\n\n                    However, for importing <strong>binary</strong>, <strong>.bin</strong>, files, they <strong>cannot</strong> be <strong>copied</strong> and <strong>pasted</strong> into the code chunk<br/>\n                    To import binary files, press the <FaUpload/> icon and <strong>open</strong>/<strong>select</strong> the <strong>.bin</strong> file to upload from the file <strong>dialogue</strong> that appears<br/>\n\n                    <br/>\n\n                    This will then <strong>import</strong> the <strong>selected</strong> program and <strong>format</strong> it so that it is in the layout of <strong>'data $' + machine code</strong><br/>\n\n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/importing1.jpg`} alt='Red box around imported code and upload button'/><br/>\n\n                    This code may <strong>look significantly different</strong>, however, it is the same <q>Hello, World!</q> program that <strong>all</strong> the other examples use<br/>\n\n                    <img style={{width : '100%', height : '100%'}} src={`${process.env.PUBLIC_URL}/docs/importing2.jpg`} alt='Red box around imported code and results modal'/><br/>\n                  </div>\n                </InfoArea>\n              </InfoArea>\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n//\nclass InfoArea extends React.Component {\n  constructor( props, context ) {\n    super( props, context );\n\n    this.state = {\n      showName : props.title.replace( /\\s+/g, '' )\n    };\n  }\n\n  toggleCollapse = e => {\n    var passed = this.props.state.display;\n    passed[this.state.showName] = !( this.props.state.display[this.state.showName] );\n    this.props.state.setParentState( { display : passed } );\n  }\n\n  ifCallback = e => {\n    if ( this.state.showName === this.props.state.scrollTo ) this.props.state.infoAreaOpenCallback( e );\n  }\n\n  render() {\n    return (\n      <div id={this.state.showName} className={ 'info-field depth' + this.props.depth }>\n        <div className={ 'info-title depth' + this.props.depth }>\n          <Row>\n            <Col>\n              <h4>\n                {this.props.title}\n              </h4>\n            </Col>\n            <Col>\n              <Button size='sm' variant='outline-secondary' style={{float : 'right'}} onClick={this.toggleCollapse}>\n                { this.props.state.display[this.state.showName] ?\n                  <FaChevronUp/>\n                  :\n                  <FaChevronDown/>\n                }\n              </Button>\n            </Col>\n          </Row>\n        </div>\n        <Collapse in={this.props.state.display[this.state.showName]} onEntered={this.ifCallback}>\n          <div className='info-body'>\n            {this.props.children}\n          </div>\n        </Collapse>\n      </div>\n    );\n  }\n}","/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\nimport React from 'react';\n\nexport const CustomToggle = React.forwardRef( ( { children, onClick }, ref ) => (\n  <span \n    className='documentation-page-link'\n    style={{ left : '50%', transform : 'translate( -50%, 0 )' }}\n    ref={ref}\n    onClick={ e => {\n      e.preventDefault();\n      onClick( e );\n    } }>\n    {children}\n  </span>\n) );\n\nexport const CustomMenu = React.forwardRef(\n  ( { children, style, className, 'aria-labelledby': labeledBy }, ref ) => {\n    return (\n      <div\n        ref={ref}\n        style={style}\n        className={className}\n        >\n        <ul className=\"list-unstyled\">\n          {children}\n        </ul>\n      </div>\n    );\n  },\n);","/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\nimport React from 'react';\n\nimport 'codemirror/lib/codemirror.css';\n\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport * as Emulator from './Emulator';\n\nimport { Controlled as CodeMirror } from 'react-codemirror2';\n\nrequire( 'codemirror/theme/dracula.css' );\nrequire( './mode/sigma16' );\n\nexport default class CodeMirrorComponent extends React.Component {\n// CLASS METHODS\n  constructor( props, context ) {\n    super( props, context );\n\n    this.state = {\n      code : props.code,\n      breakpoints : props.breakpoints,\n\n      lineError : {}\n    };\n  }\n\n  componentDidMount() {\n    this.checkCode( this.state.code, 0, Infinity, true );\n  }\n\n// CHECKING METHODS\n  checkCode( code, changedLineFrom, changedLineTo, updateState=false ) {\n    var lines = code.split( '\\n' );\n    var check;\n\n    var lineErrorCopy = this.state.lineError;\n\n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var ranSuccessfully = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n\n      parsed = Emulator.parseLineForLabels( lines[i] );\n\n      if ( parsed['label'] !== '' ) {\n        if ( parsed['justLabel'] ) {\n          justLabelOffset += 1;\n          labels[parsed['label']] = currentLine - justLabelOffset + 1;\n        } else {\n          labels[parsed['label']] = currentLine - justLabelOffset;\n        }\n      }\n\n      currentLine += parsed['instructionWords'];\n    }\n\n    for ( i = changedLineFrom; i < lines.length && i <= changedLineTo; i++ ) {\n      check = Emulator.checkLine( lines[i], labels );\n      if ( check.length ) {\n        lineErrorCopy[i + 1] = check;\n        ranSuccessfully = false;\n      } else {\n        delete lineErrorCopy[i + 1];\n      }\n    }\n\n    if ( updateState ) {\n      this.setState( { code : code, lineError : lineErrorCopy } );\n    } else {\n      return [ranSuccessfully, lineErrorCopy];\n    }\n  }\n\n// BREAKPOINTS\n  breakpointsColumn() {\n    var breakpoints = [];\n    var linesDotted = [];\n\n    if ( this.props.lineToScrollTo ) {\n      const codeAreaParent = document.getElementById( 'code-area' );\n      codeAreaParent.scrollTo( 0, this.props.lineToScrollTo );\n    }\n\n    const lines = this.state.code.split( '\\n' );\n\n    const lineErrorKeys = Object.keys( this.state.lineError );\n\n    var lineCompWarnKeys = [];\n    var lineCompErrorKeys = [];\n\n    if ( this.props.lineCompWarn ) { \n      lineCompWarnKeys = Object.keys( this.props.lineCompWarn );\n      lineCompErrorKeys = Object.keys( this.props.lineCompError );\n    }\n\n    for ( var i = 0; i < lineErrorKeys.length; i++ ) {\n      const lineI = lineErrorKeys[i] - 1;\n\n      if ( !( linesDotted.includes( lineI ) ) && lineI <= lines.length ) {\n        const styleTop = ( 25 * ( lineI + 0.75 ) ) + 3 +'px';\n\n        var className = 'breakpoint ' + ( lineI + 1 ) + ' error';\n        if ( this.state.breakpoints.includes( lineI + 1 ) ) {\n          className = className + ' active';\n        }\n\n        breakpoints.push( \n          <OverlayTrigger\n            key={'breakpoint ' + ( lineI + 1 ) + ' error tooltip'}\n            placement={'right'}\n            overlay={\n              <Tooltip>\n                {this.state.lineError[lineI + 1]}\n              </Tooltip>\n            }>\n            <div \n              key={'breakpoint ' + ( lineI + 1 )}\n              id={'breakpoint ' + ( lineI + 1 )} \n              className={className} \n              style={{top : styleTop}} \n              onClick={this.breakpointOnClick}/>\n          </OverlayTrigger>\n        );\n\n        linesDotted.push( lineI );\n      }\n    }\n\n    if ( this.props.lineCompError ) {\n      for ( i = 0; i < lineCompErrorKeys.length; i++ ) {\n        const lineI = lineCompErrorKeys[i] - 1;\n\n        if ( !( linesDotted.includes( lineI ) ) && lineI <= lines.length ) {\n          const styleTop = ( 25 * ( lineI + 0.75 ) ) + 3 +'px';\n\n          breakpoints.push( \n            <OverlayTrigger\n              key={'breakpoint ' + ( lineI + 1 ) + ' comperror tooltip'}\n              placement={'right'}\n              overlay={\n                <Tooltip>\n                  {this.props.lineCompError[lineI + 1]['error']}\n                </Tooltip>\n              }>\n              <div \n                key={'breakpoint ' + ( lineI + 1 )}\n                id={'breakpoint ' + ( lineI + 1 )} \n                className={'breakpoint ' + ( lineI + 1 ) + ' comperror'} \n                style={{top : styleTop}} />\n            </OverlayTrigger>\n          );\n\n          linesDotted.push( lineI );\n        }\n      }\n    }\n\n    if ( this.props.lineCompWarn ) {\n      for ( var it = 0; it < lineCompWarnKeys.length; it++ ) {\n        const lineI = lineCompWarnKeys[it] - 1;\n\n        if ( !( linesDotted.includes( lineI ) ) && lineI <= lines.length ) {\n          const styleTop = ( 25 * ( lineI + 0.75 ) ) + 3 +'px';\n\n          breakpoints.push( \n            <OverlayTrigger\n              key={'breakpoint ' + ( lineI + 1 ) + ' compwarn tooltip'}\n              placement={'right'}\n              overlay={\n                <Tooltip>\n                  {this.props.lineCompWarn[lineI + 1]['warn']}\n                </Tooltip>\n              }>\n              <div \n                key={'breakpoint ' + ( lineI + 1 )}\n                id={'breakpoint ' + ( lineI + 1 )} \n                className={'breakpoint ' + ( lineI + 1 ) + ' compwarn'} \n                style={{top : styleTop}} />\n            </OverlayTrigger>\n          );\n\n          linesDotted.push( lineI );\n        }\n      }\n    }\n    \n    for ( var ite = 0; ite < this.state.breakpoints.length; ite++ ) {\n      const lineI = this.state.breakpoints[ite] - 1;\n\n      if ( !( linesDotted.includes( lineI ) ) && lineI <= lines.length ) {\n        const styleTop = ( 25 * ( lineI + 0.75 ) ) + 3 +'px';\n\n        breakpoints.push( \n          <div \n            key={'breakpoint ' + ( lineI + 1 )}\n            id={'breakpoint ' + ( lineI + 1 )} \n            className={'breakpoint active'} \n            style={{top : styleTop}} \n            onClick={this.breakpointOnClick}/>\n        );\n      }\n    }\n \n    return( breakpoints );\n  }\n  //\n  breakpointOnClick = breakpoint => {\n    var breakpointsCopy = this.state.breakpoints;\n\n    const lineNo =  Number( breakpoint.currentTarget.id.slice( 'breakpoint '.length, breakpoint.currentTarget.id.length ) );\n\n    const index = breakpointsCopy.indexOf( lineNo );\n    breakpointsCopy.splice( index, 1 );\n\n    if ( this.props.breakpointCallback ) {\n      this.props.breakpointCallback( lineNo, false );\n    }\n\n    this.setState( { breakpoints : breakpointsCopy } );\n  }\n\n  breakpointToggle = ( editor, lineNumber ) => {\n    var breakpointsCopy = this.state.breakpoints;\n    \n    if ( breakpointsCopy.includes( lineNumber + 1 ) ) {\n      const index = breakpointsCopy.indexOf( lineNumber + 1 );\n      breakpointsCopy.splice( index, 1 );\n\n      if ( this.props.breakpointCallback ) {\n        this.props.breakpointCallback( breakpointsCopy );\n      }\n    } else {\n      breakpointsCopy.push( lineNumber + 1 );\n\n      if ( this.props.breakpointCallback ) {\n        this.props.breakpointCallback( breakpointsCopy );\n      }\n    }\n\n    if ( breakpointsCopy.includes( 0 ) ) {\n      const index0 = breakpointsCopy.indexOf( 0 );\n      breakpointsCopy.splice( index0, 1 );\n\n      if ( this.props.breakpointCallback ) {\n        this.props.breakpointCallback( breakpointsCopy );\n      }\n    }\n\n    this.setState( { breakpoints : breakpointsCopy } );\n  }\n\n  disableBreakpoints = e => {\n    this.setState( { breakpoints : [] } );\n\n    if ( this.props.breakpointCallback ) {\n      this.props.breakpointCallback( [] );\n    }\n  }\n\n// LINE NUMBER\n  lineNumberCallBack = e => {\n    this.breakpointToggle( null, Number( e.target.innerText ) - 1 );\n  }\n\n// LINE OVERLAYS\n  activeLineOverlay( heightOfOverlay ) {\n    var overlayDisplay = 'block';\n\n    var lineNoWidth = 21; // min-width of 20 + 1 for border \n    var lineNoWidthLength = ( Math.log( this.state.code.split( '\\n' ).length ) * Math.LOG10E + 1 ) | 0;\n\n    if ( lineNoWidthLength >= 2 ) {\n      lineNoWidth = ( ( lineNoWidthLength * 9 ) + 9 ); // 9 for number padding\n    }\n\n    lineNoWidth = ( lineNoWidth + 16 ) + 'px'; //16 for breakpoint column\n\n    if ( isNaN( heightOfOverlay ) ) {\n      overlayDisplay = 'none';\n      heightOfOverlay = '0px';\n    }\n    \n    return(\n      <div \n        style={{marginTop : heightOfOverlay, marginLeft : lineNoWidth, display : overlayDisplay}} \n        className='line-overlay active'\n        id='line-overlay-active'\n      />\n    );\n  }\n\n  lastLineOverlay( heightOfOverlay ) {\n    // if program has at least been stepped through\n    var overlayDisplay = 'block';\n\n    var lineNoWidth = 21;\n    var lineNoWidthLength = ( Math.log( this.state.code.split( '\\n' ).length ) * Math.LOG10E + 1 ) | 0;\n\n    if ( lineNoWidthLength >= 2 ) {\n      lineNoWidth = ( ( lineNoWidthLength * 9 ) + 9 );\n    }\n\n    lineNoWidth = ( lineNoWidth + 16 ) + 'px'; // 25 because 16 for breakpoint column, 8 for number padding and 1 for number column border\n\n    if ( isNaN( heightOfOverlay ) ) {\n      overlayDisplay = 'none';\n      heightOfOverlay = '0px';\n    }\n\n    return(\n      <div \n        style={{marginTop : heightOfOverlay, marginLeft : lineNoWidth, display : overlayDisplay}} \n        className='line-overlay last' \n        id='line-overlay-last'\n      />\n    );\n  }\n\n// RENDER\n  render() {\n    var theme;\n    if ( localStorage.getItem( 'theme' ) !== null ) {\n      if ( localStorage.getItem( 'theme' ) === 'light' ) {\n        theme = 'default';\n      } else { \n        theme = 'dracula';\n      }\n    } else {\n      theme = 'default'; \n    }\n\n    return(\n      <React.Fragment>\n        <div \n          id=\"code-area\" \n          className={ this.props.alertShow ? 'code-area squished ' : 'code-area ' + this.props.className }>\n          <div id='breakpoint-column' className='breakpoint-column'>\n            {this.breakpointsColumn()}\n          </div>\n          { this.props.lineNumbersMethod &&\n            <div className='line-numbers-column'>\n              {this.props.lineNumbersMethod( this.lineNumberCallBack )}\n            </div>\n          }\n          { this.props.activeHeight &&\n            <React.Fragment>\n              {this.activeLineOverlay( this.props.activeHeight )}\n            </React.Fragment>\n          }\n          { this.props.lastHeight &&\n            <React.Fragment>\n              {this.lastLineOverlay( this.props.lastHeight )}\n            </React.Fragment>\n          }\n          <CodeMirror\n            value={this.state.code}\n            className={this.props.codeMirrorClassName}\n            onBeforeChange={(editor, data, value) => {\n              if ( data.origin === \"paste\" ) {\n                this.checkCode( value, data.from.line, Infinity, true );\n              }\n              this.checkCode( value, data.from.line, data.to.line, true );\n            }}\n            onGutterClick={this.breakpointToggle}\n            options={{mode : 'sigma16', lineNumbers : this.props.lineNumbersMethod ? false : true, readOnly : this.props.readOnly, theme : theme}}\n            autoCursor/>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\nimport React from 'react';\n\nimport './ProgramEditorView.css';\n\nimport { Alert, Button, ButtonGroup, Col, Dropdown, FormControl, InputGroup, Modal, OverlayTrigger, Row, ToggleButton, ToggleButtonGroup, Tooltip } from 'react-bootstrap';\nimport { FaBug, FaChevronDown, FaDownload, FaHammer, FaPen, FaPlay, FaTimes, FaUpload } from 'react-icons/fa';\n\nimport * as Emulator from './utils/Emulator';\n\nimport { CustomToggle, CustomMenu } from './utils/CustomDropdown';\nimport CodeChunk from './utils/CodeChunk';\nimport NavBar from './NavBar';\n\nexport default class ProgramEditorView extends React.PureComponent {\n// CLASS METHODS\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n\n      alertShow : false,\n      alertMessage : '',\n      alertNature : 'success',\n\n      runModalShow : false,\n      outputZoomed : false,\n      memoryViewStart : 0,\n      memoryViewOptions : [0, 0x500], // generic values so it doesnt break if something goes catastrophically wrong\n\n      inputModalShow : false,\n\n      downloadModalShow : false,\n      downloadAs : 0,\n      fileName : 'S16DownloadFile',\n\n      lineCompWarn : {},\n      lineCompError : {},\n\n      registers : {\n        0 : 0,\n        1 : 0,\n        2 : 0,\n        3 : 0,\n        4 : 0,\n        5 : 0,\n        6 : 0,\n        7 : 0,\n        8 : 0,\n        9 : 0,\n        10 : 0,\n        11 : 0,\n        12 : 0,\n        13 : 0,\n        14 : 0,\n        15 : 0\n      },\n      cpuControl : {\n        'pc' : 0,\n        'ir' : 0,\n        'adr' : 0\n      },\n\n      memory : {},\n\n      output : '',\n\n      input : ''\n    };\n\n    // this.codeChunkMounted = this.codeChunkMounted.bind( this );\n\n    this.inputRef = React.createRef();\n    this.codeRef = React.createRef();\n  }\n\n  componentDidMount() {\n    if ( sessionStorage.getItem( 'code' ) !== null ) {\n      const sessionProps = {\n        code : sessionStorage.getItem( 'code' ),\n        input : sessionStorage.getItem( 'input' ),\n        breakpoints : sessionStorage.getItem( 'breakpoints' ).split( ',' ).map(\n          breakpointString => {\n            return( Number( breakpointString ) );\n          }\n        )\n      };\n\n      this.setState( sessionProps );\n      this.codeRef.current.setState( sessionProps );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( this.props );\n\n      this.codeRef.current.setState( this.props );\n    }\n  }\n\n  saveStorage = e => {\n    sessionStorage.setItem( 'code', this.codeRef.current.state.code );\n    sessionStorage.setItem( 'input', this.state.input );\n    sessionStorage.setItem( 'breakpoints', this.codeRef.current.state.breakpoints );\n  }\n\n// REGISTER/MEMORY METHODS\n  controlColumn() {\n    var controls = [];\n    var controlKeys = Object.keys( this.state.cpuControl );\n\n    for ( var i = 0; i < controlKeys.length; i++ ) {\n      controls.push( \n        <div \n          key={'control ' + controlKeys[i]}\n          id={'control ' + controlKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{controlKeys[i]}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n                ${Emulator.writeHex( this.state.cpuControl[controlKeys[i]] )}\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return controls;\n  }\n  //\n  registerColumn() {\n    var registers = [];\n\n    for ( var i = 0; i < 16; i++ ) {\n      registers.push( \n        <div \n          key={'register ' + i}\n          id={'register ' + i}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{'R'+i}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.registers[i] )}/{ Emulator.readSignedHex( this.state.registers[i] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.registers[i] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return registers;\n  }\n  //\n  outputColumn() {\n    return ( \n      <div\n        className='output-area'\n        onDoubleClick={this.resizeOutput}>\n        {this.state.output}\n      </div>\n    );\n  }\n  //\n  memoryOptions( memory ) {\n    const memoryKeys = Object.keys( memory ).map( key => Number( key ) );\n\n    const interval = 0x500;\n\n    var memoryViewOptions = [0];\n    var memorykeyindex = 0;\n\n    while ( true ) {\n      if ( memoryKeys[memorykeyindex + interval] ) {\n        memoryViewOptions.push( memoryKeys[memorykeyindex + interval] );\n        memorykeyindex += interval;\n      } else {\n        if ( !( memoryViewOptions.includes( memoryKeys[memoryKeys.length - 1] + 1 ) ) ) {\n          memoryViewOptions.push( memoryKeys[memoryKeys.length - 1] + 1 );\n        }\n        break;\n      }\n    }\n\n    this.setState( { memoryViewOptions : memoryViewOptions } );\n  }\n\n  memoryViewPrev = e => {\n    this.setState( prevState => ( { \n      memoryViewStart : prevState.memoryViewStart - 1\n    } ) );\n  }\n\n  memoryViewNext = e => {\n    this.setState( prevState => ( { \n      memoryViewStart : prevState.memoryViewStart + 1\n    } ) );\n  }\n\n  handleMemoryViewChange = e => {\n    this.setState( { \n      memoryViewStart : Number( e )\n    } );\n  }\n\n  memoryColumn() {\n    var memoryValues = [];\n    var memoryKeys = Object.keys( this.state.memory ).map( key => Number( key ) );\n\n    for ( var i = memoryKeys.indexOf( this.state.memoryViewOptions[this.state.memoryViewStart] ); i < memoryKeys.length && memoryKeys[i] < this.state.memoryViewOptions[this.state.memoryViewStart + 1]; i++ ) {\n      memoryValues.push( \n        <div \n          key={'memory ' + memoryKeys[i]}\n          id={'memory ' + memoryKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>${Emulator.writeHex( memoryKeys[i] )}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.memory[memoryKeys[i]] ) }/{ Emulator.readSignedHex( this.state.memory[memoryKeys[i]] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.memory[memoryKeys[i]] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return (\n      <div id='memory-column-small' className='memory-column small'>\n        <div className='memory-search'>\n          <Row>\n            <Col>\n              { this.state.memoryViewStart === 0 ?\n                <span className='documentation-page-link disabled'>\n                  &#x25C0;\n                </span>\n              :\n                <span className='documentation-page-link' onClick={this.memoryViewPrev}>\n                  &#x25C0;\n                </span>\n              }\n            </Col>\n            <Col style={{ display : 'contents' }}>\n              <Dropdown onSelect={this.handleMemoryViewChange}>\n                <Dropdown.Toggle as={CustomToggle} id='dropdown-custom-components'>\n                  {Emulator.writeHex( this.state.memoryViewOptions[this.state.memoryViewStart] )}-{Emulator.writeHex( this.state.memoryViewOptions[this.state.memoryViewStart + 1] - 1 )}\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu as={CustomMenu}>\n                  { this.state.memoryViewOptions.map( \n                      option => {\n                        const index = this.state.memoryViewOptions.indexOf( option );\n\n                        if ( index !== ( this.state.memoryViewOptions.length - 1 ) ) {\n                          return (\n                            <Dropdown.Item key={option} eventKey={index} active={index === this.state.memoryViewStart} className='text-center'>\n                              {Emulator.writeHex( option )}-{Emulator.writeHex( this.state.memoryViewOptions[index + 1] - 1 )}\n                            </Dropdown.Item>\n                          );\n                        } else {\n                          return ( \n                            <React.Fragment key={option} />\n                          );\n                        }\n                      }\n                    )\n                  }\n                </Dropdown.Menu>\n              </Dropdown>\n            </Col>\n            <Col>\n              <div style={{ float : 'right' }}>\n                { this.state.memoryViewStart + 1 === ( this.state.memoryViewOptions.length - 1 ) ?\n                  <span className='documentation-page-link disabled'>\n                    &#x25B6;\n                  </span>\n                :\n                  <span className='documentation-page-link' onClick={this.memoryViewNext}>\n                    &#x25B6;\n                  </span>\n                }\n              </div>\n            </Col>\n          </Row>\n        </div>\n        <div style={{ height : '25px' }} />\n        <div>\n          {memoryValues}\n        </div>\n      </div>\n    );\n  }\n\n// ALERT METHODS\n  updateAlert( message, nature ) {\n    this.setState( { alertMessage : message, alertNature : nature, alertShow : true } );\n  }\n\n  closeAlert = alert => {\n    this.setState( { alertShow : false } );\n  }\n\n// RUN MODAL METHODS\n  runModalClose = modal => {\n    this.resetCPUandMemory();\n    this.setState( { runModalShow : false } );\n  }\n\n  resizeOutput = outputColumn => {\n    const target = outputColumn.currentTarget;\n\n    // if currently zoomed and are setting to smaller\n    if ( this.state.outputZoomed ) {\n      target.style.height = '72px';\n    } else {\n      target.style.height = '508px';\n    }\n\n    this.setState( prevState => ( { \n        outputZoomed : !( prevState.outputZoomed ) \n      } \n    ) );\n  }\n\n// CHECKING METHOD\n  checkCode( code ) {\n    var lines = code.split( '\\n' );\n    var check;\n\n    var lineErrorCopy = {};\n\n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var ranSuccessfully = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      parsed = Emulator.parseLineForLabels( lines[i] );\n\n      if ( parsed['label'] !== '' ) {\n        if ( parsed['justLabel'] ) {\n          justLabelOffset += 1;\n          labels[parsed['label']] = currentLine - justLabelOffset + 1;\n        } else {\n          labels[parsed['label']] = currentLine - justLabelOffset;\n        }\n      }\n\n      currentLine += parsed['instructionWords'];\n    }\n\n    for ( var it = 0; it < lines.length; it++ ) {\n      check = Emulator.checkLine( lines[it], labels );\n      if ( check.length ) {\n        lineErrorCopy[it + 1] = check;\n        // document.getElementById( 'breakpoint ' + ( it + 1 ) ).className = document.getElementById( 'breakpoint ' + ( it + 1 ) ).className + ' error';\n        ranSuccessfully = false;\n      }\n    }\n\n    return [ranSuccessfully, lineErrorCopy];\n  }\n\n// PARSING METHOD\n  parseCode = button => {    \n    const code = this.codeRef.current.state.code;\n\n    this.codeRef.current.checkCode( code, 0, Infinity );\n\n    const lines = code.split( '\\n' );\n    \n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var machineCode = [];\n\n    const check = this.checkCode( code );\n\n    if ( check[0] ) {\n      for ( var i = 0; i < lines.length; i++ ) {\n        parsed = Emulator.parseLineForLabels( lines[i] );\n\n        if ( parsed['label'] !== '' ) {\n          if ( parsed['justLabel'] ) {\n            justLabelOffset += 1;\n            labels[parsed['label']] = currentLine - justLabelOffset + 1;\n          } else {\n            labels[parsed['label']] = currentLine - justLabelOffset;\n          }\n        }\n\n        currentLine += parsed['instructionWords'];\n      }\n\n      for ( var it = 0; it < lines.length; it++ ) {\n        var trimmed = lines[it].trim();\n        if ( trimmed !== '' && trimmed.split( ';' )[0] !== '' ) {\n          parsed = Emulator.parseLineForMachineCode( lines[it], labels );\n          if ( parsed ) {\n            for ( var iter = 0; iter < parsed.length; iter++ ) {\n              if ( Emulator.isValidNumber( Emulator.readSignedHex( parsed[iter] ) ) ) {\n                machineCode.push( parsed[iter] );\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      this.updateAlert( 'Built successfully', 'success' );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n    }\n\n    return machineCode;\n  }\n\n// RUNNING METHODS\n  resetCPUandMemory() {\n    var registersNew = {\n      0 : 0,\n      1 : 0,\n      2 : 0,\n      3 : 0,\n      4 : 0,\n      5 : 0,\n      6 : 0,\n      7 : 0,\n      8 : 0,\n      9 : 0,\n      10 : 0,\n      11 : 0,\n      12 : 0,\n      13 : 0,\n      14 : 0,\n      15 : 0\n    };\n\n    var cpuControlNew = {\n      'pc' : 0,\n      'ir' : 0,\n      'adr' : 0\n    };\n\n    var outputNew = '';\n\n    this.setState( { registers : registersNew, cpuControl : cpuControlNew, output : outputNew } );\n  }\n\n  canRunCode( code, machineCode ) {\n    var error = true;\n\n    if ( machineCode.length !== 0 ) {\n      if ( !machineCode.includes( 0xd000 ) ) {\n        error = 'Cannot run code without a \"trap R0,R0,R0\" instruction';\n      }\n    } else {\n      // machine language is blank\n      error = 'Cannot run no code. Try building then running';\n    }\n    return error;\n  }\n\n  runCode = button => {\n    console.time( 'Time to run' );\n\n    const code = this.codeRef.current.state.code;\n\n    const check = this.checkCode( code );\n    if ( check[0] ) {\n      // implicit build if needed\n      var machineCode = [];\n      machineCode = this.parseCode();\n\n      var canRun = this.canRunCode( code, machineCode );\n      var ran = {\n        halted : false\n      };\n\n      if ( !canRun.length ) {\n        var localControl = this.state.cpuControl;\n        var localRegisters = this.state.registers;\n        var localMemory = Emulator.setMemory( machineCode );\n        var localInput = this.state.input;\n        var localOutput = this.state.output;\n\n        while ( !( ran['halted'] ) ) {\n          ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n          localInput = ran['input'];\n          localOutput = ran['output'];\n        }\n\n        this.memoryOptions( localMemory );\n\n        this.setState( { \n          cpuControl : localControl, \n          registers : localRegisters,\n          memory : localMemory, \n          output : localOutput, \n          \n          outputZoomed : false, \n          runModalShow : true,\n          \n          memoryViewStart : 0\n        } );\n      } else {\n        this.updateAlert( canRun, 'danger' );\n      }\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n    }\n    console.timeEnd( 'Time to run' );\n  }\n\n// INPUT MODAL METHODS\n  setInput = button => {\n    this.setState( { inputModalShow : true } );\n  }\n\n  inputUpdate = textarea => {\n    this.setState( { input : this.inputRef.value } );\n  }\n\n  inputModalClose = modal => {\n    this.setState( { inputModalShow : false } );\n  }\n\n// DOWNLOADING METHODS\n  downloadFile( name, content, mimeType='text/plain' ) {\n    var element = document.createElement( 'a' );\n    element.setAttribute( 'href', 'data:' + mimeType + ';charset=utf-8,' + encodeURIComponent( content ) );\n    element.setAttribute( 'download', name );\n\n    element.style.display = 'none';\n    document.body.appendChild( element );\n\n    element.click();\n\n    document.body.removeChild( element );\n  }\n\n  downloadRaw = button => {\n    const check = this.checkCode( this.codeRef.current.state.code );\n\n    if ( check[0] ) {\n      var textValue = this.state.fileName;\n      if ( !( textValue.endsWith( '.asm.txt' ) ) ) {\n        textValue += '.asm.txt';\n      }\n\n      this.downloadFile( textValue, this.codeRef.current.state.code );\n      this.updateAlert( 'Download successful', 'success' );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var i = 0; i < keys.length; i++ ) {\n        if ( i !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[i];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  downloadRawCompatible() {\n    const check = this.checkCode( this.codeRef.current.state.code );\n\n    var i = 0;\n    var keys;\n    var keysString;\n\n    if ( check[0] ) {\n      const checkCompatible = Emulator.checkCodeIsCompatible( this.codeRef.current.state.code );\n      if ( checkCompatible[0] ) {\n        var textValue = this.state.fileName;\n        if ( !( textValue.endsWith( '.asm.txt' ) ) ) {\n          textValue += '.asm.txt';\n        }\n\n        this.downloadFile( textValue, Emulator.parseCodeToCompatible( this.codeRef.current.state.code ) );\n\n        keys = Object.keys( checkCompatible[1] );\n        if ( keys.length ) {\n          keysString = '';\n\n          for ( i = 0; i < keys.length; i++ ) {\n            if ( i !== 0 ) {\n              keysString += ', ';\n            }\n\n            keysString += keys[i];\n          }\n\n          this.setState( { lineCompWarn : checkCompatible[1], lineCompError : checkCompatible[2] } );\n          this.updateAlert( 'Download shall continue however, some only partially compatible commands in code at line(s): ' + keysString, 'warning' );\n        } else {\n          this.setState( { lineCompWarn : {}, lineCompError : {} } );\n          this.updateAlert( 'Download successful', 'success' );\n        }\n      } else {\n        keys = Object.keys( checkCompatible[2] );\n        keysString = '';\n\n        for ( i = 0; i < keys.length; i++ ) {\n          if ( i !== 0 ) {\n            keysString += ', ';\n          }\n\n          keysString += keys[i];\n        }\n\n        this.setState( { lineCompWarn : checkCompatible[1], lineCompError : checkCompatible[2] } );\n        this.updateAlert( 'Download cannot continue as some fully non compatible commands in code at line(s): ' + keysString, 'danger' );\n      }\n    } else {\n      keys = Object.keys( check[1] );\n      keysString = '';\n\n      for ( i = 0; i < keys.length; i++ ) {\n        if ( i !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[i];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  downloadBinary() {\n    const check = this.checkCode( this.codeRef.current.state.code );\n\n    if ( check[0] ) {\n      var machineCode = this.parseCode();\n\n      var textValue = this.state.fileName;\n      textValue += '.bin';\n\n      var stream = new Uint16Array( machineCode.length );\n      for ( var i = 0; i < machineCode.length; i++ ) {\n        const hiByte = ( machineCode[i] & 0xff00 ) >> 8;\n        const loByte = machineCode[i] & 0x00ff;\n\n        stream[i] = ( loByte << 8 ) | hiByte;\n      }\n\n      var blob = new Blob( [stream] ),\n        url = window.URL.createObjectURL(blob);\n      \n      var element = document.createElement( 'a' );\n      element.setAttribute( 'href', url );\n      element.setAttribute( 'download', textValue );\n\n      element.style.display = 'none';\n\n      document.body.appendChild(element);\n\n      element.click();\n      \n      document.body.removeChild( element );\n\n      this.updateAlert( 'Download successful', 'success' );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var it = 0; it < keys.length; it++ ) {\n        if ( it !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[it];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  downloadHex() {\n    const check = this.checkCode( this.codeRef.current.state.code );\n\n    if ( check[0] ) {\n      var machineCode = this.parseCode();\n      var stream = '';\n\n      for ( var i = 0; i < machineCode.length; i++ ) {\n        stream += 'data $' + Emulator.writeHex( machineCode[i] ) + '\\n';\n      }\n\n      var textValue = this.state.fileName;\n      if ( !( textValue.endsWith( '.asm.txt' ) ) ) {\n        textValue += '.asm.txt';\n      }\n\n      this.downloadFile( textValue, stream );\n      this.updateAlert( 'Download successful', 'success' );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var it = 0; it < keys.length; it++ ) {\n        if ( it !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[it];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  downloadHexCompatible() {\n    const check = this.checkCode( this.codeRef.current.state.code );\n\n    var i = 0;\n    var keys;\n    var keysString;\n\n    if ( check[0] ) {\n      const checkCompatible = Emulator.checkCodeIsCompatible( this.codeRef.current.state.code );\n      if ( checkCompatible[0] ) {\n        var machineCode = this.parseCode();\n        var stream = '';\n\n        for ( i = 0; i < machineCode.length; i++ ) {\n          stream += ' data $' + Emulator.writeHex( machineCode[i] ) + '\\n';\n        }\n\n        var textValue = this.state.fileName;\n        if ( !( textValue.endsWith( '.asm.txt' ) ) ) {\n          textValue += '.asm.txt';\n        }\n\n        this.downloadFile( textValue, stream );\n        this.updateAlert( 'Download successful', 'success' );\n\n        keys = Object.keys( checkCompatible[1] );\n        if ( keys.length ) {\n          keysString = '';\n\n          for ( i = 0; i < keys.length; i++ ) {\n            if ( i !== 0 ) {\n              keysString += ', ';\n            }\n\n            keysString += keys[i];\n          }\n\n          this.setState( { lineCompWarn : checkCompatible[1], lineCompError : checkCompatible[2] } );\n          this.updateAlert( 'Download can continue however, some only partially compatible commands in code at line(s): ' + keysString, 'warning' );\n        } else {\n          this.setState( { lineCompWarn : {}, lineCompError : {} } );\n          this.updateAlert( 'Download successful', 'success' );\n        }\n      } else {\n        keys = Object.keys( checkCompatible[2] );\n        keysString = '';\n\n        for ( i = 0; i < keys.length; i++ ) {\n          if ( i !== 0 ) {\n            keysString += ', ';\n          }\n\n          keysString += keys[i];\n        }\n\n        this.setState( { lineCompWarn : checkCompatible[1], lineCompError : checkCompatible[2] } );\n        this.updateAlert( 'Download cannot continue as some fully non compatible commands in code at line(s): ' + keysString, 'danger' );\n      }\n    } else {\n      keys = Object.keys( check[1] );\n      keysString = '';\n\n      for ( i = 0; i < keys.length; i++ ) {\n        if ( i !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[i];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  fileNameUpdate = textarea => {\n    this.setState( { fileName : textarea.target.value } );\n  }\n\n  fileNameHandleKeyDown = e => {\n    if (e.key === 'Enter') {\n      this.downloadModalClose();\n    }\n  }\n\n  downloadModalClose = modal => {\n    switch ( this.state.downloadAs ) {\n      case 0 :\n        this.downloadRaw();\n        break;\n\n      case 1 :\n        this.downloadRawCompatible();\n        break;\n\n      case 2 :\n        this.downloadBinary();\n        break;\n\n      case 3 :\n        this.downloadHex();\n        break;\n\n      case 4 :\n        this.downloadHexCompatible();\n        break;\n\n      default :\n        this.updateAlert( 'Download cannot continue due to internal website error. Try to contact Jim Carty.', 'danger' );\n        break;\n    }\n\n    this.setState( { downloadModalShow : false } );\n  }\n\n  downloadModalCloseNon = modal => {\n    this.setState( { downloadModalShow : false } );\n  }\n\n  downloadModalOpen = button => {\n    this.setState( { downloadModalShow : true } );\n  }\n\n  downloadModalRadio = value => {\n    this.setState( { downloadAs : value } );\n  }\n\n  getExtension() {\n    var result = '';\n\n    switch ( this.state.downloadAs ) {\n      case 0 :\n        result = '.asm.txt';\n        break;\n\n      case 1 :\n        result = '.asm.txt';\n        break;\n\n      case 2 :\n        result = '.bin';\n        break;\n\n      case 3 :\n        result = '.asm.txt';\n        break;\n\n      case 4 :\n        result = '.asm.txt';\n        break;\n\n      default :\n        this.updateAlert( 'Download cannot continue due to internal website error. Try to contact Jim Carty.', 'danger' );\n    }\n\n    return result;\n  }\n\n// UPLOADING METHODS\n  uploadDisplay = button => {\n    document.getElementById( 'binary-upload' ).click();\n  }\n\n  uploadFile = e => {\n    var reader = new FileReader();\n    reader.onload = () => {\n      var array = new Uint16Array( reader.result )\n      var newCode = '';\n\n      for ( var i = 0; i < array.length; i++ ) {\n        const hiByte = ( array[i] & 0xff00 ) >> 8;\n        const loByte = array[i] & 0x00ff;\n\n        newCode += 'data $' + Emulator.writeHex( ( loByte << 8 ) | hiByte );\n        if ( i !== ( array.length - 1 ) ) {\n          newCode += '\\n'\n        }\n      }\n\n      this.codeRef.current.setState( { code : newCode } );\n    }\n\n    reader.readAsArrayBuffer( e.target.files[0] );\n  }\n\n// RENDER\n  render() {\n    if ( localStorage.getItem( 'theme' ) !== null ) {\n      document.body.classList.replace( localStorage.getItem( 'theme' ) === 'light' ? 'dark' : 'light', localStorage.getItem( 'theme' ) );\n    } else {\n      document.body.classList.add( 'light' );\n\n      localStorage.setItem( 'theme', 'light' );\n    }\n    \n    return(\n      <React.Fragment>\n        <NavBar onClick={this.saveStorage} pathname={'/#' + this.props.location.pathname} />\n        <Modal\n          show={this.state.runModalShow}\n          onHide={this.runModalClose}\n          dialogClassName=\"runmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Program Register and Memory Values\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            { !( this.state.outputZoomed ) &&\n              <Row>\n                <Col>\n                  <h6>\n                    Control/Registers\n                  </h6>\n                </Col>\n                <Col>\n                  <h6>\n                    Memory/Output\n                  </h6>\n                </Col>\n              </Row>\n            }\n            <Row>\n              { !( this.state.outputZoomed ) &&\n                <Col className='runmodal-left-col'>\n                  <div id='control-column' className='control-column'>\n                    {this.controlColumn()}\n                  </div>\n                  <div id='register-column' className='register-column'>\n                    {this.registerColumn()}\n                  </div>\n                </Col>\n              }\n              <Col>\n                { !( this.state.outputZoomed ) &&\n                  <React.Fragment>\n                    {this.memoryColumn()}\n                  </React.Fragment>\n                }\n                <div id='output-column' className='output-column'>\n                  {this.outputColumn()}\n                </div>\n              </Col>\n            </Row>\n          </Modal.Body>\n        </Modal>\n\n        <Modal\n          show={this.state.inputModalShow}\n          onHide={this.inputModalClose}\n          dialogClassName=\"inputmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Set Input\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className='input-modal-column'>\n              <InputGroup\n                as='textarea'\n                className='input-modal-input'\n                value={this.state.input}\n                onChange={this.inputUpdate}\n                ref={ ref => { this.inputRef = ref; } }\n                autoFocus/>\n            </div>\n            <div style={{paddingTop : '15px'}}>\n              <Button variant='outline-secondary' onClick={this.inputModalClose} style={{float : 'right'}}>\n                Set Input\n              </Button>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <Modal\n          show={this.state.downloadModalShow}\n          onHide={this.downloadModalCloseNon}\n          dialogClassName=\"downloadmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Export As...\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className='export-choices' style={{paddingBottom : '15px'}}>\n              <ToggleButtonGroup \n                type='radio' \n                name='export-choices' \n                defaultValue={this.state.downloadAs} \n                onChange={this.downloadModalRadio}>\n                <ToggleButton variant='outline-secondary' value={0}>\n                  Raw\n                </ToggleButton>\n                <ToggleButton variant='outline-secondary' value={1}>\n                  Raw compatible\n                </ToggleButton>\n                <ToggleButton variant='outline-secondary' value={2}>\n                  Binary\n                </ToggleButton>\n                <ToggleButton variant='outline-secondary' value={3}>\n                  Hex\n                </ToggleButton>\n                <ToggleButton variant='outline-secondary' value={4}>\n                  Hex compatible\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </div>\n            <InputGroup className='download-modal-column'>\n              <FormControl\n                id='download-modal-download'\n                value={this.state.fileName}\n                onChange={this.fileNameUpdate}\n                onKeyDown={this.fileNameHandleKeyDown}\n                autoFocus/>\n              <InputGroup.Append>\n                <InputGroup.Text>{this.getExtension()}</InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n            <div style={{paddingTop : '15px'}}>\n              <OverlayTrigger\n                key={`download-tooltip`}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    {`Download also started by pressing enter in file name field`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' onClick={this.downloadModalClose} style={{float : 'right'}}>\n                  <FaDownload/> Download \n                </Button>\n              </OverlayTrigger>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <div className='mainbody'>\n          <Alert variant={this.state.alertNature} onClose={this.closeAlert} show={this.state.alertShow} dismissible>\n            <p className='alertbody'>\n              {this.state.alertMessage}\n            </p>\n          </Alert>\n          <Row className='buttontoolbar'>\n            <Col>\n              <ButtonGroup>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Set input`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.setInput}>\n                    <FaPen/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Build`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.parseCode}>\n                    <FaHammer/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.runCode}>\n                    <FaPlay/>\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n            </Col>\n            <Col>\n              { this.codeRef.current &&\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Disable all breakpoints`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.codeRef.current.disableBreakpoints}>\n                    <FaTimes/>\n                  </Button>\n                </OverlayTrigger>\n              }\n              {' '}\n              <a href='/#/debug' onClick={this.saveStorage}>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run in debug mode`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm'>\n                    <FaBug/>\n                  </Button>\n                </OverlayTrigger>\n              </a>\n            </Col>\n            <Col>\n              <ButtonGroup>\n                <OverlayTrigger\n                  key={`export-tooltip`}\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Download current code as is`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size ='sm' onClick={this.downloadRaw}>\n                    <FaDownload/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  key={`export-choices-tooltip`}\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Download current code \n                      chunk in different formats`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size ='sm' onClick={this.downloadModalOpen}>\n                    <FaChevronDown/>\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n              {' '}\n              <input\n                type='file'\n                id='binary-upload'\n                onChange={this.uploadFile}\n                style={{display : 'none'}}\n                accept='.bin'/>\n              <OverlayTrigger\n                key={`upload-tooltip`}\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Upload a .bin file`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.uploadDisplay}>\n                  <FaUpload/>\n                </Button>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <CodeChunk \n                ref={this.codeRef}\n                code={this.state.code} \n                breakpoints={this.state.breakpoints}\n                lineCompWarn={this.state.lineCompWarn} \n                lineCompError={this.state.lineCompError}\n                alertShow={this.state.alertShow}\n                readOnly={false} />\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","/*\n  Copyright Jim Carty © 2020\n\n  This file is subject to the terms and conditions defined in file 'LICENSE.txt', which is part of this source code package.\n*/\n\nimport React from 'react';\n\nimport './ProgramDebugView.css';\n\nimport { Alert, Button, ButtonGroup, Col, Collapse, Dropdown, InputGroup, Modal, OverlayTrigger, Row, Tooltip } from 'react-bootstrap';\nimport { FaBackward, FaEye, FaEyeSlash, FaMinus, FaPen, FaPlay, FaStepForward, FaTimes } from 'react-icons/fa';\n\nimport * as Emulator from './utils/Emulator';\n\nimport { CustomToggle, CustomMenu } from './utils/CustomDropdown';\nimport CodeChunk from './utils/CodeChunk';\nimport NavBar from './NavBar';\n\nconst _ = require( 'underscore' );\n\nexport default class ProgramDebugView extends React.Component {\n// CLASS METHODS \n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n\n      alertShow : false,\n      alertMessage : '',\n      alertNature : 'success',\n\n      inputModalShow : false,\n\n      machineCode : [],\n\n      registers : {\n        0 : 0,\n        1 : 0,\n        2 : 0,\n        3 : 0,\n        4 : 0,\n        5 : 0,\n        6 : 0,\n        7 : 0,\n        8 : 0,\n        9 : 0,\n        10 : 0,\n        11 : 0,\n        12 : 0,\n        13 : 0,\n        14 : 0,\n        15 : 0\n      },\n      cpuControl : {\n        'pc' : 0,\n        'ir' : 0,\n        'adr' : 0\n      },\n\n      memory : {},\n\n      output : '',\n\n      input : '',\n\n      memoryViewStart : 0,\n      memoryViewOptions : [0, 0x500], // generic values so it doesnt break if something goes catastrophically wrong\n\n      // special methods for debugging\n      lastLine : 0,\n      activeLine : 0,\n\n      lastLineScrollPosition : 0,\n      lastLineScrollPositionMemory : 0,\n\n      updateScrollPositionCode : true,\n      updateScrollPositionMemory : true,\n\n      breakpointsMachineCode : [],\n\n      halted : false,\n\n      inputRan : '',\n\n      memoryToLine : {},\n      lineToMemory : {},\n\n      changedRegisters : [],\n      changedMemory : [],\n\n      showCodeChunk : true,\n\n      outputModalShow : false\n    };\n\n    this.inputRef = React.createRef();\n    this.codeRef = React.createRef();\n    this.breakpointCallback = this.breakpointCallback.bind( this );\n    this.createLineNumberColumn = this.createLineNumberColumn.bind( this );\n  }\n\n  componentDidMount() {\n    var propsState = {};\n\n    if ( sessionStorage.getItem( 'code' ) !== null ) {\n      propsState = {\n        code : sessionStorage.getItem( 'code' ),\n        input : sessionStorage.getItem( 'input' ),\n        breakpoints : sessionStorage.getItem( 'breakpoints' ).split( ',' ).map(\n          breakpointString => {\n            return( Number( breakpointString ) );\n          }\n        ),\n        inputRan : sessionStorage.getItem( 'input' )\n      };\n\n      this.codeRef.current.setState( propsState );\n    } else if ( this.props.code !== undefined ) {\n      propsState = Object.assign( {}, this.props );\n      propsState['inputRan'] = this.props.input;\n\n      this.codeRef.current.setState( this.props );\n    }\n\n    if ( propsState !== {} ) {\n      const machineCode = this.parseCode( propsState['code'], propsState['breakpoints'] );\n      propsState['memory'] = Emulator.setMemory( machineCode );\n\n      this.memoryOptions( propsState['memory'] );\n    }\n\n    this.setState( propsState );\n  }\n\n  saveStorage = e => {\n    sessionStorage.setItem( 'code', this.state.code );\n    sessionStorage.setItem( 'input', this.state.input );\n    sessionStorage.setItem( 'breakpoints', this.state.breakpoints );\n  }\n\n// ALERT METHODS\n  updateAlert( message, nature ) {\n    this.setState( { alertMessage : message, alertNature : nature, alertShow : true } );\n  }\n\n  closeAlert = alert => {\n    this.setState( { alertShow : false } );\n  }\n\n// BREAKPOINT CALLBACK\n  async breakpointCallback( breakpoints ) {\n    this.setState( { breakpoints : breakpoints } );\n\n    this.parseForBreakpoints( this.state.code, breakpoints );\n  }\n\n// REGISTER/MEMORY METHODS\n  controlColumn() {\n    var controls = [];\n    var controlKeys = Object.keys( this.state.cpuControl );\n\n    for ( var i = 0; i < controlKeys.length; i++ ) {\n      controls.push( \n        <div \n          key={'control ' + controlKeys[i]}\n          id={'control ' + controlKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{controlKeys[i]}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n                ${Emulator.writeHex( this.state.cpuControl[controlKeys[i]] )}\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return controls;\n  }\n  //\n  inputColumn() {\n    return ( \n      <div style={{height:'100%', width:'100%'}}>\n        <InputGroup \n          className='input-area'\n          as='textarea'\n          value={this.state.inputRan}\n          disabled/>\n      </div>\n    );\n  } \n  //\n  registerColumn() {\n    var registers = [];\n\n    for ( var i = 0; i < 16; i++ ) {\n      var classNameRegister = 'systeminfo-column-elem';\n\n      if ( this.state.changedRegisters.includes( String( i ) ) ) classNameRegister += ' changed';\n\n      registers.push( \n        <div \n          key={'register ' + i}\n          id={'register ' + i}\n          className={classNameRegister}>\n          <Row>\n            <Col>\n              <strong>{'R'+i}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.registers[i] )}/{ Emulator.readSignedHex( this.state.registers[i] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.registers[i] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return registers;\n  }\n  //\n  outputColumn() { \n    // called here since after 'memory-column-big' is made\n    if ( this.state.updateScrollPositionMemory && document.getElementById( 'memory-column-big' ) ) {\n      const memoryParent = document.getElementById( 'memory-column-big' );\n      memoryParent.scrollTo( 0, this.state.lastLineScrollPositionMemory );\n    }\n\n    return ( \n      <div\n        className='output-area debug'\n        onDoubleClick={this.outputModalOpen}>\n        {this.state.output}\n      </div>\n    );\n  }\n  //\n  memoryOptions( memory ) {\n    const memoryKeys = Object.keys( memory ).map( key => Number( key ) );\n\n    const interval = 0x500;\n\n    var memoryViewOptions = [0];\n    var memorykeyindex = 0;\n\n    while ( true ) {\n      if ( memoryKeys[memorykeyindex + interval] ) {\n        memoryViewOptions.push( memoryKeys[memorykeyindex + interval] );\n        memorykeyindex += interval;\n      } else {\n        if ( !( memoryViewOptions.includes( memoryKeys[memoryKeys.length - 1] + 1 ) ) ) {\n          memoryViewOptions.push( memoryKeys[memoryKeys.length - 1] + 1 );\n        }\n        break;\n      }\n    }\n\n    this.setState( { memoryViewOptions : memoryViewOptions } );\n  }\n\n  memoryViewPrev = e => {\n    this.setState( prevState => ( { \n      memoryViewStart : prevState.memoryViewStart - 1\n    } ) );\n  }\n\n  memoryViewNext = e => {\n    this.setState( prevState => ( { \n      memoryViewStart : prevState.memoryViewStart + 1\n    } ) );\n  }\n\n  handleMemoryViewChange = e => {\n    this.setState( { \n      memoryViewStart : Number( e )\n    } );\n  }\n\n  memoryColumn() {\n    var memoryValues = [];\n    var memoryKeys = Object.keys( this.state.memory ).map( key => Number( key ) );\n\n    for ( var i = memoryKeys.indexOf( this.state.memoryViewOptions[this.state.memoryViewStart] ); i < memoryKeys.length && memoryKeys[i] < this.state.memoryViewOptions[this.state.memoryViewStart + 1]; i++ ) {\n      var classNameMemory = 'systeminfo-column-elem';\n      var decoration = '';\n      \n      if ( memoryKeys[i] === this.state.lastLine && this.state.lastLine !== this.state.activeLine ) { \n        classNameMemory = 'systeminfo-column-elem last';\n      } else if ( memoryKeys[i] === this.state.activeLine && !( this.state.halted ) ) { \n        classNameMemory = 'systeminfo-column-elem active';\n      }\n\n      if ( this.state.breakpointsMachineCode.includes( memoryKeys[i] ) ) decoration = 'underline';\n      if ( this.state.changedMemory.includes( String( memoryKeys[i] ) ) ) classNameMemory += ' changed';\n\n      memoryValues.push( \n        <div \n          key={'memory ' + memoryKeys[i]}\n          id={'memory ' + memoryKeys[i]}\n          className={classNameMemory}>\n          <Row style={{textDecoration : decoration}}>\n            <Col className={classNameMemory}>\n              <strong>${Emulator.writeHex( memoryKeys[i] )}</strong>\n            </Col>\n            <Col className={classNameMemory} style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.memory[memoryKeys[i]] ) }/{ Emulator.readSignedHex( this.state.memory[memoryKeys[i]] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.memory[memoryKeys[i]] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return (\n      <div id='memory-column-big' className='memory-column big'>\n        <div className='memory-search'>\n          <Row>\n            <Col>\n              { this.state.memoryViewStart === 0 ?\n                <span className='documentation-page-link disabled'>\n                  &#x25C0;\n                </span>\n              :\n                <span className='documentation-page-link' onClick={this.memoryViewPrev}>\n                  &#x25C0;\n                </span>\n              }\n            </Col>\n            <Col style={{ display : 'contents' }}>\n              <Dropdown onSelect={this.handleMemoryViewChange}>\n                <Dropdown.Toggle as={CustomToggle} id='dropdown-custom-components'>\n                  {Emulator.writeHex( this.state.memoryViewOptions[this.state.memoryViewStart] )}-{Emulator.writeHex( this.state.memoryViewOptions[this.state.memoryViewStart + 1] - 1 )}\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu as={CustomMenu}>\n                  { this.state.memoryViewOptions.map( \n                      option => {\n                        const index = this.state.memoryViewOptions.indexOf( option );\n\n                        if ( index !== ( this.state.memoryViewOptions.length - 1 ) ) {\n                          return (\n                            <Dropdown.Item key={option} eventKey={index} active={index === this.state.memoryViewStart} className='text-center'>\n                              {Emulator.writeHex( option )}-{Emulator.writeHex( this.state.memoryViewOptions[index + 1] - 1 )}\n                            </Dropdown.Item>\n                          );\n                        } else {\n                          return ( \n                            <React.Fragment key={option} />\n                          );\n                        }\n                      }\n                    )\n                  }\n                </Dropdown.Menu>\n              </Dropdown>\n            </Col>\n            <Col>\n              <div style={{ float : 'right' }}>\n                { this.state.memoryViewStart + 1 === ( this.state.memoryViewOptions.length - 1 ) ?\n                  <span className='documentation-page-link disabled'>\n                    &#x25B6;\n                  </span>\n                :\n                  <span className='documentation-page-link' onClick={this.memoryViewNext}>\n                    &#x25B6;\n                  </span>\n                }\n              </div>\n            </Col>\n          </Row>\n        </div>\n        <div style={{ height : '25px' }} />\n        <div>\n          {memoryValues}\n        </div>\n      </div>\n    );\n  }\n\n// CODE CHUNK METHODS\n  createLineNumberColumn( onClickHandler ) {\n    var linesOfCode = this.state.code.split( '\\n' ).length;\n    var result = [];\n\n    for ( var i = 0; i < linesOfCode; i++ ) {\n      var yOffset = 25 * ( i + 0.5 );\n\n      if ( this.state.lineToMemory[i] ) {\n        var parsedMachineCodeStringStart = Emulator.writeHex( this.state.lineToMemory[i][0] );\n        var parsedMachineCodeStringCodes = Emulator.writeHex( this.state.memory[ this.state.lineToMemory[i][0] ] );\n\n        if ( this.state.lineToMemory[i][1] ) {\n          parsedMachineCodeStringStart += ', ' + Emulator.writeHex( this.state.lineToMemory[i][1] );\n          parsedMachineCodeStringCodes += ', ' + Emulator.writeHex( this.state.memory[ this.state.lineToMemory[i][1] ] );\n        }\n\n        var parsedMachineCodeString = parsedMachineCodeStringStart + ' | ' + parsedMachineCodeStringCodes;\n\n        result.push(\n          <OverlayTrigger\n            key={'line-number-tooltip' + ( i + 1 )}\n            placement={'right'}\n            overlay={\n              <Tooltip>\n                {parsedMachineCodeString}\n              </Tooltip>\n            }>\n            <div\n              key={'line-number ' + ( i + 1 )} \n              className='line-number'\n              style={{top : yOffset}}\n              onClick={onClickHandler}>\n              {i + 1}\n            </div>\n          </OverlayTrigger>\n        );\n\n      } else {\n        // if an empty line in memory, don't create a tooltip\n        result.push(\n          <div\n            key={'line-number ' + ( i + 1 )} \n            className='line-number'\n            style={{top : yOffset}}\n            onClick={onClickHandler}>\n            {i + 1}\n          </div>\n        );\n      }\n    }\n\n    return result;\n  }\n\n  toggleCodeChunk = button => {\n    this.setState( prevState => ( {\n      showCodeChunk : !( prevState.showCodeChunk )\n    } ) );\n  }\n\n// LINE OVERLAY METHODS\n  setLastLineScrollPosition( lastLine ) {\n    const lastLineInCode = this.state.memoryToLine[ lastLine ];\n\n    const heightOfOverlay = lastLineInCode * 25;\n\n    var i = this.state.memoryViewStart;\n\n    if ( this.state.memoryViewStart !== this.state.memoryViewOptions.length - 1 && lastLine > this.state.memoryViewOptions[this.state.memoryViewStart + 1] ) {\n      for ( i = this.state.memoryViewStart; i < this.state.memoryViewOptions.length - 1; i++ ) {\n        if ( lastLine <= this.state.memoryViewOptions[i + 1] ) {\n          break;\n        }\n      }\n    }\n\n    this.setState( { \n      lastLineScrollPosition : heightOfOverlay,\n      lastLineScrollPositionMemory : lastLine * 24,\n      memoryViewStart : i\n    } );\n  }\n\n  toggleFollowCode = e => {\n    this.setState( prevState => ( { \n      updateScrollPositionCode : !( prevState.updateScrollPositionCode ) \n    } ) );\n  }\n\n  toggleFollowMemory = e => {\n    this.setState( prevState => ( { \n      updateScrollPositionMemory : !( prevState.updateScrollPositionMemory ) \n    } ) );\n  }\n\n// CHECKING METHOD\n  checkCode( code ) {\n    var lines = code.toLowerCase().split( '\\n' );\n    var check;\n\n    var lineErrorCopy = {};\n\n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var ranSuccessfully = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      parsed = Emulator.parseLineForLabels( lines[i] );\n\n      if ( parsed['label'] !== '' ) {\n        if ( parsed['justLabel'] ) {\n          justLabelOffset += 1;\n          labels[parsed['label']] = currentLine - justLabelOffset + 1;\n        } else {\n          labels[parsed['label']] = currentLine - justLabelOffset;\n        }\n      }\n\n      currentLine += parsed['instructionWords'];\n    }\n\n    for ( var it = 0; it < lines.length; it++ ) {\n      check = Emulator.checkLine( lines[it], labels );\n      if ( check.length ) {\n        lineErrorCopy[it + 1] = check;\n        ranSuccessfully = false;\n      }\n    }\n\n    return [ranSuccessfully, lineErrorCopy];\n  }\n\n// PARSING METHOD\n  parseCode( code, breakpoints ) {\n    var lines = code.split( '\\n' );\n    \n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var machineCode = [];\n\n    var check = this.checkCode( code );\n\n    if ( check[0] ) {\n      for ( var i = 0; i < lines.length; i++ ) {\n        parsed = Emulator.parseLineForLabels( lines[i] );\n\n        if ( parsed['label'] !== '' ) {\n          if ( parsed['justLabel'] ) {\n            justLabelOffset += 1;\n            labels[parsed['label']] = currentLine - justLabelOffset + 1;\n          } else {\n            labels[parsed['label']] = currentLine - justLabelOffset;\n          }\n        }\n\n        currentLine += parsed['instructionWords'];\n      }\n\n      var nextLineBreakpoint = false;\n      var breakpointsMachineCode = [];\n\n      var memoryToLine = {};\n      var lineToMemory = {};\n\n      for ( var it = 0; it < lines.length; it++ ) {\n        var trimmed = lines[it].trim();\n\n        if ( breakpoints.includes( it+1 ) ) nextLineBreakpoint = true; \n\n        if ( trimmed !== '' && trimmed.split( ';' )[0] !== '' ) {\n          parsed = Emulator.parseLineForMachineCode( lines[it], labels );\n          if ( parsed ) {\n            var mcLengthBefore = machineCode.length;\n            for ( var iter = 0; iter < parsed.length; iter++ ) {\n              if ( Emulator.isValidNumber( Emulator.readSignedHex( parsed[iter] ) ) ) {\n                if ( nextLineBreakpoint ) {\n                  breakpointsMachineCode.push( mcLengthBefore );\n                  nextLineBreakpoint = false;\n                }\n\n                memoryToLine[mcLengthBefore] = it;\n                if ( lineToMemory[it] === undefined ) lineToMemory[it] = [];\n                lineToMemory[it].push( machineCode.length );\n\n                machineCode.push( parsed[iter] );\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      this.setState( { \n        machineCode : machineCode, \n        breakpointsMachineCode : breakpointsMachineCode, \n        memoryToLine : memoryToLine, \n        lineToMemory : lineToMemory\n      } );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n      this.setState( { halted : true } );\n    }\n\n    return machineCode;\n  }\n\n  parseForBreakpoints( code, breakpoints ) {\n    var check = this.checkCode( code );\n\n    if ( check[0] ) {\n      var linesOfCode = code.split( '\\n' ).length;\n\n      var breakpointsMachineCode = [];\n\n      for ( var i = 0; i < breakpoints.length; i++ ) {\n        for ( var it = 0; it < linesOfCode; it++ ) {\n          if ( ( it + 1 ) >= breakpoints[i] && this.state.lineToMemory[it] ) {\n            breakpointsMachineCode.push( this.state.lineToMemory[it][0] );\n            break;\n          }\n        }\n      }\n\n      this.setState( { breakpointsMachineCode : breakpointsMachineCode } );\n    } else {\n      var keys = Object.keys( check[1] )\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', '\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n      this.setState( { halted : true } );\n    }\n  }\n\n// RUNNING METHODS\n  resetCPUandMemory() {\n    var registersNew = {\n      0 : 0,\n      1 : 0,\n      2 : 0,\n      3 : 0,\n      4 : 0,\n      5 : 0,\n      6 : 0,\n      7 : 0,\n      8 : 0,\n      9 : 0,\n      10 : 0,\n      11 : 0,\n      12 : 0,\n      13 : 0,\n      14 : 0,\n      15 : 0\n    };\n\n    var cpuControlNew = {\n      'pc' : 0,\n      'ir' : 0,\n      'adr' : 0\n    };\n\n    var outputNew = '';\n\n    var memoryNew = Emulator.setMemory( this.state.machineCode );\n\n    this.memoryOptions( memoryNew );\n\n    this.setState( { \n      cpuControl : cpuControlNew,\n      registers : registersNew,\n      memory : memoryNew,\n      output : outputNew,\n      changedRegisters : [],\n      changedMemory : []\n    } );\n  }\n\n  canRunCode( code, machineCode ) {\n    var error = true;\n\n    if ( machineCode.length !== 0 ) {\n      if ( !machineCode.includes( 0xd000 ) ) {\n        error = 'Cannot run code without a \"trap R0,R0,R0\" instruction. Can step-through. Restart execution to do so';\n      }\n    } else {\n      // machine language is blank\n      error = 'Cannot run no code. Try building then running';\n    }\n    return error;\n  }\n\n  runCode = button => {\n    var canRun = this.canRunCode( this.state.code, this.state.machineCode );\n    var ran = {\n      halted : false\n    };\n\n    if ( !canRun.length ) {\n      var localControl = this.state.cpuControl;\n      var localRegisters = this.state.registers;\n      var localMemory = this.state.memory;\n      var localInput = this.state.inputRan;\n      var localOutput = this.state.output;\n\n      var lastRanLine = this.state.activeLine;\n\n      const initialRegisters = Object.assign( {}, this.state.registers );\n      const initialMemory = Object.assign( {}, this.state.memory );\n\n      var encounteredBreakpoint = false;\n\n      while ( !( ran['halted'] ) && !encounteredBreakpoint ) {\n        if ( ran['control'] !== undefined ) {\n          lastRanLine = ran['control']['pc'];\n        }\n\n        ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n        localInput = ran['input'];\n        localOutput = ran['output'];\n        \n        if ( this.state.breakpointsMachineCode.includes( ran['control']['pc'] ) ) {\n          encounteredBreakpoint = true;\n        }\n      }\n\n      this.memoryOptions( localMemory );\n\n      this.setLastLineScrollPosition( lastRanLine );\n\n      this.setState( prevState => ( { \n        cpuControl : localControl, \n        registers : localRegisters, \n        memory : localMemory, \n        inputRan : localInput, \n        output : localOutput, \n        lastLine : lastRanLine,\n        activeLine : localControl['pc'],\n        halted : ran['halted'],\n\n        changedRegisters : Object.keys( _.omit( localRegisters, function( v, k ) { return initialRegisters[k] === v; } ) ),\n        changedMemory : Object.keys( _.omit( localMemory, function( v, k ) { return initialMemory[k] === v; } ) )\n      } ) );\n\n    } else {\n      this.updateAlert( canRun, 'danger' );\n      this.setState( { halted : true } );\n    }\n  }\n\n  stepForward = button => {\n    var ran;\n\n    if ( this.state.machineCode.length !== 0 ) {\n      var localControl = this.state.cpuControl;\n      var localRegisters = this.state.registers;\n      var localMemory = this.state.memory;\n      var localInput = this.state.inputRan;\n      var localOutput = this.state.output;\n\n      const initialRegisters = Object.assign( {}, this.state.registers );\n      const initialMemory = Object.assign( {}, this.state.memory );\n\n      ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n      localInput = ran['input'];\n      localOutput = ran['output'];\n\n      this.memoryOptions( localMemory );\n\n      this.setLastLineScrollPosition( this.state.activeLine );\n\n      this.setState( prevState => ( { \n        cpuControl : localControl, \n        registers : localRegisters, \n        memory : localMemory, \n        inputRan : localInput, \n        output : localOutput, \n        lastLine : prevState.activeLine,\n        activeLine : localControl['pc'],\n        halted : ran['halted'],\n\n        changedRegisters : Object.keys( _.omit( localRegisters, function( v, k ) { return initialRegisters[k] === v; } ) ),\n        changedMemory : Object.keys( _.omit( localMemory, function( v, k ) { return initialMemory[k] === v; } ) )\n      } ) );\n    } else {\n      // machine language is blank\n      this.updateAlert( 'Cannot run no code. Try building then running', 'danger' );\n      this.setState( { halted : true } );\n    }\n  }\n\n  resetDebug = button => {\n    this.resetCPUandMemory();\n\n    this.setLastLineScrollPosition( 0 );\n\n    this.setState( prevState => ( { \n      memory : Emulator.setMemory( prevState.machineCode ),\n      inputRan : prevState.input,\n      lastLine : 0,\n      activeLine : 0,\n      halted : false,\n      memoryViewStart : 0\n    } ) );\n  }\n\n// MODAL METHODS\n  setInput = e => {\n    this.setState( { inputModalShow : true } );\n  }\n\n  inputUpdate = e => {\n    this.setState( { input : this.inputRef.value, inputRan : this.inputRef.value } );\n  }\n\n  inputModalClose = e => {\n    this.setState( { inputModalShow : false } );\n  }\n\n  outputModalOpen = e => {\n    this.setState( { outputModalShow : true } );\n  }\n\n  outputModalClose = e => {\n    this.setState( { outputModalShow : false } );\n  }\n\n// RENDER\n  render() {\n    if ( localStorage.getItem( 'theme' ) !== null ) {\n      document.body.classList.replace( localStorage.getItem( 'theme' ) === 'light' ? 'dark' : 'light', localStorage.getItem( 'theme' ) );\n    } else {\n      document.body.classList.add( 'light' );\n\n      localStorage.setItem( 'theme', 'light' );\n    }\n    \n    const activeLineInCode = this.state.memoryToLine[ this.state.activeLine ];\n    const lastLineInCode = this.state.memoryToLine[ this.state.lastLine ];\n    \n    var activeHeightOfOverlay = undefined;\n    var lastHeightOfOverlay = undefined;\n\n    if ( this.state.lastLine !== this.state.activeLine ) {\n      lastHeightOfOverlay = ( ( lastLineInCode ) * 25 ) + ( 4 ); // 4 for border\n    }\n\n    if ( !( this.state.halted ) ) {\n      activeHeightOfOverlay = ( ( activeLineInCode ) * 25 ) + ( 4 ); // 4 for border\n    }\n\n    return(\n      <React.Fragment>\n        <NavBar onClick={this.saveStorage} pathname={'/#' + this.props.location.pathname} />\n        \n        <Modal\n          show={this.state.inputModalShow}\n          onHide={this.inputModalClose}\n          dialogClassName=\"inputmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Set Input\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className='input-modal-column'>\n              <InputGroup\n                as='textarea'\n                className='input-modal-input'\n                value={this.state.input}\n                onChange={this.inputUpdate}\n                ref={ ref => { this.inputRef = ref; } }\n                autoFocus/>\n            </div>\n            <div style={{paddingTop : '15px'}}>\n              <Button variant='outline-secondary' onClick={this.inputModalClose} style={{float : 'right'}}>\n                Set Input\n              </Button>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <Modal\n          show={this.state.outputModalShow}\n          onHide={this.outputModalClose}\n          dialogClassName=\"outputmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Output\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div onDoubleClick={this.outputModalClose} className='output-column' style={{height:'518px', width:'100%'}}>\n              <div className='output-area' style={{height : '508px'}}>\n                {this.state.output}\n              </div>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <div className=\"mainbody\">\n          <Alert variant={this.state.alertNature} onClose={this.closeAlert} show={this.state.alertShow} dismissible>\n            <p className='alertbody'>\n              {this.state.alertMessage}\n            </p>\n          </Alert>\n          <Row className='buttontoolbar'>\n            <Col>\n              <ButtonGroup>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Set input`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.setInput}>\n                    <FaPen/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Step Forward`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.stepForward} disabled={this.state.halted}>\n                    <FaStepForward/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run till next breakpoint`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.runCode} disabled={this.state.halted}>\n                    <FaPlay/>\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n            </Col>\n            <Col>\n              { this.codeRef.current &&\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Disable all breakpoints`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.codeRef.current.disableBreakpoints}>\n                    <FaTimes/>\n                  </Button>\n                </OverlayTrigger>\n              }\n              {' '}\n              <OverlayTrigger\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Rerun`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.resetDebug}>\n                  <FaBackward/>\n                </Button>\n              </OverlayTrigger>\n              {' '}\n              <OverlayTrigger\n                key={`follow-memory-tooltip`}\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Follow memory execution`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.toggleFollowMemory}>\n                  { this.state.updateScrollPositionMemory ?\n                    <FaEye/>\n                  :\n                    <FaEyeSlash/>\n                  }\n                </Button>\n              </OverlayTrigger>\n            </Col>\n            <Col>\n              <OverlayTrigger\n                key={`hide-code-tooltip`}\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Hide the code chunk`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.toggleCodeChunk} active={!(this.state.showCodeChunk)}>\n                  <FaMinus/>\n                </Button>\n              </OverlayTrigger>\n              {' '}\n              <OverlayTrigger\n                key={`follow-code-tooltip`}\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Follow code execution`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.toggleFollowCode}>\n                  { this.state.updateScrollPositionCode ?\n                    <FaEye/>\n                  :\n                    <FaEyeSlash/>\n                  }\n                </Button>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h6>\n                Control/Registers/Input\n              </h6>\n            </Col>\n            <Col>\n              <h6>\n                Memory/Output\n              </h6>\n            </Col>\n            { this.state.showCodeChunk &&\n              <Col>\n                <h6>\n                  Code ( read-only )\n                </h6>\n              </Col>\n            }\n          </Row>\n          <Row>\n            <Col className='runmodal-left-col'>\n              <div id='control-column' className='control-column'>\n                {this.controlColumn()}\n              </div>\n              <div id='register-column' className='register-column'>\n                {this.registerColumn()}\n              </div>\n              <div id='input-column-viewing' className='input-column viewing'>\n                {this.inputColumn()}\n              </div>\n            </Col>\n            <Col style={{borderRight:'2px solid #eaeef3'}}>\n              {this.memoryColumn()}\n              <div id='output-column-viewing' className='output-column viewing' onDoubleClick={this.resizeOutput}>\n                {this.outputColumn()}\n              </div>\n            </Col>\n            <Collapse in={this.state.showCodeChunk}>\n              <Col>\n                  <div id='code-area-wrapper' className='code-area-wrapper'>\n                    <CodeChunk \n                      ref={this.codeRef}\n                      code={this.state.code} \n                      breakpoints={this.state.breakpoints}\n                      alertShow={this.state.alertShow}\n                      readOnly={true}\n                      className=' viewing'\n                      codeMirrorClassName=' debug'\n                      breakpointCallback={this.breakpointCallback}\n                      lineNumbersMethod={this.createLineNumberColumn}\n                      activeHeight={activeHeightOfOverlay}\n                      lastHeight={lastHeightOfOverlay}\n                      lineToScrollTo={this.state.updateScrollPositionCode ? this.state.lastLineScrollPosition : undefined} />\n                  </div>\n              </Col>\n            </Collapse>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport { HashRouter, Switch } from 'react-router-dom';\n\nimport AppliedRoute from './AppliedRoute';\nimport HomeView from './components/HomeView';\nimport DocumentationView from './components/DocumentationView';\nimport ProgramEditorView from './components/ProgramEditorView';\nimport ProgramDebugView from './components/ProgramDebugView';\n\nexport default class App extends React.Component {\n  constructor( props ) {\n    super( props );\n\n    this.state = {};\n\n    // the default program that takes up the code chunk\n    this.state.code = `lea r1,2[r0]\nlea r2,buffer[r0]\nload r3,buffersize[r0]\n\ntrap r1,r2,r3\n\ntrap r0,r0,r0\n\nbuffersize data 13\nbuffer data $0048\n  data $0065\n  data $006c\n  data $006c\n  data $006f\n  data $002c\n  data $0020\n  data $0057\n  data $006f\n  data $0072\n  data $006c\n  data $0064\n  data $0021`;\n\n    this.state.breakpoints = [];\n    this.state.input = '';\n\n  }\n  render() {\n    var stateCode = this.state.code;\n    var stateBreakpoints = this.state.breakpoints;\n    var stateInput = this.state.input;\n\n    return (\n      <React.Fragment>\n        <HashRouter>\n          <Switch>\n            <AppliedRoute exact path=\"/\" component={HomeView} props={{code : stateCode, breakpoints : stateBreakpoints, input : stateInput}}/>\n            <AppliedRoute exact path=\"/documentation\" component={DocumentationView} props={{code : stateCode, breakpoints : stateBreakpoints, input : stateInput}}/>\n            <AppliedRoute exact path=\"/editor\" component={ProgramEditorView} props={{code : stateCode, breakpoints : stateBreakpoints, input : stateInput}}/>\n            <AppliedRoute exact path=\"/debug\" component={ProgramDebugView} props={{code : stateCode, breakpoints : stateBreakpoints, input : stateInput}}/>\n          </Switch>\n        </HashRouter>\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}