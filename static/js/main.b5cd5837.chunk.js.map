{"version":3,"sources":["components/utils/mode/sigma16.js","AppliedRoute.js","components/NavBar.js","components/HomeView.js","components/DocumentationView.js","components/utils/Emulator.js","components/ProgramEditorView.js","components/ProgramDebugView.js","App.js","serviceWorker.js","index.js"],"names":["mod","CodeMirror","require","defineMode","words","str","split","allCommands","tokenBase","stream","state","eatSpace","eat","ch","next","peek","skipToEnd","test","eatWhile","eol","cur","current","hasOwnProperty","tokenize","tokens","registerHelper","style","dict","i","length","define","startState","token","closeBrackets","lineComment","fold","defineMIME","C","component","cProps","props","rest","render","NavBar","Nav","fill","variant","Item","className","to","pathname","this","activeClassName","React","Component","DocumentationView","context","code","breakpoints","input","location","setState","undefined","Fragment","Row","Col","href","add","sub","mul","div","cmplt","cmpeq","cmpgt","and","andold","or","orold","xor","xorold","trap","cmp","inv","invold","lea","load","store","jumpf","jumpt","jal","testset","jump","jumpc0","jumpc1","jumple","jumpne","jumpge","jumpnv","jumpnvu","jumpnco","jumplt","jumpeq","jumpgt","jumpv","jumpvu","jumpco","data","rfi","execute","save","restore","getctl","putctl","push","pop","top","addc","shiftl","shiftr","getbit","getbiti","putbit","putbiti","field","extract","extracti","inject","injecti","logicb","logicw","andb","orb","xorb","invb","andnew","ornew","xornew","invnew","partiallyCompatibleCommands","nonCompatibleCommands","firstColumn","Math","pow","secondColumn","thirdColumn","fourthColumn","rrCommands","rrrCommands","jxCommands","jumpAliasCommands","kxCommands","rxCommands","xCommands","noEXPCommands","rrEXPCommands","rrxEXPCommands","rcEXPCommands","rrrEXPCommands","rrkEXPCommands","rkEXPCommands","rrkkEXPCommands","rrrkkEXPCommands","rrrkEXPCommands","logicAliasRRRKCommands","logicAliasRRKCommands","logicAliasRRRCommands","logicAliasRRCommands","injectIAliasCommands","readSignedHex","a","Number","readUnsignedHex","readConstant","argument","labels","info","isNaN","isValidNumber","slice","parseInt","Object","keys","includes","readCompatibleConstant","writeHex","numString","num","startsWith","isValidNumberBit","x","toString","getBitFromRegister","registerValue","bitNum","bit","setBitInRegister","bitValue","shldist","setBitInRegisterMultiple","destRegisterValue","sourceRegisterValue","bitFrom","bitTo","radjustedField","checkRRCommand","rr","checkRRRCommand","rrr","checkJXCommand","jx","disp","checkRRXexpCommand","rrx","isValidNumberGH","checkRRKexpCommand","rrk","checkRRRKexpCommand","rrrk","checkCommands","command","rk","check","kx","splat","k","checkKXCommand","rx","checkRXCommand","rrkk","g","h","checkRRKKexpCommand","rrrkk","checkRRRKKexpCommand","rkk","checkRKKexpCommand","checkLine","line","linesplit","trim","error","checkCommandIsCompatible","result","warn","checkLineIsComaptible","parsed","checkCodeIsCompatible","lines","lineWarn","lineError","compatible","findInstuctionInfo","type","op","generateMachineCode","machineCode","machineCodeSecond","commandInfo","argumentInfo","d","b","e","f","gh","argumentList","findArgumentInfo","parseLineForLabels","label","instructionWords","justLabel","parseLineForMachineCode","findLineInfo","lineResult","comment","infoToLine","setMemory","memory","compareRegisters","RaValue","RbValue","flagDict","RaValueSigned","RbValueSigned","signedEquals","runFromInstruction","control","registers","output","instructionIr","instructionADR","halted","processed","jumped","Op","floor","Rd","Ra","Rb","setR15","memoryBufferStartInput","charCodeAt","memoryBufferStartOutput","it","String","fromCharCode","processTRAPInstruction","adr","ab","Re","Rf","effectiveADRsave","diffSave","abs","iSave","regNoSave","effectiveADRrestore","diffRestore","iRestore","regNoRestore","resultExtract","resultExtractI","bitToSetAnd","bitToSetXor","bitToSetOr","bitToSetInv","bitI","bitToSetPut","bitToSetPutI","R15CarryBit","processEXPInstruction","effectiveADR","processRXInstruction","r15","setR15Flags","runMemory","ran","values","NaN","console","log","ProgramEditorView","breakpointOnClick","breakpoint","currentTarget","classList","contains","remove","index","indexOf","id","splice","disableBreakpoints","button","lineCompWarn","lineCompError","closeAlert","alert","alertShow","runModalClose","modal","resetCPUandMemory","runModalShow","resizeOutput","outputColumn","target","outputZoomed","height","parseCode","currentLine","justLabelOffset","checkCode","Emulator","trimmed","machineCodeUpdated","updateAlert","keysString","ite","runCode","canRun","canRunCode","localControl","cpuControl","localRegisters","localMemory","localInput","localOutput","setInput","inputModalShow","inputUpdate","textarea","value","inputModalClose","downloadRaw","textValue","fileName","endsWith","downloadFile","fileNameUpdate","fileNameHandleKeyDown","key","downloadModalClose","downloadAs","downloadRawCompatible","downloadBinary","downloadHex","downloadHexCompatible","downloadModalShow","downloadModalCloseNon","downloadModalOpen","downloadModalRadio","updateCode","newCode","codeBlockEdit","divContent","toggleHighlighting","highlightedCodeChunk","alertMessage","alertNature","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","codeArea","document","getElementById","styleTop","OverlayTrigger","placement","overlay","Tooltip","onClick","controls","controlKeys","textAlign","width","InputGroup","as","disabled","memoryValues","memoryKeys","map","message","nature","lineErrorCopy","ranSuccessfully","name","content","mimeType","element","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","checkCompatible","codeResult","linesOfCode","lineNoWidth","lineNoWidthLength","LOG10E","yOffset","Modal","show","onHide","dialogClassName","animation","Header","closeButton","Title","Body","controlColumn","registerColumn","memoryColumn","onDoubleClick","onChange","autoFocus","paddingTop","Button","float","paddingBottom","ToggleButtonGroup","defaultValue","ToggleButton","onKeyDown","Alert","onClose","dismissible","ButtonGroup","size","active","breakpointsColumn","createLineNumberColumn","mode","options","lineNumbers","scrollbarStyle","PureComponent","ProgramDebugView","parseForBreakpoints","breakpointsMachineCode","toggleCodeChunk","showCodeChunk","renderCodeChunk","collapseOnEntered","collapse","inputRan","lastRanLine","activeLine","encounteredBreakpoint","lastLine","stepForward","resetDebug","outputModalOpen","outputModalShow","outputModalClose","memoryToLine","lineToMemory","classNameMemory","decoration","textDecoration","codeAreaWrapper","parsedMachineCodeStringStart","parsedMachineCodeStringCodes","parsedMachineCodeString","heightOfOverlay","marginTop","marginLeft","toLowerCase","nextLineBreakpoint","mcLength","memoryNew","inputColumn","borderRight","Collapse","in","onEntered","readOnly","noHighlightCodeChunk","activeLineOverlay","lastLineOverlay","App","stateCode","stateBreakpoints","stateInput","AppliedRoute","exact","path","HomeView","Boolean","window","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5cd5837.chunk.js","sourcesContent":["(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"codemirror\"));\n})(function(CodeMirror) {\n\n  CodeMirror.defineMode('sigma16', function() {\n\n    var words = function(str) { return str.split(\" \"); };\n    function define(style, dict) {\n      for(var i = 0; i < dict.length; i++) {\n        words[dict[i]] = style;\n      }\n    };\n\n    const allCommands = [\"add\", \"sub\", \"mul\", \"div\", \"cmp\", \"cmplt\", \"cmpeq\", \"cmpgt\", \"inv\", \"invold\", \"and\", \"andold\", \"or\", \"orold\", \"xor\", \"xorold\", \"trap\", \n                        \"lea\", \"load\", \"store\", \"jump\", \"jumpc0\", \"jumpc1\", \"jumpf\", \"jumpt\", \"jal\", \"testset\", \"jumplt\", \"jumple\", \"jumpne\", \"jumpeq\", \"jumpge\", \"jumpgt\",\n                        \"data\",\n                        \"rfi\", \"save\", \"restore\", \"getctl\", \"putctl\", \"execute\", \"push\", \"pop\", \"top\", \"shiftl\", \"shiftr\", \"extract\", \"extracti\", \"inject\", \"injecti\", \"logicw\", \"logicb\", \"getbit\", \"getbiti\", \"putbit\", \"putbiti\", \"field\", \"andb\", \"orb\", \"xorb\", \"invb\", \"andnew\", \"ornew\", \"xornew\", \"invnew\", \"addc\"];\n\n    CodeMirror.registerHelper(\"hintWords\", \"sigma16\", allCommands);\n\n    define('keyword', allCommands);\n\n    function tokenBase(stream, state) {\n      if ( stream.eatSpace() ) return null;\n      if ( stream.eat( ',' ) ) return null;\n      if ( stream.eat( '[' ) ) return null;\n      if ( stream.eat( ']' ) ) return null;\n\n      var ch = stream.next();\n      var peek = stream.peek();\n\n      if (ch === ';') {\n        stream.skipToEnd();\n        return 'comment';\n      } else if ( /(r|R)([0-9])/.test( ch + peek ) ) {\n        if ( /(1)/.test( peek ) ) {\n          stream.next();\n          peek = stream.peek();\n\n          if ( /([0-5])/.test(peek) ) {\n            stream.next();\n          }\n        } else {\n          stream.next();\n        }\n        return 'def';   \n      } else if ( ch === '$' ) {\n        stream.eatWhile( /((\\d)|([a-f])|([A-F]))/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      } else if ( ch === '-' ) {\n        stream.eatWhile( /\\d/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      } else if ( /\\d/.test( ch ) ) {\n        stream.eatWhile( /\\d/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      }\n      stream.eatWhile(/[\\w]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n    }\n\n    function tokenize(stream, state) {\n      return (state.tokens[0] || tokenBase) (stream, state);\n    };\n\n    return {\n      startState: function() {return {tokens:[]};},\n      token: function(stream, state) {\n        return tokenize(stream, state);\n      },\n      closeBrackets: \"[]\",\n      lineComment: ';',\n      fold: \"brace\"\n    };\n  });\n\n  CodeMirror.defineMIME('text/plain', 'sigma16');\n\n});","import React from \"react\";\n\nimport { Route } from \"react-router-dom\";\n\nexport default ({ component: C, props: cProps, ...rest }) =>\n  <Route {...rest} render={props => <C {...props} {...cProps} />} />;","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\nimport { Nav } from 'react-bootstrap';\n\nexport default class NavBar extends React.Component {\n  constructor ( props ) {\n    super( props )\n\n    this.props = props;\n  }\n\n  render() {\n    return(\n      <Nav fill variant=\"tabs\">\n        <Nav.Item>\n          <NavLink \n            className=\"nav-link\" \n            to={{\n              pathname : \"/\",\n              state : this.props.state\n              }}>\n              Home\n            </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className=\"nav-link\" \n            activeClassName=\"nav-link active\" \n            to={{\n              pathname : \"/documentation\",\n              state : this.props.state\n              }}>\n              Documentation\n          </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className=\"nav-link\" \n            activeClassName=\"nav-link active\" \n            to={{\n              pathname : \"/editor\",\n              state : this.props.state\n              }}>\n              Editor\n          </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className=\"nav-link\" \n            activeClassName=\"nav-link active\" \n            to={{\n              pathname : \"/debug\",\n              state : this.props.state\n              }}>\n              Debug\n          </NavLink>\n        </Nav.Item>\n      </Nav>\n    );\n  }\n}","import React from 'react';\n\nimport './HomeView.css';\n\nimport { Link } from 'react-router-dom';\nimport { Col, Row } from 'react-bootstrap';\n\nimport NavBar from './NavBar';\n\nexport default class DocumentationView extends React.Component {\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n      input : ''\n    };\n  }\n\n  componentDidMount() {\n    if ( this.props.location.state ) {\n      this.setState( { code : this.props.location.state.code } );\n      this.setState( { breakpoints : this.props.location.state.breakpoints } );\n      this.setState( { input : this.props.location.state.input } );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( { code : this.props.code } );\n      this.setState( { breakpoints : this.props.breakpoints } );\n      this.setState( { input : this.props.input } );\n    }\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <NavBar state={this.state}/> \n        <div className=\"mainbody\">\n          <Row>\n            <Col>\n              <h1>Sigma17 home page</h1>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              Sigma16 is a computer architecture designed for research and teaching in computer systems. This application provides a complete environment for experimenting with the architecture.\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              Currently, this emulator and IDE runs <strong>fully functional</strong> on <strong>Google Chrome</strong> and <strong>Safari</strong>. Minor features - limited to double clicking to resize outputs - are unavailable on <strong>Firefox</strong> and <strong>Edge</strong>, however the core of the website - breakpoints, emulation, editting and running - are unaffected and the website will still look and operate correctly.\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"click-editor\">\n                <Link to={{\n                  pathname : \"/editor\",\n                  state : this.state\n                  }}>\n                  Click Here To Run IDE\n                </Link>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              This web based IDE is not to be used in complete replacement the orignal written by John O'Donnel as it has properties of it which could mean that programs written using this emulator <strong>will not work</strong> with the orignal and could lead to repurcussions because of it.\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"click-editor\">\n                <a href=\"https://github.com/QuestioWo/Sigma17\">\n                  View Source Directory on GitHub\n                </a>\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport './DocumentationView.css';\n\nimport { Col, Row } from 'react-bootstrap';\n\nimport NavBar from './NavBar';\n\nexport default class DocumentationView extends React.Component {\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n      input : ''\n    };\n  }\n\n  componentDidMount() {\n    if ( this.props.location.state ) {\n      this.setState( { code : this.props.location.state.code } );\n      this.setState( { breakpoints : this.props.location.state.breakpoints } );\n      this.setState( { input : this.props.location.state.input } );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( { code : this.props.code } );\n      this.setState( { breakpoints : this.props.breakpoints } );\n      this.setState( { input : this.props.input } );\n    }\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <NavBar state={this.state}/>\n        <div className=\"mainbody\">\n          <Row>\n            <Col>\n              Empty for now\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","// CONSTS FOR COMMAND RECOGNITION\n  const allCommands = {\n    add : 'rrr', \n    sub : 'rrr', \n    mul : 'rrr', \n    div : 'rrr', \n    cmplt : 'rrr', \n    cmpeq : 'rrr', \n    cmpgt : 'rrr', \n    and : 'rrr', \n    andold : 'rrr', \n    or : 'rrr', \n    orold : 'rrr', \n    xor : 'rrr',\n    xorold : 'rrr',\n    trap : 'rrr',\n\n    cmp : 'rr', \n    inv : 'rr',\n    invold : 'rr',\n\n    lea : 'rx', \n    load : 'rx', \n    store : 'rx', \n    jumpf : 'rx', \n    jumpt : 'rx', \n    jal : 'rx', \n    testset : 'rx',\n\n    jump : 'jx', \n\n    jumpc0 : 'kx', \n    jumpc1 : 'kx',\n\n    jumple : 'jumpAlias',\n    jumpne : 'jumpAlias',\n    jumpge : 'jumpAlias',\n    jumpnv : 'jumpAlias',\n    jumpnvu : 'jumpAlias',\n    jumpnco : 'jumpAlias',\n\n    jumplt : 'jumpAlias',\n    jumpeq : 'jumpAlias',\n    jumpgt : 'jumpAlias',\n    jumpv : 'jumpAlias',\n    jumpvu : 'jumpAlias',\n    jumpco : 'jumpAlias',\n\n    data : 'x',\n\n    rfi : 'noEXP',\n\n    execute : 'rrEXP',\n\n    save : 'rrxEXP',\n    restore : 'rrxEXP',\n\n    getctl : 'rcEXP',\n    putctl : 'rcEXP',\n\n    push : 'rrrEXP',\n    pop : 'rrrEXP',\n    top : 'rrrEXP',\n    addc : 'rrrEXP',\n\n    shiftl : 'rrkEXP',\n    shiftr : 'rrkEXP',\n\n    getbit : 'rkEXP',\n    getbiti : 'rkEXP',\n    putbit : 'rkEXP',\n    putbiti : 'rkEXP',\n\n    field : 'injectIAlias',\n\n    extract : 'rrkkEXP',\n    extracti : 'rrkkEXP',\n\n    inject : 'rrrkkEXP',\n    injecti : 'rrrkkEXP',\n    logicb : 'rrrkkEXP',\n\n    logicw : 'rrrkEXP',\n\n    andb : 'logicAliasRRRK',\n    orb : 'logicAliasRRRK',\n    xorb : 'logicAliasRRRK',\n\n    invb : 'logicAliasRRK',\n\n    andnew : 'logicAliasRRR',\n    ornew : 'logicAliasRRR',\n    xornew : 'logicAliasRRR',\n\n    invnew : 'logicAliasRR'\n  };\n\n  // const fullyCompatibleCommands = [\n  //   'add',\n  //   'sub',\n  //   'mul',\n  //   'div',\n  //   'cmp',\n  //   'cmplt',\n  //   'cmpeq',\n  //   'cmpgt',\n  //   'inv',\n  //   'invold',\n  //   'and',\n  //   'andold',\n  //   'or',\n  //   'orold',\n  //   'xor',\n  //   'xorold',\n  //   'trap',\n\n  //   'lea',\n  //   'load',\n  //   'store',\n  //   'jump',\n  //   'jumpc0',\n  //   'jumpc1',\n  //   'jumpf',\n  //   'jumpt',\n  //   'jal',\n\n  //   'jumple',\n  //   'jumpne',\n  //   'jumpge',\n  //   'jumpnv',\n  //   'jumpnvu',\n  //   'jumpnco',\n\n  //   'jumplt',\n  //   'jumpeq',\n  //   'jumpgt',\n  //   'jumpv',\n  //   'jumpvu',\n  //   'jumpco',\n\n  //   'data',\n\n  //   'save',\n  //   'restore',\n\n  //   'shiftl',\n  //   'shiftr',\n\n  //   'extract',\n  //   'extracti',\n\n  //   'inject',\n  //   'injecti',\n  //   'logicb',\n\n  //   'logicw',\n\n  //   'andb',\n  //   'orb',\n  //   'xorb',\n\n  //   'invb'\n  // ];\n\n  const partiallyCompatibleCommands = { // recognised by assembler but has other effects\n    testset : 'Assembles but no functionality',\n    rfi : 'Assembles, but hangs when ran in a program',\n    execute : 'Assembles, however, not as per docs and has no functionality',\n    getctl : 'Assembles differently and has different range of functionality',\n    putctl : 'Assembles differently and has different range of functionality',\n    push : 'Assembles but no functionality',\n    pop : 'Assembles but no functionality',\n    top : 'Assembles but no functionality',\n    field : 'Assembler accepts but does not produce any codes',\n    andnew : 'Assembler does not recognise but same functionality can be had with \"and\"',\n    ornew : 'Assembler does not recognise but same functionality can be had with \"or\"',\n    xornew : 'Assembler does not recognise but same functionality can be had with \"xor\"',\n    invnew : 'Assembler does not recognise but same functionality can be had with \"inv\"'\n  };\n\n  const nonCompatibleCommands = [ // not even recognised by assembler\n    'addc',\n    'getbit',\n    'getbiti',\n    'putbit',\n    'putbiti'\n  ];\n  \n  const firstColumn = Math.pow( 16, 3 );\n  const secondColumn = Math.pow( 16, 2 );\n  const thirdColumn = Math.pow( 16, 1 );\n  const fourthColumn = Math.pow( 16, 0 );\n\n  // RRR\n    const rrCommands = {\n      cmp : 4,\n      inv : 8,\n      invold : 8\n    };\n    const rrrCommands = { \n      add : 0, \n      sub : 1,\n      mul : 2,\n      div : 3,\n      cmplt : 5,\n      cmpeq : 6,\n      cmpgt : 7,\n      and : 9,\n      andold : 9,\n      or : 0xa,\n      orold : 0xa,\n      xor : 0xb,\n      xorold : 0xb,\n      trap : 0xd\n    };\n\n  // RX\n    const jxCommands = {\n      jump : 3\n    };\n    const jumpAliasCommands = { // 4 is jumpc0, 5 is jumpc1\n      jumple : [ 4, 1 ],\n      jumpne : [ 4, 2 ],\n      jumpge : [ 4, 3 ],\n      jumpnv : [ 4, 6 ],\n      jumpnvu : [ 4, 5 ],\n      jumpnco : [ 4, 7 ],\n\n      jumplt : [ 5, 3 ],\n      jumpeq : [ 5, 2 ],\n      jumpgt : [ 5, 1 ],\n      jumpv : [ 5, 6 ],\n      jumpvu : [ 5, 5 ],\n      jumpco : [ 5, 7 ]\n    };\n    const kxCommands = {\n      jumpc0 : 4,\n      jumpc1 : 5\n    };\n    const rxCommands = {\n      lea : 0,\n      load : 1,\n      store : 2,\n      jumpf : 6,\n      jumpt : 7,\n      jal : 8,\n      testset : 9\n    };\n\n  // X\n    const xCommands = {\n      data : 0 // data doesnt have an op code since it kind of isnt a command but for convention sake, its in a dictionary\n    };\n\n  // EXP\n    const noEXPCommands = {\n      rfi : 0\n    };\n\n    const rrEXPCommands = {\n      execute : 0xc\n    };\n\n    const rrxEXPCommands = {\n      save : 8,\n      restore : 9\n    };\n\n    const rcEXPCommands = {\n      getctl : 0xa,\n      putctl : 0xb\n    };\n\n    const rrrEXPCommands = {\n      push : 0xd,\n      pop : 0xe,\n      top : 0xf,\n      addc : 0x1c\n    };\n\n    const rrkEXPCommands = {\n      shiftl : 0x10,\n      shiftr : 0x11,\n    };\n\n    const rkEXPCommands = {\n      getbit : 0x18,\n      getbiti : 0x19,\n      putbit : 0x1a,\n      putbiti : 0x1b,\n    };\n\n    const rrkkEXPCommands = {\n      extract : 0x12,\n      extracti : 0x13\n    };\n\n    const rrrkkEXPCommands = {\n      inject : 0x14,\n      injecti : 0x15,\n      logicb : 0x17\n    };\n\n    const rrrkEXPCommands = {\n      logicw : 0x16\n    };\n\n    const logicAliasRRRKCommands = {\n      andb : [ 0x17, 1 ],\n      orb : [ 0x17, 7 ],\n      xorb : [ 0x17, 6 ]\n    };\n\n    const logicAliasRRKCommands = {\n      invb : [ 0x17, 0xc ]\n    };\n\n    const logicAliasRRRCommands = {\n      andnew : [ 0x16, 1 ],\n      ornew : [ 0x16, 7 ],\n      xornew : [ 0x16, 6 ]\n    };\n\n    const logicAliasRRCommands = {\n      invnew : [ 0x16, 0xc ]\n    };\n\n    const injectIAliasCommands = {\n      field : [ 0x15, 0, 0 ]\n    };\n\n// UTIL FUNCTIONS\n  export function readSignedHex( a ) {\n    a = Number( a );\n    if ( a < 65536 && a >= -32768 ) {\n      if ( ( a & 0x8000 ) > 0) {\n        a = a - 0x10000;\n      }\n      return a;\n    }\n    return 65536;\n  }\n\n  export function readUnsignedHex( a ) {\n    if ( a < 65536 && a >= -32768 ) {\n      if ( a < 0 ) {\n        a = a + 0x10000;\n      }\n      return a;\n    }\n    return 65536;\n  }\n\n  function readConstant( argument, labels ) {\n    var info = 0;\n\n    if ( ! isNaN( argument ) ) {\n      // number is in decimal\n      info = readUnsignedHex( Number( argument ) );\n    } else {\n      // number is either hex or string\n      if ( isValidNumber( argument ) ) {\n        argument = argument.slice( 1, argument.length );\n        info = parseInt( argument, 16 );\n      } else {\n        if ( labels && Object.keys( labels ).includes( argument ) ) {\n          info = labels[argument];\n        } else {\n          info = argument;\n        }\n      }\n    }\n\n    return info;\n  }\n\n  function readCompatibleConstant( argument ) {\n    var info = 0;\n\n    if ( ! isNaN( argument ) ) {\n      // number is in decimal\n      info = argument;\n    } else {\n      // number is either hex or string\n      if ( isValidNumber( argument ) ) {\n        info = '$' + writeHex( argument.slice( 1, argument.length ) );\n      } else {\n        info = argument;\n      }\n    }\n\n    return info;\n  }\n\n  export function isValidNumber( numString ) {\n    var num = 0;\n\n    if ( !isNaN( numString ) ) {\n      num = readUnsignedHex( parseInt( numString ) );\n    } else if ( numString.startsWith( '$' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = readUnsignedHex( parseInt( numString, 16 ) );\n    } else {\n      num = 65536;\n    }\n\n    return ( num < 65536 && num >= 0 ) ? true : false;\n  }\n\n  function isValidNumberBit( numString ) {\n    var num = 0;\n\n    if ( !isNaN( numString ) ) {\n      num = parseInt( numString );\n    } else if ( numString.startsWith( '$' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = parseInt( numString, 16 );\n    } else {\n      num = 16;\n    }\n\n    return ( num <= 15 && num >= 0 ) ? true : false;\n  }\n\n  function isValidNumberGH( numString ) {\n    var num = 0;\n\n    if ( !isNaN( numString ) ) {\n      num = parseInt( numString );\n    } else if ( numString.startsWith( '$' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = parseInt( numString, 16 );\n    } else {\n      num = 16;\n    }\n\n    return ( num <= 255 && num >= 0 ) ? true : false;\n  }\n\n  export function writeHex( x ) {\n    if ( x !== undefined ) {\n      if ( !x.length ) {\n        x = x.toString( 16 );\n      }\n      while ( x.length < 4 ) { x = '0' + x; }\n      return x;\n    }\n    return x;\n  }\n\n  function getBitFromRegister( registerValue, bitNum ) {\n    // push bit to the furthest left to remove bits before\n    var bit = registerValue << bitNum;\n    // remove bits before\n    while ( bit >= 0x10000 ) { bit -= 0x10000; };\n\n    // bit shift back left to furthest left position to remove trailing bits and leave either 1 or 0 to return\n    bit = bit >> 15;\n\n    return bit;\n  }\n\n  function setBitInRegister( registerValue, bitValue, bitNum ) {\n    // very similar to inject code as a very similar command\n    const shrdist = 15; // shift ffff right to get right-adjusted field\n    const shldist = 15-bitNum;   // shift left to put field into position\n\n    var radjustedField = 0xffff >>> shrdist;\n    var maskO = radjustedField << shldist; // 1s in the field\n    var mask = ( ~maskO ) & 0xffff; // mask to clear field in e\n\n    // if either bit is on in registers[15] or in x, shifted to the left to fit in correct gap to be injected into then bit is on\n    return ( ( registerValue & mask ) | ( bitValue << shldist ) );\n  }\n\n  function setBitInRegisterMultiple( destRegisterValue, sourceRegisterValue, bitFrom, bitTo ) {\n    // Taken from original Sigma16 emulator, from the emulator.js file\n    const shrdist = 15 - bitFrom + bitTo; // shift ffff right to get right-adjusted field\n    const shldist = 15 - bitFrom;   // shift left to put field into position\n\n    var radjustedField = 0xffff >>> shrdist;\n    var maskO = radjustedField << shldist; // 1s in the field\n    var mask = ( ~maskO ) & 0xffff; // mask to clear field in e\n    var x = sourceRegisterValue & radjustedField; // value to be injected\n\n    // if either bit is on in registers[Re] or in x, shifted to the left to fit in correct gap to be injected into then bit is on\n    return ( ( destRegisterValue & mask ) | ( x << shldist ) );\n  }\n\n  function getR15Dict() {\n    return {\n      'G' : 0,\n      'g' : 0,\n      'E' : 0,\n      'l' : 0,\n      'L' : 0,\n      'V' : 0,\n      'v' : 0,\n      'C' : 0,\n      'S' : 0\n    };\n  }\n\n  function setR15Flags( flagDict ) {\n    var r15 = 0;\n\n    if ( flagDict['G'] === 1 ) r15 += ( 0b1000000000000000 );\n    if ( flagDict['g'] === 1 ) r15 += ( 0b0100000000000000 );\n    if ( flagDict['E'] === 1 ) r15 += ( 0b0010000000000000 );\n    if ( flagDict['l'] === 1 ) r15 += ( 0b0001000000000000 );\n    if ( flagDict['L'] === 1 ) r15 += ( 0b0000100000000000 );\n    if ( flagDict['V'] === 1 ) r15 += ( 0b0000010000000000 );\n    if ( flagDict['v'] === 1 ) r15 += ( 0b0000001000000000 );\n    if ( flagDict['C'] === 1 ) r15 += ( 0b0000000100000000 );\n    if ( flagDict['S'] === 1 ) r15 += ( 0b0000000010000000 );\n\n    return r15;\n  }\n\n// CHECKING METHODS\n  function checkRRCommand( rr ) {\n    // check that rrr is in the form of rd,ra,rb\n    if ( !( /^[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9]))$/.test( rr ) ) ) {\n      return 'arguments must be in the form of \"Ra,Rb\"';\n    }\n    return true;\n  }\n\n  function checkRRRCommand( rrr ) {\n    // check that rrr is in the form of rd,ra,rb\n    if ( !( /^[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9]))$/.test( rrr ) ) ) {\n      return 'arguments must be in the form of \"Rd,Ra,Rb\"';\n    }\n    return true;\n  }\n\n  function checkJXCommand( jx, labels ) {\n    // check that jx is in the form of disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( /^((\\$((\\d)|([a-f]))+)|(-(\\d))|(\\d)|(\\w))+\\[[rR]((1[0-5])|([0-9]))\\]$/.test( jx ) ) ) {\n      return 'arguments must be in the form of \"disp[Ra]\"';\n    }\n    var disp = jx.split( '[' )[0];\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, a hex or an initailised label';\n    }\n  }\n\n  function checkKXCommand( kx, labels ) {\n    // check that kx is in the form of k,disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( /^((\\$((\\d)|([a-f]))+)|(\\d))+,((\\$((\\d)|([a-f]))+)|(-(\\d))|(\\d)|(\\w))+\\[[rR]((1[0-5])|([0-9]))\\]$/.test( kx ) ) ) {\n      return 'arguments must be in the form of \"k,disp[Ra]\", negative integers not allowed for k argument';\n    }\n    var splat = kx.split( ',' );\n    var k = splat[0];\n    var disp = splat[1].split( '[' )[0];\n\n    if ( ! isValidNumberBit( k ) ) {\n      return 'k argument must either be a decimal, a hex value between 0 and 15, negative integers not allowed';\n    }\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, a hex or an initailised label';\n    }\n  }\n\n  function checkRXCommand( rx, labels ) {\n    // check that rx is in the form of rd,disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( /^[rR]((1[0-5])|([0-9])),((\\$((\\d)|([a-f]))+)|(-(\\d))|(\\d)|(\\w))+\\[[rR]((1[0-5])|([0-9]))\\]$/.test( rx ) ) ) {\n      return 'arguments must be in the form of \"Rd,disp[Ra]\"';\n    }\n    var disp = rx.split( ',' )[1].split( '[' )[0];\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, a hex or an initailised label';\n    }\n  }\n\n  function checkXCommand( x ) {\n    // check that x is a number, either hex or decimal\n    if ( !( /^((\\$((\\d)|([a-f]))+)|(-(\\d))|(\\d)|(\\w))+$/.test( x ) ) ) {\n      return 'arguments must be in the form of \"constant\" up to 65535 and down to -32768';\n    }\n\n    if ( !( isValidNumber( x ) ) ) {\n      return 'data must be followed by either a decimal or hex number <= 65535 and >=-32768';\n    }\n    return true;\n  }\n\n  function checkNOexpCommand( no ) {\n    // doesnt matter the arguments, NOexp commands evaluate in the same way\n    return true;\n  }\n\n  function checkRRXexpCommand( rrx ) {\n    // check that rrx is in the form of re,rf,disp[rd], where disp can be either hex, or a decimal integer \n    if ( !( /^[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9])),((\\$((\\d)|([a-f]))+)|(\\d))+\\[[rR]((1[0-5])|([0-9]))\\]$/.test( rrx ) ) ) {\n      return 'arguments must be in the form of \"Re,Rf,disp[Rd]\", negative integers not allowed';\n    }\n    var disp = rrx.split( ',' )[2].split( '[' )[0];\n\n    if ( isValidNumberGH( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, or a hex with decimal values between 0 and 255';\n    }\n  }\n\n  function checkRCexpCommand( rc ) {\n    // check that rc is in the form of rd,controlRegister, where controlRegister can be pc, ir, or adr\n    if ( !( /^([rR]((1[0-5])|([0-9])),((ir)|(pc)|(adr)))$/.test( rc ) ) ) {\n      return 'arguments must be in the form of \"Rd,controlRegisterName\"';\n    }\n\n    return true;\n  }\n\n  function checkRRKexpCommand( rrk ) {\n    // check that rrk is in the form of re,rf,gh, where gh can be either hex, or a decimal integer between 0 and 15\n    if ( !( /^[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9])),((\\$((\\d)|([a-f]))+)|(\\d))+$/.test( rrk ) ) ) {\n      return 'arguments must be in the form of \"Rd,Re,g\", negative integers not allowed';\n    }\n    var g = rrk.split( ',' )[2];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, or a hex value between 0 and 15';\n    }\n    return true;\n  }\n\n  function checkRKexpCommand( rk ) {\n    // check that rk is in the form of rd,g, where g can be either hex, or a decimal integer between 0 and 15\n    if ( !( /^[rR]((1[0-5])|([0-9])),((\\$((\\d)|([a-f]))+)|(\\d))+$/.test( rk ) ) ) {\n      return 'arguments must be in the form of \"Rd,g\", negative integers not allowed';\n    }\n    var g = rk.split( ',' )[1];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, or a hex value between 0 and 15';\n    }\n    return true;\n  }\n\n  function checkRKKexpCommand( rkk ) {\n    // check that rrk is in the form of rd,g,h where g and h can be either hex, or a decimal integer between 0 and 15\n    if ( !( /^[rR]((1[0-5])|([0-9])),((\\$((\\d)|([a-f]))+)|(\\d))+,((\\$((\\d)|([a-f]))+)|(\\d))+$/.test( rkk ) ) ) {\n      return 'arguments must be in the form of \"Rd,g,h\", negative integers not allowed';\n    }\n    var g = rkk.split( ',' )[1];\n    var h = rkk.split( ',' )[2];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, or a hex value between 0 and 15';\n    }\n    if ( ! isValidNumberBit( h ) ) {\n      return 'h argument must either be a decimal, or a hex value between 0 and 15';\n    }\n    return true;\n  }\n\n  function checkRRKKexpCommand( rrkk ) {\n    // check that rrkk is in the form of rd,re,g,h, where g and h can be either hex, or a decimal integer between 0 and 15\n    if ( !( /^[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9])),((\\$((\\d)|([a-f]))+)|(\\d))+,((\\$((\\d)|([a-f]))+)|(\\d))+$/.test( rrkk ) ) ) {\n      return 'arguments must be in the form of \"Rd,Re,g,h\", negative integers not allowed';\n    }\n    var splat = rrkk.split( ',' );\n    var g = splat[2];\n    var h = splat[3];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, or a hex value between 0 and 15, negative integers not allowed';\n    }\n    if ( ! isValidNumberBit( h ) ) {\n      return 'h argument must either be a decimal, or a hex value between 0 and 15, negative integers not allowed';\n    }\n    return true;\n  }\n\n  function checkRRRKKexpCommand( rrrkk ) {\n    // check that rrrkk is in the form of rd,re,rf,g,h, where g and h can be either hex, or a decimal integer between 0 and 15\n    if ( !( /^[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9])),((\\$((\\d)|([a-f]))+)|(\\d))+,((\\$((\\d)|([a-f]))+)|(\\d))+$/.test( rrrkk ) ) ) {\n      return 'arguments must be in the form of \"Rd,Re,Rf,g,h\", negative integers not allowed';\n    }\n    var splat = rrrkk.split( ',' );\n    var g = splat[3];\n    var h = splat[4];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, or a hex value between 0 and 15, negative integers not allowed';\n    }\n    if ( ! isValidNumberBit( h ) ) {\n      return 'h argument must either be a decimal, or a hex value between 0 and 15, negative integers not allowed';\n    }\n    return true;\n  }\n\n  function checkRRRKexpCommand( rrrk ) {\n    // check that rrrk is in the form of rd,re,rf,gh, where gh can be either hex, or a decimal integer between 0 and 255\n    if ( !( /^[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9])),[rR]((1[0-5])|([0-9])),((\\$((\\d)|([a-f]))+)|(\\d))+$/.test( rrrk ) ) ) {\n      return 'arguments must be in the form of \"Rd,Re,Rf,g\", negative integers not allowed';\n    }\n    var splat = rrrk.split( ',' );\n    var g = splat[3];\n\n    if ( ! isValidNumberBit( g ) ) {\n      return 'g argument must either be a decimal, or a hex value between 0 and 15, negative integers not allowed';\n    }\n    return true;\n  }\n\n  function checkCommands( command, argument, labels ) {\n    var check = true;\n    switch ( allCommands[command] ) {\n      case 'rr' :\n        // first word is an rr command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRRCommand( argument );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by 2 registers in form Rx,Rx';\n        }\n        break;\n\n      case 'rrr' :\n        // first word is an rrr command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRRRCommand( argument );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by 3 registers in form Rx,Rx,Rx';\n        }\n        break;\n\n      case 'jx' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkJXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of disp[Ra]';\n        }\n        break;\n\n      case 'jumpAlias' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkJXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of disp[Ra]';\n        }\n        break;\n\n      case 'kx' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkKXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of k,disp[Ra], where k is a bit';\n        }\n        break;\n\n      case 'rx' :\n        // first word is an rx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of Rd,disp[Ra]';\n        }\n        break;\n\n      case 'x' :\n        // first word is an x command i.e data\n        if ( argument ) { \n          // there is a second argument\n          check = checkXCommand( argument );\n        } else {\n          check = command + ' must be followed by a number, either decimal or hex ( preceeded by $ )';\n        }\n        break;\n\n      case 'noEXP' :\n        // first word is an noEXP command i.e rfi\n        check = checkNOexpCommand( argument );\n        break;\n\n      case 'rrEXP' :\n        // first word is an rrEXP command i.e execute\n        if ( argument ) {\n          check = checkRRCommand( argument ); // same format as RR commands\n        } else {\n          check = command + ' must be followed by 2 registers in form Rx,Rx';\n        }\n        break;\n\n      case 'rrxEXP' :\n        // first word is an rrxEXP command i.e save\n        if ( argument ) {\n          check = checkRRXexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers then a disp in the form of Rx,Rx,disp[Rx]';\n        }\n        break;\n\n      case 'rcEXP' :\n        // first word is an rcEXP command i.e getctl\n        if ( argument ) {\n          check = checkRCexpCommand( argument );\n        } else {\n          check = command + ' must be followed by a register and a control register in the form Rx,(pc/ir/adr)';\n        }\n        break;\n\n      case 'rrrEXP' :\n        // first word is an rrrEXP command i.e push\n        if ( argument ) {\n          check = checkRRRCommand( argument ); // same format as RRR commands\n        } else {\n          check = command + ' must be followed by 3 registers in form Rx,Rx,Rx';\n        }\n        break;\n\n      case 'rrkEXP' :\n        // first word is an rrkEXP command i.e shiftl\n        if ( argument ) {\n          check = checkRRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers and a constant in form Rx,Rx,k';\n        }\n        break;\n\n      case 'rkEXP' :\n        // first word is an rrkEXP command i.e shiftl\n        if ( argument ) {\n          check = checkRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by a register and a constant in form Rx,k';\n        }\n        break;\n\n      case 'rrkkEXP' :\n        // first word is an rrkkEXP command i.e extract\n        if ( argument ) {\n          check = checkRRKKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers and 2 constants in form Rx,Rx,k1,k2';\n        }\n        break;\n\n      case 'rrrkkEXP' :\n        // first word is an rrrkkEXP command i.e inject\n        if ( argument ) {\n          check = checkRRRKKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 3 registers and 2 constants in form Rx,Rx,Rx,k1,k2';\n        }\n        break;\n\n      case 'rrrkEXP' :\n        // first word is an rrrkEXP command i.e logicw\n        if ( argument ) {\n          check = checkRRRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 3 registers and a constant in form Rx,Rx,Rx,k';\n        }\n        break;\n\n      case 'logicAliasRRRK' :\n        // first word is an logicAliasRRRK command i.e andb\n        if ( argument ) {\n          check = checkRRRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 3 registers and a constant in form Rx,Rx,Rx,k';\n        }\n        break;\n\n      case 'logicAliasRRK' :\n        // first word is an logicAliasRRK command i.e invb\n        if ( argument ) {\n          check = checkRRKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers and a constant in form Rx,Rx,k';\n        }\n        break;\n\n      case 'logicAliasRRR' :\n        // first word is an logicAliasRRR command i.e andnew\n        if ( argument ) {\n          check = checkRRRCommand( argument );\n        } else {\n          check = command + ' must be followed by 3 registers in form Rx,Rx,Rx';\n        }\n        break;\n\n      case 'logicAliasRR' :\n        // first word is an logicAliasRR command i.e invnew\n        if ( argument ) {\n          check = checkRRCommand( argument );\n        } else {\n          check = command + ' must be followed by 2 registers in form Rx,Rx';\n        }\n        break;\n\n      case 'injectIAlias' :\n        // first word is an rrkEXP command i.e shiftl\n        if ( argument ) {\n          check = checkRKKexpCommand( argument );\n        } else {\n          check = command + ' must be followed by a register and 2 constants in form Rx,k1,k2';\n        }\n        break;\n\n      default :\n        check = 'not a valid command with known command type';\n        break;\n    }\n    return check;\n  }\n\n  export function checkLine( line, labels ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    var error = true;\n\n    if ( linesplit[0] ) {\n      // lines isnt empty\n      if ( Object.keys( allCommands ).includes( linesplit[0] ) ) {\n        // first word is a command\n        error = checkCommands( linesplit[0], linesplit[1], labels ); // will return error is arguments not present so dont have to check\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( Object.keys( allCommands ).includes( linesplit[1] ) ) {\n              error = checkCommands( linesplit[1], linesplit[2], labels );\n            } else {\n              error = 'not a valid command following label';\n            }\n          }\n          // just a label, therefore allowed and function returns true\n        }\n      }\n    }\n\n    // return error, as it woud have updated to error message if probelm, otherwise, will have stayed positive\n    return error;\n  }\n\n  function checkCommandIsCompatible( command ) {\n    var result = {\n      warn : '',\n      error : ''\n    };\n\n    if ( Object.keys( partiallyCompatibleCommands ).includes( command ) ) {\n      result['warn'] = partiallyCompatibleCommands[command]\n    } else if ( nonCompatibleCommands.includes( command ) ) {\n      result['error'] = 'Assembler does not recognise command at all and will return an error'\n    }\n    // else, is fully compatible\n\n    return result;\n  }\n\n  function checkLineIsComaptible( line ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    var parsed = {\n      warn : '',\n      error : ''\n    };\n\n    if ( linesplit[0] ) {\n      // lines isnt empty\n      if ( Object.keys( allCommands ).includes( linesplit[0] ) ) {\n        // first word is a command\n        parsed = checkCommandIsCompatible( linesplit[0] ); // will return error is arguments not present so dont have to check\n      } else if ( /\\w/.test( linesplit[0] ) && linesplit[1] && Object.keys( allCommands ).includes( linesplit[1] ) ) {    \n        parsed = checkCommandIsCompatible( linesplit[1] );\n      }\n    }\n\n    // return error, as it woud have updated to error message if probelm, otherwise, will have stayed positive\n    return parsed;\n  }\n\n  export function checkCodeIsCompatible( code ) {\n    var lines = code.split( '\\n' );\n    var check;\n\n    var lineWarn = {};\n    var lineError = {};\n\n    var compatible = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      check = checkLineIsComaptible( lines[i] );\n\n      if ( check['warn'].length ) {\n        lineWarn[i + 1] = check;\n      } else if ( check['error'].length ) {\n        lineError[i + 1] = check;\n        compatible = false;\n      } \n    }\n\n    return [compatible, lineWarn, lineError];\n  }\n\n// PARSING METHODS\n  function findInstuctionInfo( command, argument ) {\n    var result = {\n      words : 0,\n      type : '',\n      op : 0\n    };\n\n    switch ( allCommands[command] ) {\n      case 'rr' :\n        result['words'] = 1;\n        result['type'] = 'rrr';\n        result['op'] = rrCommands[command];\n        break;\n        \n      case 'rrr' :\n        result['words'] = 1;\n        result['type'] = 'rrr';\n        result['op'] = rrrCommands[command];\n        break;\n        \n      case 'jx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = jxCommands[command];\n        break;\n        \n      case 'jumpAlias' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = jumpAliasCommands[command][0];\n        break;\n        \n      case 'kx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = kxCommands[command];\n        break;\n        \n      case 'rx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = rxCommands[command];\n        break;\n        \n      case 'x' :\n        result['words'] = 1;\n        result['type'] = 'x';\n        result['op'] = xCommands[command];\n        break;\n\n      case 'noEXP' :\n        result['words'] = 1;\n        result['type'] = 'exp0';\n        result['op'] = noEXPCommands[command];\n        break;\n\n      case 'rrEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // doesnt matter if exp4 or exp8, g, h and gh elements will be 0 either way\n        result['op'] = rrEXPCommands[command];\n        break;\n\n      case 'rrxEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp8'; // g and h arguments will be 0 and gh will carry the 8 bit disp\n        result['op'] = rrxEXPCommands[command];\n        break;\n\n      case 'rcEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // exp4 as doubt that there will be more than 16 control registers ( even if interupts are added )\n        result['op'] = rcEXPCommands[command];\n        break;\n\n      case 'rrrEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // doesnt matter if exp4 or exp8, g, h and gh elements will be 0 either way\n        result['op'] = rrrEXPCommands[command];\n        break;\n\n      case 'rrkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // f will be 0 and h will hold k argument as k only goes upto 15\n        result['op'] = rrkEXPCommands[command];\n        break;\n\n      case 'rkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // g and h will hold k arguments as k only goes upto 15\n        result['op'] = rkEXPCommands[command];\n        break;\n\n      case 'rrkkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // two k arguments to be held in g and h fields, needs to be a exp4\n        result['op'] = rrkkEXPCommands[command];\n        break;\n\n      case 'rrrkkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // two k arguments to be held in g and h fields, needs to be a exp4\n        result['op'] = rrrkkEXPCommands[command];\n        break;\n\n      case 'rrrkEXP' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // one k field to be held as a 4 bit number, needs to be a exp4\n        result['op'] = rrrkEXPCommands[command];\n        break;\n\n      case 'logicAliasRRRK' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // one k field to be held as a 4 bit number and one constant held in g as instruction type, needs to be a exp4\n        result['op'] = logicAliasRRRKCommands[command][0];\n        break;\n\n      case 'logicAliasRRK' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // one k field to be held as a 4 bit number and one constant held in g as instruction type, needs to be a exp4\n        result['op'] = logicAliasRRKCommands[command][0];\n        break;\n\n      case 'logicAliasRRR' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // does matter as logic type is set in g field\n        result['op'] = logicAliasRRRCommands[command][0];\n        break;\n\n      case 'logicAliasRR' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // does matter as logic type is set in g field\n        result['op'] = logicAliasRRCommands[command][0];\n        break;\n\n      case 'injectIAlias' :\n        result['words'] = 2;\n        result['type'] = 'exp4'; // does matter as bitStart and bitEnd are set in g and h fields as 4 bit numbers\n        result['op'] = injectIAliasCommands[command][0];\n        break;\n\n      default :\n        break;\n    }\n\n    return result;\n  }\n\n  function findArgumentInfo( command, argument, labels ) {\n    var result = {\n      d : 0,\n      a : 0,\n      b : 0,\n      disp : 0,\n\n      e : 0,\n      f : 0,\n      g : 0,\n      h : 0,\n      gh : 0\n    };\n\n    var argumentList = [];\n\n    switch ( allCommands[command] ) {\n      case 'rr' :\n        argumentList = argument.split( ',' );\n        result['a'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['b'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['d'] = result['a'];\n        break;\n        \n      case 'rrr' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['b'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        break;\n        \n      case 'jx' :\n        argumentList = argument.split( '[' );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentList[0], labels );\n\n        result['d'] = 0;\n        break;\n        \n      case 'jumpAlias' :\n        argumentList = argument.split( '[' );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentList[0], labels );\n\n        result['d'] = jumpAliasCommands[command][1];\n        break;\n        \n      case 'kx' :\n        argumentList = argument.split( ',' );\n        result['d'] = readConstant( argumentList[0], labels );\n\n        argumentList = argumentList[1].split( '[' );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentList[0], labels );\n        break;\n        \n      case 'rx' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n\n        argumentList = argumentList[1].split( '[' );\n        result['a'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentList[0], labels );\n        break;\n        \n      case 'x' :\n        result['disp'] = readConstant( argument, labels );\n        break;\n\n      case 'noEXP' :\n        // no need for argument handling as exp0 takes no arguments\n        break;\n\n      case 'rrEXP' :\n        // copy of 'rr' case with a and b changed to d and e respectively\n        argumentList = argument.split( ',' );\n        result['e'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['f'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        break;\n\n      case 'rrxEXP' :\n        argumentList = argument.split( ',' );\n        result['e'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['f'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n\n        argumentList = argumentList[2].split( '[' );\n        result['d'] = Number( argumentList[1].slice( 1, argumentList[1].length - 1 ) ); // removes ']' from string\n        result['gh'] = readConstant( argumentList[0], labels );\n        break;\n\n      case 'rcEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        \n        switch ( argumentList[1] ) {\n          case 'pc' :\n            result['g'] = 1;\n            break;\n\n          case 'ir' :\n            result['g'] = 2;\n            break;\n\n          case 'adr' :\n            result['g'] = 3;\n            break;\n\n          default :\n            result['g'] = 0;\n            break;\n        }\n        break;\n\n      case 'rrrEXP' :\n        // copy of 'rrr' case with d, a, and b changed to d, e, and f respectively\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        break;\n\n      case 'rrkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['g'] = readConstant( argumentList[2], labels );\n        break;\n\n      case 'rkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        \n        result['g'] = readConstant( argumentList[1], labels );\n        break;\n\n      case 'rrkkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['g'] = readConstant( argumentList[2], labels );\n        result['h'] = readConstant( argumentList[3], labels );\n        break;\n\n      case 'rrrkkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        \n        result['g'] = readConstant( argumentList[3], labels );\n        result['h'] = readConstant( argumentList[4], labels );\n        break;\n\n      case 'rrrkEXP' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        \n        result['g'] = readConstant( argumentList[3], labels );\n        break;\n\n      case 'logicAliasRRRK' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        \n        result['g'] = logicAliasRRRKCommands[command][1];\n        result['h'] = readConstant( argumentList[3], labels );\n        break;\n\n      case 'logicAliasRRK' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['g'] = logicAliasRRKCommands[command][1];\n        result['h'] = readConstant( argumentList[2], labels );\n        break;\n\n      case 'logicAliasRRR' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        result['f'] = Number( argumentList[2].slice( 1, argumentList[2].length ) );\n        \n        result['g'] = logicAliasRRRCommands[command][1];\n        break;\n\n      case 'logicAliasRR' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        result['e'] = Number( argumentList[1].slice( 1, argumentList[1].length ) );\n        \n        result['g'] = logicAliasRRCommands[command][1];\n        break;\n\n      case 'injectIAlias' :\n        argumentList = argument.split( ',' );\n        result['d'] = Number( argumentList[0].slice( 1, argumentList[0].length ) );\n        \n        result['e'] = injectIAliasCommands[command][1];\n        result['f'] = injectIAliasCommands[command][2];\n        \n        result['g'] = readConstant( argumentList[1], labels );\n        result['h'] = readConstant( argumentList[2], labels );\n        break;\n\n      default :\n        break;\n    }\n\n    return result;\n  }\n\n  function generateMachineCode( command, argument, labels ) {\n    var machineCode = 0;\n    var machineCodeSecond = 65536;\n\n    var commandInfo = findInstuctionInfo( command, argument );\n    var argumentInfo = findArgumentInfo( command, argument, labels );\n\n    switch ( commandInfo['type'] ) {\n      case 'rrr' :\n        machineCode += commandInfo['op']*firstColumn + argumentInfo['d']*secondColumn + argumentInfo['a']*thirdColumn + argumentInfo['b']*fourthColumn;\n        break;\n\n      case 'rx' :\n        machineCode += 0xf*firstColumn + argumentInfo['d']*secondColumn + argumentInfo['a']*thirdColumn + commandInfo['op']*fourthColumn;\n\n        machineCodeSecond = argumentInfo['disp'];\n        break;\n\n      case 'x' :\n        machineCode += argumentInfo['disp'];\n        break;\n\n      case 'exp0' :\n        machineCode += 0xe*firstColumn + argumentInfo['d']*secondColumn + commandInfo['op']*fourthColumn;\n        break;\n\n      case 'exp4' :\n        machineCode += 0xe*firstColumn + argumentInfo['d']*secondColumn + commandInfo['op']*fourthColumn;\n        \n        machineCodeSecond = argumentInfo['e']*firstColumn + argumentInfo['f']*secondColumn + argumentInfo['g']*thirdColumn + argumentInfo['h']*fourthColumn;\n        break;\n\n      case 'exp8' :\n        machineCode += 0xe*firstColumn + argumentInfo['d']*secondColumn + commandInfo['op']*fourthColumn;\n        \n        machineCodeSecond = argumentInfo['e']*firstColumn + argumentInfo['f']*secondColumn + argumentInfo['gh']*fourthColumn;\n        break;\n\n      default :\n        break;\n    }\n\n    return [ machineCode, machineCodeSecond ];\n  }\n\n  export function parseLineForLabels( line ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    \n    var result = {\n      label : '',\n      instructionWords : 0,\n      justLabel : false\n    };\n\n    if ( linesplit[0] && linesplit[0] !== '' ) {\n      // lines isnt empty\n      if ( Object.keys( allCommands ).includes( linesplit[0] ) ) {\n        // first word is a command\n        result['instructionWords'] = findInstuctionInfo( linesplit[0], linesplit[1] )['words'];\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( Object.keys( allCommands ).includes( linesplit[1] ) ) {\n              result['label'] = linesplit[0];\n              result['instructionWords'] = findInstuctionInfo( linesplit[1], linesplit[2] )['words'];\n            }\n          } else {\n            // just a label, therefore allowed and function returns true\n            result['label'] = linesplit[0];\n            result['instructionWords'] = 1;\n            result['justLabel'] = true;\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  export function parseLineForMachineCode( line, labels ) {\n    var machineCode = [ 0, 65536 ];\n\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n\n    if ( linesplit[0] && linesplit[0] !== '' ) {\n      // lines isnt empty\n      if ( Object.keys( allCommands ).includes( linesplit[0] ) ) {\n        // first word is a command\n        machineCode = generateMachineCode( linesplit[0], linesplit[1], labels );\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( Object.keys( allCommands ).includes( linesplit[1] ) ) {\n              machineCode = generateMachineCode( linesplit[1], linesplit[2], labels );\n            }\n          } else {\n            // is a just a label and must not be recognised as a seperate command so \n            // undefined is returned so that parent method can skip it from being added to machine code\n            machineCode = undefined;\n          }\n        }\n      }\n    }\n\n    return machineCode;\n  }\n\n  function findLineInfo( line ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    var lineResult = {\n      label : ' ',\n      command : '',\n      argument : '',\n      comment : ''\n    };\n\n    if ( line.includes( ';' ) ) lineResult['comment'] = ';' + line.trim().split( ';' )[1];\n\n    if ( linesplit[0] && linesplit[0] !== '' ) {\n      // lines isnt empty\n      if ( Object.keys( allCommands ).includes( linesplit[0] ) ) {\n        // first word is a command\n        lineResult['command'] = linesplit[0];\n        lineResult['argument'] = linesplit[1];\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          lineResult['label'] = linesplit[0] + ' ';\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( Object.keys( allCommands ).includes( linesplit[1] ) ) {\n              lineResult['command'] = linesplit[1];\n              lineResult['argument'] = linesplit[2];\n            }\n          } else {\n            // is just a label\n            lineResult['label'] = linesplit[0] + ' ';\n          }\n        }\n      }\n    }\n\n    return lineResult;\n  }\n\n  function infoToLine( lineResult ) {\n    var line = lineResult['label'];\n\n    var argumentList = [];\n\n    if ( lineResult['command'].length ) {\n      line += lineResult['command'] + ' ';\n\n      switch ( allCommands[lineResult['command']] ) {\n        case 'rr' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'rrr' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          break;\n          \n        case 'jx' :\n          argumentList = lineResult['argument'].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'jumpAlias' :\n          argumentList = lineResult['argument'].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'kx' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += argumentList[0];\n          line += ',';\n\n          argumentList = argumentList[1].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'rx' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n\n          argumentList = argumentList[1].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n          \n        case 'x' :\n          line += readCompatibleConstant( lineResult['argument'] );\n          break;\n\n        case 'noEXP' :\n          // no need for lineResult['argument'] handling as exp0 takes no arguments\n          break;\n\n        case 'rrEXP' :\n          // copy of 'rr' case with a and b changed to d and e respectively\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n\n        case 'rrxEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n\n          argumentList = argumentList[2].split( '[' );\n          line += readCompatibleConstant( argumentList[0] );\n          line += '[';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n\n        case 'rcEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += argumentList[1];\n          break;\n\n        case 'rrrEXP' :\n          // copy of 'rrr' case with d, a, and b changed to d, e, and f respectively\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          break;\n\n        case 'rrkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += argumentList[2];\n          break;\n\n        case 'rkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += argumentList[1];\n          break;\n\n        case 'rrkkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += argumentList[2];\n          line += ',';\n          line += argumentList[3];\n          break;\n\n        case 'rrrkkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          line += ',';\n          line += argumentList[3];\n          line += ',';\n          line += argumentList[4];\n          break;\n\n        case 'rrrkEXP' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          line += ',';\n          line += argumentList[3];\n          break;\n\n        case 'logicAliasRRRK' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          line += ',';\n          line += argumentList[3];\n          break;\n\n        case 'logicAliasRRK' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += argumentList[2];\n          break;\n\n        case 'logicAliasRRR' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          line += ',';\n          line += 'R' + argumentList[2].slice( 1, argumentList[2].length );\n          break;\n\n        case 'logicAliasRR' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += 'R' + argumentList[1].slice( 1, argumentList[1].length );\n          break;\n\n        case 'injectIAlias' :\n          argumentList = lineResult['argument'].split( ',' );\n          line += 'R' + argumentList[0].slice( 1, argumentList[0].length );\n          line += ',';\n          line += argumentList[1];\n          line += ',';\n          line += argumentList[2];\n          break;\n\n        default :\n          break;\n      }\n    }\n\n    line += lineResult['comment'];\n\n    return line;\n  }\n\n  export function parseCodeToCompatible( code ) {\n    var lines = code.split( '\\n' );\n\n    var codeResult = '';\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      codeResult += infoToLine( findLineInfo( lines[i] ) ) + '\\n';\n    }\n\n    return codeResult;\n  }\n\n// RUNNING FUNCTIONS\n  export function setMemory( machineCode ) {\n    var memory = {};\n\n    for ( var i = 0; i < machineCode.length; i++ ) {\n      memory[i] = machineCode[i];\n    }\n\n    return memory;\n  }\n\n  function compareRegisters( RaValue, RbValue, flagDict ) {\n    var RaValueSigned = readSignedHex( RaValue );\n    var RbValueSigned = readSignedHex( RbValue );\n\n    var signedEquals = false;\n\n    // signed comparisons\n    if ( RaValueSigned > RbValueSigned ) {\n      flagDict['g'] = 1;\n    } else if ( RaValueSigned < RbValueSigned ) {\n      flagDict['l'] = 1;\n    } else {\n      signedEquals = true;\n    }\n    \n    // unsigned comparisons\n    if ( RaValue > RbValue ) {\n      flagDict['G'] = 1;\n    } else if ( RaValue < RbValue ) {\n      flagDict['L'] = 1;\n    } else if ( signedEquals ) {\n      flagDict['E'] = 1;\n    }\n\n    return flagDict;\n  }\n\n  function processTRAPInstruction( control, registers, memory, input, output, Rd, Ra, Rb ) {\n    var halted = false;\n\n    switch ( registers[Rd] ) {\n      case 0x0 :\n        halted = true;\n        break;\n\n      case 0x1 :\n        var memoryBufferStartInput = registers[Ra];\n\n        for ( var i = 0; i < registers[Rb]; i++ ) {\n          if ( input.length > i ) {\n            memory[memoryBufferStartInput + i] = input.charCodeAt( i );\n          } else {\n            memory[memoryBufferStartInput + i] = 0;\n          }\n        }\n        output += '>>' + input.slice( 0, registers[Rb] );\n        input = input.slice( registers[Rb], input.length );\n\n        break;\n\n      case 0x2 :\n        var memoryBufferStartOutput = registers[Ra];\n\n        for ( var it = 0; it < registers[Rb]; it++ ) {\n          // if in memory, add to output, else add default memory value\n          if ( memory[memoryBufferStartOutput + it] ) {\n            output += String.fromCharCode( memory[memoryBufferStartOutput + it] );\n          } else {\n            output += String.fromCharCode( 0 );\n          }\n        }\n        break;\n\n      default :\n        break;\n    }\n\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory, \n      'input': input, \n      'output' : output, \n      'halted' : halted \n    };\n  }\n\n  function processRXInstruction( control, registers, memory, Rd, Ra, Op, adr ) {\n    var effectiveADR = registers[Ra] + adr;\n\n    while ( effectiveADR >= 0x10000 ) { effectiveADR -= 0x10000; };\n\n    var jumped = false;\n\n    switch ( Op ) {\n      case 0x0 :\n        // lea\n        registers[Rd] = effectiveADR;\n        break;\n\n      case 0x1 :\n        // load\n        if ( memory[ effectiveADR ] ) {\n          registers[Rd] = memory[ effectiveADR ];\n        } else {\n          registers[Rd] = 0;\n        }\n        break;\n\n      case 0x2 :\n        // store\n        memory[ effectiveADR ] = registers[Rd];\n        break;\n\n      case 0x3 :\n        // jump\n        control['pc'] = effectiveADR;\n        jumped = true;\n        break;\n\n      case 0x4 :\n        // jumpc0\n        if ( ( registers[15] & Math.pow( 2, ( 15 - Rd ) ) ) === 0 ) {\n          control['pc'] = effectiveADR;\n          jumped = true;\n        }\n\n        break;\n\n      case 0x5 :\n        // jumpc1\n        if ( ( registers[15] & Math.pow( 2, ( 15 - Rd ) ) ) > 0 ) {\n          control['pc'] = effectiveADR;\n          jumped = true;\n        }\n\n        break;\n\n      case 0x6 :\n        // jumpf\n        if ( registers[Rd] === 0 ) {\n          control['pc'] = effectiveADR;\n          jumped = true;\n        }\n        break;\n\n      case 0x7 :\n        // jumpt\n        if ( registers[Rd] === 1 ) {\n          control['pc'] = effectiveADR;\n          jumped = true;\n        }\n        break;\n\n      case 0x8 :\n        // jal\n        registers[Rd] = control['pc'] + 2;\n        control['pc'] = effectiveADR;\n        jumped = true;\n        break;\n\n      case 0x9 :\n        // testset\n        registers[Rd] = memory[effectiveADR];\n        memory[effectiveADR] = 1;\n\n        break;\n\n      default :\n\n        break;\n    }\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory,\n      'jumped' : jumped\n    };\n  }\n\n  function processEXPInstruction( control, registers, memory, input, output, Rd, Ra, Rb, adr ) {\n    var halted = false;\n    var jumped = false;\n\n    var flagDict = getR15Dict();\n    var setR15 = false;\n\n    var ab = ( Ra * thirdColumn ) + Rb;\n\n    var Re = Math.floor( adr / firstColumn );\n    var Rf = Math.floor( ( adr - ( Re * firstColumn ) ) / secondColumn );\n\n    var gh = Math.floor( adr - ( Rf * secondColumn ) - ( Re * firstColumn ) );\n\n    var g = Math.floor( gh / thirdColumn );\n    var h = Math.floor( ( gh - ( g * thirdColumn ) ) / fourthColumn );\n\n    var instructionWords = 1;\n\n    switch ( ab ) {\n      case 0x0 :\n        // rfi\n        instructionWords = 1;\n        // currently nop as no interrupt registers to be affected\n\n        break;\n\n      case 0x8 :\n        // save\n        instructionWords = 2;\n        var effectiveADRsave = registers[Rd] + gh;\n\n        var diffSave = 0;\n        if ( Re > Rf ) {\n          diffSave = Math.abs( Re - ( Rf + 16 ) );\n        } else {\n          diffSave = Math.abs( Re - Rf );\n        }\n\n        for ( var iSave = Re; iSave <= ( Re + diffSave ); iSave++ ) {\n          var regNoSave = iSave % 16;\n          memory[effectiveADRsave + ( iSave - Re )] = registers[regNoSave];\n        }\n\n        break;\n\n      case 0x9 :\n        // restore\n        instructionWords = 2;\n        var effectiveADRrestore = registers[Rd] + gh;\n\n        var diffRestore = 0;\n        if ( Re > Rf ) {\n          diffRestore = Math.abs( Re - ( Rf + 16 ) );\n        } else {\n          diffRestore = Math.abs( Re - Rf );\n        }\n\n        for ( var iRestore = Re; iRestore <= ( Re + diffRestore ); iRestore++ ) {\n          var regNoRestore = iRestore % 16;\n          if ( memory[effectiveADRrestore + ( iRestore - Re )] ) {\n            registers[regNoRestore] = memory[effectiveADRrestore + ( iRestore - Re )];\n          } else {\n            registers[regNoRestore] = 0;\n          }\n        }\n\n        break;\n\n      case 0xa :\n        // getctl\n        instructionWords = 2;\n        switch ( g ) {\n          case 1 :\n            registers[Rd] = control['pc'];\n            break;\n\n          case 2 :\n            registers[Rd] = control['ir'];\n            break;\n\n          case 3 :\n            registers[Rd] = control['adr'];\n            break;\n\n          default :\n            break;\n        }\n        break;\n\n      case 0xb :\n        // putctl\n        instructionWords = 2;\n        switch ( g ) {\n          case 1 :\n            control['pc'] = registers[Rd];\n            jumped = true;\n            break;\n\n          case 2 :\n            control['ir'] = registers[Rd];\n            break;\n\n          case 3 :\n            control['adr'] = registers[Rd];\n            break;\n\n          default :\n            break;\n        }\n        break;\n\n      case 0xc :\n        // execute\n        instructionWords = 2;\n\n        if ( !( registers[Re] === 0xe00c && registers[Rf] === adr ) ) {\n\n          var processed = runFromInstruction( control, registers, memory, input, output, registers[Re], registers[Rf] );\n\n          control = processed['control'];\n          registers = processed['registers'];\n          memory = processed['memory'];\n          input = processed['input'];\n          output = processed['output'];\n          halted = processed['halted'];\n          jumped = processed['jumped'];\n\n          // do not update control registers ir and adr as can make reading executed program confusing\n          // control['ir'] = registers[Re];\n          // control['adr'] = registers[Rf];\n\n          control['ir'] = 0xe00c;\n          control['adr'] = adr;\n\n          setR15 = true;\n        } else {\n          halted = true;\n        }\n\n        break;\n\n      case 0xd :\n        // push\n        instructionWords = 2;\n        if ( registers[Re] < registers[Rf] ) {\n          registers[Re] += 1;\n\n          memory[registers[Re]] = registers[Rd];\n        } else {\n          // stack overflow flag set and nop\n          flagDict['S'] = 1;\n          setR15 = true;\n        }\n        break;\n\n      case 0xe :\n        // pop\n        instructionWords = 2;\n        if ( registers[Re] <= registers[Rf] ) {\n          registers[Rd] = memory[registers[Re]];\n\n          registers[Re] -= 1;\n        }\n        break;\n\n      case 0xf :\n        // top\n        instructionWords = 2;\n        registers[Rd] = memory[registers[Re]];\n        break;\n\n      case 0x10 :\n        // shiftl\n        instructionWords = 2;\n        registers[Rd] = registers[Re] << g;\n\n        if ( registers[Rd] >= 0x10000 && Rd !== 15 ) {\n          flagDict['V'] = 1;\n\n          while ( registers[Rd] >= 0x10000 ) { registers[Rd] -= 0x10000; };\n        }\n        setR15 = true;\n        break;\n\n      case 0x11 :\n        // shiftr\n        instructionWords = 2;\n        registers[Rd] = registers[Re] >> g;\n        break;\n\n      case 0x12 :\n        // extract\n        instructionWords = 2;\n        var resultExtract = 0;\n\n        // shiftl Rd,Re,g\n        resultExtract = registers[Re] << g;\n        while ( resultExtract >= 0x10000 ) { resultExtract -= 0x10000; }\n\n        // shiftr Rd,Rr,15-h+g\n        resultExtract = resultExtract >> ( 15 - h + g );\n\n        registers[Rd] = resultExtract;\n        break;\n\n      case 0x13 :\n        // extracti\n        instructionWords = 2;\n        var resultExtractI = 0;\n\n        // inv Rd,Re\n        resultExtractI = ( registers[Re] ^ 0xffff );\n\n        // shiftl Rd,Rd,g\n        resultExtractI = resultExtractI << g;\n        while ( resultExtractI >= 0x10000 ) { resultExtractI -= 0x10000; }\n\n        // shiftr Rd,Rr,15-h+g\n        resultExtractI = resultExtractI >>> ( 15 - h + g );\n\n        registers[Rd] = resultExtractI;\n        break;\n\n      case 0x14 :\n        // inject\n        instructionWords = 2;\n\n        registers[Rd] = setBitInRegisterMultiple( registers[Re], registers[Rf], h, g );\n        break;\n\n      case 0x15 :\n        // injecti\n        instructionWords = 2;\n\n        registers[Rd] = setBitInRegisterMultiple( registers[Re], ( registers[Rf] ^ 0xffff ), h, g );\n        break;\n\n      case 0x16 :\n        // logicw\n        instructionWords = 2;\n\n        switch ( g ) {\n          case 1 :\n            // and\n            registers[Rd] = registers[Re] & registers[Rf];\n            break;\n\n          case 6 :\n            // xor\n            registers[Rd] = registers[Re] ^ registers[Rf];\n            break;\n\n          case 7 :\n            // or\n            registers[Rd] = registers[Re] | registers[Rf];\n            break;\n\n          case 0xc :\n            // inv \n            registers[Rd] = registers[Re] ^ 0xffff;\n            break;\n\n          default :\n            break;\n        };\n\n        break;\n\n      case 0x17 :\n        // logicb\n        instructionWords = 2;\n        switch ( g ) {\n          case 1 :\n            // andb\n            const bitToSetAnd = getBitFromRegister( registers[Re] & registers[Rf], h );\n\n            registers[Rd] = setBitInRegister( registers[Rd], bitToSetAnd, h );\n            break;\n\n          case 6 :\n            // xorb\n            const bitToSetXor = getBitFromRegister( registers[Re] ^ registers[Rf], h );\n\n            registers[Rd] = setBitInRegister( registers[Rd], bitToSetXor, h );\n            break;\n\n          case 7 :\n            // orb\n            const bitToSetOr = getBitFromRegister( registers[Re] | registers[Rf], h );\n\n            registers[Rd] = setBitInRegister( registers[Rd], bitToSetOr, h );\n            break;\n\n          case 0xc :\n            // invb \n            const bitToSetInv = ( getBitFromRegister( registers[Re], h ) ^ 1 );\n\n            registers[Rd] = setBitInRegister( registers[Rd], bitToSetInv, h );\n            break;\n\n          default :\n            break;\n        };\n        break;\n\n      case 0x18 :\n        // getbit\n        instructionWords = 2;\n        \n        const bit = getBitFromRegister( registers[15], g );\n\n        registers[Rd] = bit;\n\n        break;\n\n      case 0x19 :\n        // getbiti\n        instructionWords = 2;\n\n        const bitI = getBitFromRegister( registers[15], g );\n\n        registers[Rd] = ( bitI ^ 1 );\n        \n        break;\n\n      case 0x1a :\n        // putbit\n        instructionWords = 2;\n\n        const bitToSetPut = getBitFromRegister( registers[Rd], g );\n\n        registers[15] = setBitInRegister( registers[15], bitToSetPut, g );\n        break;\n\n      case 0x1b :\n        // putbiti\n        instructionWords = 2;\n        \n        const bitToSetPutI = ( getBitFromRegister( registers[Rd], g ) ^ 1 );\n        \n        registers[15] = setBitInRegister( registers[15], bitToSetPutI, g );\n        break;\n\n      case 0x1c :\n        // addc\n        instructionWords = 2;\n\n        const R15CarryBit = getBitFromRegister( registers[15], 7 );\n        registers[Rd] = registers[Re] + registers[Rf] + R15CarryBit;\n\n        if ( registers[Rd] >= 0x10000 ) {\n          registers[Rd] -= 0x10000;\n          flagDict['V'] = 1;\n          flagDict['C'] = 1;\n        }\n        \n        flagDict = compareRegisters( registers[Rd], registers[0], flagDict );\n        setR15 = true;\n        break;\n\n      default :\n        instructionWords = 1;\n        // unrecognised so nop\n        break;\n    }\n\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory,\n      'input' : input,\n      'output' : output,\n      'instructionWords' : instructionWords,\n      'halted' : halted,\n      'jumped' : jumped,\n      'flagDict' : flagDict,\n      'setR15' : setR15\n    };\n  }\n\n  function runFromInstruction( control, registers, memory, input, output, instructionIr, instructionADR ) {\n    var halted = false;\n    var processed = {};\n\n    var jumped = false;\n\n    var instructionWords = 0;\n\n    var Op = Math.floor( instructionIr / firstColumn );\n    var Rd = Math.floor( ( instructionIr - ( Op * firstColumn ) ) / secondColumn );\n    var Ra = Math.floor( ( instructionIr - ( Rd * secondColumn ) - ( Op * firstColumn ) ) / thirdColumn );\n    var Rb = Math.floor( ( instructionIr - ( Ra * thirdColumn ) - ( Rd * secondColumn ) - ( Op * firstColumn ) ) / fourthColumn );\n\n    var RaValue = registers[Ra];\n    var RbValue = registers[Rb];\n\n    var flagDict = getR15Dict();\n    var setR15 = false;\n\n    control['ir'] = instructionIr;\n    control['adr'] = instructionADR;\n\n    switch ( Op ) {\n      case 0x0 :\n        // add\n        instructionWords = 1;\n        registers[Rd] = RaValue + RbValue;\n\n        if ( registers[Rd] >= 0x10000 ) {\n          registers[Rd] -= 0x10000;\n          flagDict['V'] = 1;\n          flagDict['C'] = 1;\n        }\n        \n        flagDict = compareRegisters( registers[Rd], registers[0], flagDict );\n        setR15 = true;\n\n        break;\n\n      case 0x1 :\n        // sub\n        instructionWords = 1;\n\n        RaValue = readSignedHex( RaValue );\n        RbValue = readSignedHex( RbValue );\n        \n        registers[Rd] = RaValue;\n\n        if ( RaValue < RbValue ) {\n          flagDict['v'] = 1;\n        }\n\n        registers[Rd] -= RbValue;\n        \n        flagDict = compareRegisters( readUnsignedHex( registers[Rd] ), registers[0], flagDict );\n        setR15 = true;\n\n        break;\n\n      case 0x2 :\n        // mul\n        instructionWords = 1;\n        registers[Rd] = RaValue * RbValue;\n\n        if ( registers[Rd] >= 0x10000 ) {\n          flagDict['V'] = 1;\n          while ( registers[Rd] >= 0x10000 ) { registers[Rd] -= 0x10000; };\n        }\n        \n        flagDict = compareRegisters( registers[Rd], registers[0], flagDict );\n        setR15 = true;\n\n        break;\n\n      case 0x3 :\n        // div\n        instructionWords = 1;\n\n        RaValue = readSignedHex( RaValue );\n        RbValue = readSignedHex( RbValue );\n\n        if ( RbValue !== 0 ) {\n          registers[Rd] = Math.floor( RaValue / RbValue );\n          if ( Rd !== 15 ) {\n            registers[15] = RaValue % RbValue;\n          }\n        } else {\n          registers[Rd] = RaValue;\n          if ( Rd !== 15 ) {\n            registers[15] = 0;\n          }\n        }\n\n        // no flags being set in r15 as div works differently\n\n        break;\n\n      case 0x4 :\n        // cmp\n        instructionWords = 1;\n        flagDict = compareRegisters( RaValue, RbValue, flagDict );\n        setR15 = true;\n\n        break;\n\n      case 0x5 :\n        // cmplt\n        instructionWords = 1;\n        ( readSignedHex( RaValue ) < readSignedHex( RbValue ) ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        \n        break;\n\n      case 0x6 :\n        // cmpeq\n        instructionWords = 1;\n        ( readSignedHex( RaValue ) === readSignedHex( RbValue ) ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0x7 :\n        // cmpgt\n        instructionWords = 1;\n        ( readSignedHex( RaValue ) > readSignedHex( RbValue ) ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0x8 :\n        // inv\n        instructionWords = 1;\n        registers[Ra] = RbValue ^ 0xffff;\n\n        break;\n\n      case 0x9 :\n        // and\n        instructionWords = 1;\n        registers[Rd] = registers[Ra] & registers[Rb];\n        break;\n\n      case 0xa :\n        // or\n        instructionWords = 1;\n        registers[Rd] = registers[Ra] | registers[Rb];\n        break;\n\n      case 0xb :\n        // xor\n        instructionWords = 1;\n        registers[Rd] = registers[Ra] ^ registers[Rb];\n        break;\n\n      case 0xc :\n        // nop\n        instructionWords = 1;\n\n        break;\n\n      case 0xd :\n        // trap\n        instructionWords = 1;\n        processed = processTRAPInstruction( control, registers, memory, input, output, Rd, Ra, Rb );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n        input = processed['input'];\n        output = processed['output'];\n\n        halted = processed['halted'];\n\n        break;\n\n      case 0xe :\n        processed = processEXPInstruction( control, registers, memory, input, output, Rd, Ra, Rb, instructionADR );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n        input = processed['input'];\n        output = processed['output'];\n        instructionWords = processed['instructionWords'];\n        halted = processed['halted'];\n        jumped = processed['jumped'];\n        flagDict = processed['flagDict'];\n        setR15 = processed['setR15'];\n\n        break;\n\n      case 0xf :\n        instructionWords = 2;\n        processed = processRXInstruction( control, registers, memory, Rd, Ra, Rb, instructionADR );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n        jumped = processed['jumped'];\n        \n        break;\n\n      default :\n        instructionWords = 1;\n        halted = true;\n        break;\n    }\n\n    if ( Rd !== 15 && setR15 ) {\n      registers[15] = setR15Flags( flagDict );\n    }\n\n    for ( var it = 0; it < 16; it++ ) {\n      if ( registers[it] < 0 ) {\n        registers[it] = readUnsignedHex( registers[it] );\n      }\n    }\n\n    // R0 holds constant 0\n    registers[0] = 0;\n\n    return {\n      'control' : control,\n      'registers' : registers,\n      'memory' : memory,\n      'input' : input,\n      'output' : output,\n      'halted' : halted,\n      'instructionWords' : instructionWords,\n      'jumped' : jumped\n    };\n  }\n\n  export function runMemory( control, registers, memory, input, output ) {\n    var instructionIr = memory[control['pc']];\n    var instructionADR = 0;\n    if ( memory[control['pc'] + 1] ) instructionADR = memory[control['pc'] + 1];\n\n    // run the ir with adr\n    var ran = runFromInstruction( control, registers, memory, input, output, instructionIr, instructionADR );\n\n    control = ran['control'];\n    registers = ran['registers'];\n    memory = ran['memory'];\n    input = ran['input'];\n    output = ran['output'];\n    var halted = ran['halted'];\n    var instructionWords = ran['instructionWords'];\n    var jumped = ran['jumped'];\n\n    if ( !jumped ) control['pc'] += instructionWords;\n\n    // checking that happens outwith running that would break the emulator during next execution\n    if ( Object.values( registers ).includes( NaN ) || Object.values( registers ).includes( undefined )  ) {\n      console.log( control );\n      console.log( registers );\n      console.log( memory );\n\n      output += '==== SEVERE SYSTEM ERROR ====';\n\n      halted = true;\n    }\n\n    return { \n      'control' : control, \n      'registers' : registers, \n      'memory' : memory, \n      'input': input, \n      'output' : output, \n      'halted' : halted \n    };\n  }\n","import React from 'react';\n\nimport 'codemirror/lib/codemirror.css';\nimport './ProgramEditorView.css';\n\nimport { Link } from 'react-router-dom';\nimport { Alert, Button, ButtonGroup, Col, InputGroup, Modal, OverlayTrigger, Row, ToggleButton, ToggleButtonGroup, Tooltip } from 'react-bootstrap';\nimport { FaBug, FaCheck, FaChevronDown, FaDownload, FaHammer, FaPen, FaPlay, FaTimes } from 'react-icons/fa';\nimport CodeMirror from 'react-codemirror';\n\nimport * as Emulator from './utils/Emulator';\n\nimport NavBar from './NavBar';\n\nrequire( './utils/mode/sigma16' );\n\nexport default class ProgramEditorView extends React.PureComponent {\n// CLASS METHODS\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n\n      lineError : {},\n\n      highlightedCodeChunk : true,\n\n      alertShow : false,\n      alertMessage : '',\n      alertNature : 'success',\n\n      runModalShow : false,\n      outputZoomed : false,\n\n      inputModalShow : false,\n\n      downloadModalShow : false,\n      downloadAs : 0,\n      fileName : 'S16DownloadFile',\n\n      lineCompWarn : {},\n      lineCompError : {},\n\n      machineCode : [],\n      machineCodeUpdated : false,\n\n      registers : {\n        0 : 0,\n        1 : 0,\n        2 : 0,\n        3 : 0,\n        4 : 0,\n        5 : 0,\n        6 : 0,\n        7 : 0,\n        8 : 0,\n        9 : 0,\n        10 : 0,\n        11 : 0,\n        12 : 0,\n        13 : 0,\n        14 : 0,\n        15 : 0\n      },\n      cpuControl : {\n        'pc' : 0,\n        'ir' : 0,\n        'adr' : 0\n      },\n\n      memory : {},\n\n      output : '',\n\n      input : ''\n    };\n  }\n\n  componentDidMount() {\n    if ( this.props.location.state ) {\n      this.setState( { \n        code : this.props.location.state.code, \n        breakpoints : this.props.location.state.breakpoints, \n        input : this.props.location.state.input \n      } );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( { \n        code : this.props.code, \n        breakpoints : this.props.breakpoints, \n        input : this.props.input \n      } );\n    }\n  }\n\n// BREAKPOINTS\n  breakpointsColumn( code ) {\n    var breakpoints = [];\n    var lines = code.split( '\\n' );\n\n    var codeArea = document.getElementById( 'code-area' );\n\n    if ( codeArea ) {\n      // deal with code chunk height in this function since only column rendered\n      codeArea.style.height = ( 25 * ( lines.length ) ) + 18 + 'px';\n\n      for ( var i = 0; i < lines.length; i++ ) {\n        var yOffset = 25 * ( i + 0.75 );\n        var styleTop = yOffset + 3 +'px';\n\n        var id = 'breakpoint ' + ( i + 1 );\n        var className = 'breakpoint ' + ( i + 1 );\n\n        if ( this.state.breakpoints.includes( i + 1 ) ) {\n          className = className + ' active';\n        } \n\n        var error = '';\n\n        if ( Object.keys( this.state.lineError ).includes( String( i + 1 ) ) ) {\n          className = className + ' error';\n\n          error = this.state.lineError[String( i + 1 )];\n\n          breakpoints.push( \n            <OverlayTrigger\n              key={className+' tooltip'}\n              placement={'right'}\n              overlay={\n                <Tooltip>\n                  {error}\n                </Tooltip>\n              }>\n              <div \n                key={id}\n                id={id} \n                className={className} \n                style={{top : styleTop}} \n                onClick={this.breakpointOnClick}/>\n            </OverlayTrigger>\n          );\n        } else if ( Object.keys( this.state.lineCompWarn ).includes( String( i + 1 ) ) ) {\n          className = className + ' compwarn';\n\n          error = this.state.lineCompWarn[String( i + 1 )]['warn'];\n\n          breakpoints.push( \n            <OverlayTrigger\n              key={className+' tooltip'}\n              placement={'right'}\n              overlay={\n                <Tooltip>\n                  {error}\n                </Tooltip>\n              }>\n              <div \n                key={id}\n                id={id} \n                className={className} \n                style={{top : styleTop}} \n                onClick={this.breakpointOnClick}/>\n            </OverlayTrigger>\n          );\n        } else if ( Object.keys( this.state.lineCompError ).includes( String( i + 1 ) ) ) {\n          className = className + ' comperror';\n\n          error = this.state.lineCompError[String( i + 1 )]['error'];\n\n          breakpoints.push( \n            <OverlayTrigger\n              key={className+' tooltip'}\n              placement={'right'}\n              overlay={\n                <Tooltip>\n                  {error}\n                </Tooltip>\n              }>\n              <div \n                key={id}\n                id={id} \n                className={className} \n                style={{top : styleTop}} \n                onClick={this.breakpointOnClick}/>\n            </OverlayTrigger>\n          );\n        } else {\n          breakpoints.push( \n            <div \n              key={id}\n              id={id} \n              className={className} \n              style={{top : styleTop}} \n              onClick={this.breakpointOnClick}/>\n          );\n        }\n      }\n      return breakpoints;\n    }\n  }\n\n  breakpointOnClick = breakpoint => {\n    var breakpoints = this.state.breakpoints;\n\n    if ( breakpoint.currentTarget.classList.contains( 'active' ) ) {\n      breakpoint.currentTarget.classList.remove( 'active' );\n      var index = breakpoints.indexOf( Number( breakpoint.currentTarget.id.slice( 'breakpoint '.length, breakpoint.currentTarget.id.length ) ) );\n      breakpoints.splice( index, 1 );\n    } else {\n      breakpoint.currentTarget.classList.add( 'active' );\n      breakpoints.push( Number( breakpoint.currentTarget.id.slice( 'breakpoint '.length, breakpoint.currentTarget.id.length ) ) );\n    }\n\n    this.setState( { breakpoints : breakpoints } );\n  }\n\n  disableBreakpoints = button => {\n    this.setState( { breakpoints : [], lineError : {}, lineCompWarn : {}, lineCompError : {} } );\n  }\n\n// REGISTER/MEMORY METHODS\n  controlColumn() {\n    var controls = [];\n    var controlKeys = Object.keys( this.state.cpuControl );\n\n    for ( var i = 0; i < controlKeys.length; i++ ) {\n      controls.push( \n        <div \n          key={'control ' + controlKeys[i]}\n          id={'control ' + controlKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{controlKeys[i]}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n                ${Emulator.writeHex( this.state.cpuControl[controlKeys[i]] )}\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return controls;\n  }\n  //\n  registerColumn() {\n    var registers = [];\n\n    for ( var i = 0; i < 16; i++ ) {\n      registers.push( \n        <div \n          key={'register ' + i}\n          id={'register ' + i}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{'R'+i}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.registers[i] )}/{ Emulator.readSignedHex( this.state.registers[i] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.registers[i] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return registers;\n  }\n  //\n  outputColumn() {\n    return ( \n      <div style={{height:'100%', width:'100%'}}>\n        <InputGroup \n          className='output-area'\n          as='textarea'\n          value={this.state.output}\n          onClick={this.resizeOutput}\n          disabled/>\n      </div>\n    );\n  }\n  //\n  memoryColumn() {\n    var memoryValues = [];\n    var memoryKeys = Object.keys( this.state.memory ).map( key => Number( key ) );\n\n    for ( var i = 0; i < memoryKeys.length; i++ ) {\n      memoryValues.push( \n        <div \n          key={'memory ' + memoryKeys[i]}\n          id={'memory ' + memoryKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>${Emulator.writeHex( memoryKeys[i] )}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.memory[memoryKeys[i]] ) }/{ Emulator.readSignedHex( this.state.memory[memoryKeys[i]] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.memory[memoryKeys[i]] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return memoryValues;\n  }\n\n// ALERT METHODS\n  updateAlert( message, nature ) {\n    this.setState( { alertMessage : message, alertNature : nature, alertShow : true } );\n  }\n\n  closeAlert = alert => {\n    this.setState( { alertShow : false } );\n  }\n\n// RUN MODAL METHODS\n  runModalClose = modal => {\n    this.resetCPUandMemory();\n    this.setState( { runModalShow : false } );\n  }\n\n  resizeOutput = outputColumn => {\n    var target = outputColumn.currentTarget;\n\n    // if currently zoomed and are setting to smaller\n    if ( this.state.outputZoomed ) {\n      target.style.height = '82px';\n    } else {\n      target.style.height = '518px';\n    }\n\n    this.setState( { outputZoomed : !( this.state.outputZoomed ) } );\n  }\n\n// CHECKING METHOD\n  checkCode( code ) {\n    var lines = code.split( '\\n' );\n    var check = true;\n\n    var lineErrorCopy = {};\n\n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var ranSuccessfully = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      parsed = Emulator.parseLineForLabels( lines[i] );\n\n      if ( parsed['label'] !== '' ) {\n        if ( parsed['justLabel'] ) {\n          justLabelOffset += 1;\n          labels[parsed['label']] = currentLine - justLabelOffset + 1;\n        } else {\n          labels[parsed['label']] = currentLine - justLabelOffset;\n        }\n      }\n\n      currentLine += parsed['instructionWords'];\n    }\n\n    for ( var it = 0; it < lines.length; it++ ) {\n      check = Emulator.checkLine( lines[it], labels );\n      if ( check.length ) {\n        lineErrorCopy[it + 1] = check;\n        ranSuccessfully = false;\n      }\n    }\n\n    this.setState( { lineError : lineErrorCopy } );\n\n    return [ranSuccessfully, lineErrorCopy];\n  }\n\n// PARSING METHOD\n  parseCode = button => {\n    var lines = this.state.code.split( '\\n' );\n    \n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var machineCode = [];\n\n    var check = this.checkCode( this.state.code );\n\n    if ( check[0] ) {\n      for ( var i = 0; i < lines.length; i++ ) {\n        parsed = Emulator.parseLineForLabels( lines[i] );\n\n        if ( parsed['label'] !== '' ) {\n          if ( parsed['justLabel'] ) {\n            justLabelOffset += 1;\n            labels[parsed['label']] = currentLine - justLabelOffset + 1;\n          } else {\n            labels[parsed['label']] = currentLine - justLabelOffset;\n          }\n        }\n\n        currentLine += parsed['instructionWords'];\n      }\n\n      for ( var it = 0; it < lines.length; it++ ) {\n        var trimmed = lines[it].trim();\n        if ( trimmed !== '' && trimmed.split( ';' )[0] !== '' ) {\n          parsed = Emulator.parseLineForMachineCode( lines[it], labels );\n          if ( parsed ) {\n            machineCode.push( parsed[0] );\n            \n            // if two word instruction\n            if ( Emulator.isValidNumber( Emulator.readSignedHex( parsed[1] ) ) ) {\n              machineCode.push( parsed[1] );\n            }\n          }\n        }\n      }\n      this.setState( { machineCode : machineCode, machineCodeUpdated : true } );\n\n      this.updateAlert( 'Built successfully', 'success' );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n    }\n\n    return machineCode;\n  }\n\n// RUNNING METHODS\n  resetCPUandMemory() {\n    var registersNew = {\n      0 : 0,\n      1 : 0,\n      2 : 0,\n      3 : 0,\n      4 : 0,\n      5 : 0,\n      6 : 0,\n      7 : 0,\n      8 : 0,\n      9 : 0,\n      10 : 0,\n      11 : 0,\n      12 : 0,\n      13 : 0,\n      14 : 0,\n      15 : 0\n    };\n\n    var cpuControlNew = {\n      'pc' : 0,\n      'ir' : 0,\n      'adr' : 0\n    };\n\n    var outputNew = '';\n\n    this.setState( { registers : registersNew, cpuControl : cpuControlNew, output : outputNew } );\n  }\n\n  canRunCode( code, machineCode ) {\n    var error = true;\n\n    if ( machineCode.length !== 0 ) {\n      if ( !machineCode.includes( 0xd000 ) ) {\n        error = 'Cannot run code without a \"trap R0,R0,R0\" instruction';\n      }\n    } else {\n      // machine language is blank\n      error = 'Cannot run no code. Try building then running';\n    }\n    return error;\n  }\n\n  runCode = button => {\n    // implicit build if needed\n    var machineCode = [];\n    if ( this.state.machineCodeUpdated ) {\n      machineCode = this.state.machineCode;\n    } else {\n      machineCode = this.parseCode();\n    }\n\n    var canRun = this.canRunCode( this.state.code, machineCode );\n    var ran = {\n      halted : false\n    };\n\n    if ( !canRun.length ) {\n      var localControl = this.state.cpuControl;\n      var localRegisters = this.state.registers;\n      var localMemory = Emulator.setMemory( machineCode );\n      var localInput = this.state.input;\n      var localOutput = this.state.output;\n\n      while ( !( ran['halted'] ) ) {\n        ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n        localControl = ran['control'];\n        localRegisters = ran['registers'];\n        localMemory = ran['memory'];\n        localInput = ran['input'];\n        localOutput = ran['output'];\n\n        // if ran out of commands\n        if ( !( Object.keys( localMemory ).includes( String( localControl['pc'] ) ) ) ) ran['halted'] = true;\n      }\n\n      this.setState( { \n        cpuControl : localControl, \n        registers : localRegisters,\n        memory : localMemory, \n        output : localOutput, \n        outputZoomed : false, \n        runModalShow : true \n      } );\n    } else {\n      this.updateAlert( canRun, 'danger' );\n    }\n  }\n\n// INPUT MODAL METHODS\n  setInput = button => {\n    this.setState( { inputModalShow : true } );\n  }\n\n  inputUpdate = textarea => {\n    this.setState( { input : textarea.target.value } );\n  }\n\n  inputModalClose = modal => {\n    this.setState( { inputModalShow : false } );\n  }\n\n// DOWNLOADING METHODS\n  downloadFile( name, content, mimeType='text/plain' ) {\n    var element = document.createElement( 'a' );\n    element.setAttribute( 'href', 'data:' + mimeType + ';charset=utf-8,' + encodeURIComponent( content ) );\n    element.setAttribute( 'download', name );\n\n    element.style.display = 'none';\n    document.body.appendChild( element );\n\n    element.click();\n\n    document.body.removeChild( element );\n  }\n\n  downloadRaw = button => {\n    const check = this.checkCode( this.state.code );\n\n    if ( check[0] ) {\n      var textValue = this.state.fileName;\n      if ( !( textValue.endsWith( '.asm.txt' ) ) ) {\n        if ( textValue.endsWith( '.asm' ) ) {\n          textValue += '.txt';\n        } else if ( !( textValue.endsWith( '.txt' ) ) ) {\n          textValue += '.asm.txt';\n        }\n      }\n\n      this.downloadFile( textValue, this.state.code );\n      this.updateAlert( 'Download successful', 'success' );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var i = 0; i < keys.length; i++ ) {\n        if ( i !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[i];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  downloadRawCompatible() {\n    const check = this.checkCode( this.state.code );\n\n    var i = 0;\n    var keys;\n    var keysString;\n\n    if ( check[0] ) {\n      const checkCompatible = Emulator.checkCodeIsCompatible( this.state.code );\n      if ( checkCompatible[0] ) {\n        var textValue = this.state.fileName;\n        if ( !( textValue.endsWith( '.asm.txt' ) ) ) {\n          if ( textValue.endsWith( '.asm' ) ) {\n            textValue += '.txt';\n          } else if ( !( textValue.endsWith( '.txt' ) ) ) {\n            textValue += '.asm.txt';\n          }\n        }\n\n        this.downloadFile( textValue, Emulator.parseCodeToCompatible( this.state.code ) );\n\n        keys = Object.keys( checkCompatible[1] );\n        if ( keys.length ) {\n          keysString = '';\n\n          for ( i = 0; i < keys.length; i++ ) {\n            if ( i !== 0 ) {\n              keysString += ', ';\n            }\n\n            keysString += keys[i];\n          }\n\n          this.setState( { lineCompWarn : checkCompatible[1], lineCompError : checkCompatible[2] } );\n          this.updateAlert( 'Download shall continue however, some only partially compatible commands in code at line(s): ' + keysString, 'warning' );\n        } else {\n          this.setState( { lineCompWarn : {}, lineCompError : {} } );\n          this.updateAlert( 'Download successful', 'success' );\n        }\n      } else {\n        keys = Object.keys( checkCompatible[2] );\n        keysString = '';\n\n        for ( i = 0; i < keys.length; i++ ) {\n          if ( i !== 0 ) {\n            keysString += ', ';\n          }\n\n          keysString += keys[i];\n        }\n\n        this.setState( { lineCompWarn : checkCompatible[1], lineCompError : checkCompatible[2] } );\n        this.updateAlert( 'Download cannot continue as some fully non compatible commands in code at line(s): ' + keysString, 'danger' );\n      }\n    } else {\n      keys = Object.keys( check[1] );\n      keysString = '';\n\n      for ( i = 0; i < keys.length; i++ ) {\n        if ( i !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[i];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  downloadBinary() {\n    const check = this.checkCode( this.state.code );\n\n    if ( check[0] ) {\n      var machineCode = this.parseCode();\n      var stream = '';\n\n      var currentLine = 0;\n        \n      for ( var i = 0; i < machineCode.length; i++ ) {\n        stream += Emulator.writeHex( machineCode[i] );\n        if ( currentLine === 7 ) {\n          stream += '\\n';\n          currentLine = 0;\n        } else if ( i !== ( machineCode.length - 1 ) ) {\n          stream += ' ';\n          currentLine += 1;\n        }\n      }\n\n      var textValue = this.state.fileName;\n      textValue += '.bin';\n\n      this.downloadFile( textValue, stream, 'application/mac-binary' );\n      this.updateAlert( 'Download successful', 'success' );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var it = 0; it < keys.length; it++ ) {\n        if ( it !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[it];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  downloadHex() {\n    const check = this.checkCode( this.state.code );\n\n    if ( check[0] ) {\n      var machineCode = this.parseCode();\n      var stream = '';\n\n      for ( var i = 0; i < machineCode.length; i++ ) {\n        stream += 'data $' + Emulator.writeHex( machineCode[i] ) + '\\n';\n      }\n\n      var textValue = this.state.fileName;\n      if ( !( textValue.endsWith( '.asm.txt' ) ) ) {\n        if ( textValue.endsWith( '.asm' ) ) {\n          textValue += '.txt';\n        } else if ( !( textValue.endsWith( '.txt' ) ) ) {\n          textValue += '.asm.txt';\n        }\n      }\n\n      this.downloadFile( textValue, stream );\n      this.updateAlert( 'Download successful', 'success' );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var it = 0; it < keys.length; it++ ) {\n        if ( it !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[it];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  downloadHexCompatible() {\n    const check = this.checkCode( this.state.code );\n\n    var i = 0;\n    var keys;\n    var keysString;\n\n    if ( check[0] ) {\n      const checkCompatible = Emulator.checkCodeIsCompatible( this.state.code );\n      if ( checkCompatible[0] ) {\n        var machineCode = this.parseCode();\n        var stream = '';\n\n        for ( i = 0; i < machineCode.length; i++ ) {\n          stream += ' data $' + Emulator.writeHex( machineCode[i] ) + '\\n';\n        }\n\n        var textValue = this.state.fileName;\n        if ( !( textValue.endsWith( '.asm.txt' ) ) ) {\n          if ( textValue.endsWith( '.asm' ) ) {\n            textValue += '.txt';\n          } else if ( !( textValue.endsWith( '.txt' ) ) ) {\n            textValue += '.asm.txt';\n          }\n        }\n\n        this.downloadFile( textValue, stream );\n        this.updateAlert( 'Download successful', 'success' );\n\n        keys = Object.keys( checkCompatible[1] );\n        if ( keys.length ) {\n          keysString = '';\n\n          for ( i = 0; i < keys.length; i++ ) {\n            if ( i !== 0 ) {\n              keysString += ', ';\n            }\n\n            keysString += keys[i];\n          }\n\n          this.setState( { lineCompWarn : checkCompatible[1], lineCompError : checkCompatible[2] } );\n          this.updateAlert( 'Download can continue however, some only partially compatible commands in code at line(s): ' + keysString, 'warning' );\n        } else {\n          this.setState( { lineCompWarn : {}, lineCompError : {} } );\n          this.updateAlert( 'Download successful', 'success' );\n        }\n      } else {\n        keys = Object.keys( checkCompatible[2] );\n        keysString = '';\n\n        for ( i = 0; i < keys.length; i++ ) {\n          if ( i !== 0 ) {\n            keysString += ', ';\n          }\n\n          keysString += keys[i];\n        }\n\n        this.setState( { lineCompWarn : checkCompatible[1], lineCompError : checkCompatible[2] } );\n        this.updateAlert( 'Download cannot continue as some fully non compatible commands in code at line(s): ' + keysString, 'danger' );\n      }\n    } else {\n      keys = Object.keys( check[1] );\n      keysString = '';\n\n      for ( i = 0; i < keys.length; i++ ) {\n        if ( i !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[i];\n      }\n\n      this.updateAlert( 'Download cannot continue as code does not build and therefore will be uncompatible. Errors at line(s): ' + keysString, 'danger' );\n    }\n  }\n\n  fileNameUpdate = textarea => {\n    this.setState( { fileName : textarea.target.value } );\n  }\n\n  fileNameHandleKeyDown = e => {\n    if (e.key === 'Enter') {\n      this.downloadModalClose();\n    }\n  }\n\n  downloadModalClose = modal => {\n    switch ( this.state.downloadAs ) {\n      case 0 :\n        this.downloadRaw();\n        break;\n\n      case 1 :\n        this.downloadRawCompatible();\n        break;\n\n      case 2 :\n        this.downloadBinary();\n        break;\n\n      case 3 :\n        this.downloadHex();\n        break;\n\n      case 4 :\n        this.downloadHexCompatible();\n        break;\n\n      default :\n        this.updateAlert( 'Download cannot continue due to internal website error. Try to contact Jim Carty.', 'danger' );\n        break;\n    }\n\n    this.setState( { downloadModalShow : false } );\n  }\n\n  downloadModalCloseNon = modal => {\n    this.setState( { downloadModalShow : false } );\n  }\n\n  downloadModalOpen = button => {\n    this.setState( { downloadModalShow : true } );\n  }\n\n  downloadModalRadio = value => {\n    this.setState( { downloadAs : value } );\n  }\n\n// CODEMIRROR METHODS\n  updateCode = newCode => {\n    if ( !( newCode.split( '\\n' ).length > 500 ) ) {\n      this.checkCode( newCode );\n    }\n\n    // updating code based on contents of codemirror\n    if ( newCode ) {\n      this.setState( { code : newCode, machineCodeUpdated : false } );\n    } else {\n      this.setState( { code : ' ', machineCodeUpdated : false } );\n    }\n  }\n\n// CODE CHUNK METHODS\n  createLineNumberColumn() {\n    var linesOfCode = this.state.code.split( '\\n' ).length;\n    var result = [];\n\n    var lineNoWidth = '21px';\n\n    var lineNoWidthLength = ( Math.log( linesOfCode ) * Math.LOG10E + 1 ) | 0;\n\n    if ( lineNoWidthLength > 2 ) {\n      lineNoWidth = ( ( lineNoWidthLength * 7 ) + 7 ) + 'px';\n    }\n\n    for ( var i = 0; i < linesOfCode; i++ ) {\n      var yOffset = 25 * ( i + 0.5 );\n\n      result.push(\n        <div\n          key={'line-number ' + ( i + 1 )} \n          className='line-number'\n          style={{top:{yOffset}, width:lineNoWidth}}>\n          {i + 1}\n        </div>\n      );\n    }\n\n    return result;\n  }\n  //\n  codeBlockEdit = divContent => {\n    if ( !( divContent.target.value.split( '\\n' ).length > 500 ) ) {\n      this.checkCode( divContent.target.value );\n    }\n\n    if ( divContent.target.value ) {\n      this.setState( { code : divContent.target.value, machineCodeUpdated : false } );\n    } else {\n      this.setState( { code : ' ', machineCodeUpdated : false } );\n    }\n  }\n\n  toggleHighlighting = button => {\n    this.setState( { highlightedCodeChunk : !( this.state.highlightedCodeChunk ) } );\n  }\n\n// RENDER\n  render() {\n    return(\n      <React.Fragment>\n        <NavBar state={{code : this.state.code, breakpoints : this.state.breakpoints, input : this.state.input}}/>\n        <Modal\n          show={this.state.runModalShow}\n          onHide={this.runModalClose}\n          dialogClassName=\"runmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Program Register and Memory Values\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            { !( this.state.outputZoomed ) &&\n              <Row>\n                <Col>\n                  <h6>\n                    Control/Registers\n                  </h6>\n                </Col>\n                <Col>\n                  <h6>\n                    Memory/Output\n                  </h6>\n                </Col>\n              </Row>\n            }\n            <Row>\n              { !( this.state.outputZoomed ) &&\n                <Col className='runmodal-left-col'>\n                  <div id='control-column' className='control-column'>\n                    {this.controlColumn()}\n                  </div>\n                  <div id='register-column' className='register-column'>\n                    {this.registerColumn()}\n                  </div>\n                </Col>\n              }\n              <Col>\n                { !( this.state.outputZoomed ) &&\n                  <div id='memory-column-small' className='memory-column small'>\n                    {this.memoryColumn()}\n                  </div>\n                }\n                <div id='output-column' className='output-column' onDoubleClick={this.resizeOutput}>\n                  {this.outputColumn()}\n                </div>\n              </Col>\n            </Row>\n          </Modal.Body>\n        </Modal>\n\n        <Modal\n          show={this.state.inputModalShow}\n          onHide={this.inputModalClose}\n          dialogClassName=\"inputmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Set Input\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className='input-modal-column'>\n              <InputGroup\n                as='textarea'\n                className='input-modal-input'\n                value={this.state.input}\n                onChange={this.inputUpdate}\n                autoFocus/>\n            </div>\n            <div style={{paddingTop : '15px'}}>\n              <Button variant='outline-secondary' onClick={this.inputModalClose} style={{float : 'right'}}>\n                Set Input\n              </Button>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <Modal\n          show={this.state.downloadModalShow}\n          onHide={this.downloadModalCloseNon}\n          dialogClassName=\"downloadmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Export As...\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className='export-choices' style={{paddingBottom : '15px'}}>\n              <ToggleButtonGroup \n                type='radio' \n                name='export-choices' \n                defaultValue={this.state.downloadAs} \n                onChange={this.downloadModalRadio}>\n                <ToggleButton variant='outline-secondary' value={0}>\n                  Raw\n                </ToggleButton>\n                <ToggleButton variant='outline-secondary' value={1}>\n                  Raw compatible\n                </ToggleButton>\n                <ToggleButton variant='outline-secondary' value={2}>\n                  Binary\n                </ToggleButton>\n                <ToggleButton variant='outline-secondary' value={3}>\n                  Hex\n                </ToggleButton>\n                <ToggleButton variant='outline-secondary' value={4}>\n                  Hex compatible\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </div>\n            <div className='download-modal-column'>\n              <InputGroup\n                as='textarea'\n                id='download-modal-download'\n                className='download-modal-download'\n                value={this.state.fileName}\n                onChange={this.fileNameUpdate}\n                onKeyDown={this.fileNameHandleKeyDown}\n                autoFocus/>\n            </div>\n            <div style={{paddingTop : '15px'}}>\n              <OverlayTrigger\n                key={`download-tooltip`}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    {`Download also started by pressing enter in file name field`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' onClick={this.downloadModalClose} style={{float : 'right'}}>\n                  <FaDownload/> Download \n                </Button>\n              </OverlayTrigger>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <div className='mainbody'>\n          <Alert variant={this.state.alertNature} onClose={this.closeAlert} show={this.state.alertShow} dismissible>\n            <p className='alertbody'>\n              {this.state.alertMessage}\n            </p>\n          </Alert>\n          <Row className='buttontoolbar'>\n            <Col>\n              <ButtonGroup>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Set input`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.setInput}>\n                    <FaPen/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Build`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.parseCode}>\n                    <FaHammer/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.runCode}>\n                    <FaPlay/>\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n            </Col>\n            <Col>\n              <OverlayTrigger\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Disable all breakpoints`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.disableBreakpoints}>\n                  <FaTimes/>\n                </Button>\n              </OverlayTrigger>\n              {' '}\n              \n              <Link to={{\n                pathname : \"/debug\",\n                state : {code : this.state.code, breakpoints : this.state.breakpoints, input : this.state.input}\n                }}>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run in debug mode`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm'>\n                    <FaBug/>\n                  </Button>\n                </OverlayTrigger>\n              </Link>\n            </Col>\n            <Col>\n              <OverlayTrigger\n                key={`highlighting-tooltip`}\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Toggle highlighting\n                    improves speed if disabled`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.toggleHighlighting} active={this.state.highlightedCodeChunk}>\n                  <FaCheck/>\n                </Button>\n              </OverlayTrigger>\n              {' '}\n              <ButtonGroup>\n                <OverlayTrigger\n                  key={`export-tooltip`}\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Download current code as is`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size ='sm' onClick={this.downloadRaw}>\n                    <FaDownload/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  key={`export-choices-tooltip`}\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Download current code \n                      chunk in different formats`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size ='sm' onClick={this.downloadModalOpen}>\n                    <FaChevronDown/>\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div id=\"code-area\" className='code-area'> \n                <div id='breakpoint-column' className='breakpoint-column'>\n                  {this.breakpointsColumn(this.state.code)}\n                </div>\n                <div className='line-number-column'>\n                  {this.createLineNumberColumn()}\n                </div>\n                { this.state.code &&\n                  <React.Fragment>\n                    { this.state.highlightedCodeChunk ?\n                      <CodeMirror\n                        mode='sigma16'\n                        value={this.state.code} \n                        onChange={this.updateCode} \n                        options={{ lineNumbers : false, scrollbarStyle: \"null\" }}\n                        autoFocus/>\n                    : \n                      <InputGroup\n                        as='textarea'\n                        className='code-chunk-column'\n                        value={this.state.code}\n                        onChange={this.codeBlockEdit}\n                        autoFocus/>\n                    }\n                  </React.Fragment>\n                }\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport 'codemirror/lib/codemirror.css';\nimport './ProgramDebugView.css';\n\nimport { Alert, Button, ButtonGroup, Col, Collapse, InputGroup, Modal, OverlayTrigger, Row, Tooltip } from 'react-bootstrap';\nimport { FaBackward, FaCheck, FaMinus, FaPen, FaPlay, FaStepForward, FaTimes } from 'react-icons/fa';\nimport CodeMirror from 'react-codemirror';\n\nimport * as Emulator from './utils/Emulator';\n\nimport NavBar from './NavBar';\n\nexport default class ProgramDebugView extends React.Component {\n// CLASS METHODS \n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n\n      highlightedCodeChunk : true,\n\n      alertShow : false,\n      alertMessage : '',\n      alertNature : 'success',\n\n      inputModalShow : false,\n\n      machineCode : [],\n\n      registers : {\n        0 : 0,\n        1 : 0,\n        2 : 0,\n        3 : 0,\n        4 : 0,\n        5 : 0,\n        6 : 0,\n        7 : 0,\n        8 : 0,\n        9 : 0,\n        10 : 0,\n        11 : 0,\n        12 : 0,\n        13 : 0,\n        14 : 0,\n        15 : 0\n      },\n      cpuControl : {\n        'pc' : 0,\n        'ir' : 0,\n        'adr' : 0\n      },\n\n      memory : {},\n\n      output : '',\n\n      input : '',\n\n      // special methods for debugging\n      lastLine : 0,\n      activeLine : 0,\n\n      breakpointsMachineCode : [],\n\n      halted : false,\n\n      inputRan : '',\n\n      memoryToLine : {},\n      lineToMemory : {},\n\n      showCodeChunk : true,\n      renderCodeChunk : true,\n\n      outputModalShow : false\n    };\n  }\n\n  componentDidMount() {\n    var code = '';\n    var breakpoints = [];\n    if ( this.props.location.state ) {\n      code = this.props.location.state.code;\n      breakpoints = this.props.location.state.breakpoints;\n\n      this.setState( { code : this.props.location.state.code, breakpoints : this.props.location.state.breakpoints, input : this.props.location.state.input, inputRan : this.props.location.state.input } );\n    } else if ( this.props.code !== undefined ) {\n      code = this.props.code;\n      breakpoints = this.props.breakpoints;\n\n      this.setState( { code : this.props.code, breakpoints : this.props.breakpoints, input : this.props.input, inputRan : this.props.input } );\n    }\n    var machineCode = this.parseCode( code, breakpoints );\n\n    this.setState( { memory : Emulator.setMemory( machineCode ) } );\n  }\n\n// ALERT METHODS\n  updateAlert( message, nature ) {\n    this.setState( { alertMessage : message, alertNature : nature, alertShow : true } );\n  }\n\n  closeAlert = alert => {\n    this.setState( { alertShow : false } );\n  }\n\n// REGISTER/MEMORY METHODS\n  controlColumn() {\n    var controls = [];\n    var controlKeys = Object.keys( this.state.cpuControl );\n\n    for ( var i = 0; i < controlKeys.length; i++ ) {\n      controls.push( \n        <div \n          key={'control ' + controlKeys[i]}\n          id={'control ' + controlKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{controlKeys[i]}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n                ${Emulator.writeHex( this.state.cpuControl[controlKeys[i]] )}\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return controls;\n  }\n  //\n  inputColumn() {\n    return ( \n      <div style={{height:'100%', width:'100%'}}>\n        <InputGroup \n          className='input-area'\n          as='textarea'\n          value={this.state.inputRan}\n          disabled/>\n      </div>\n    );\n  } \n  //\n  registerColumn() {\n    var registers = [];\n\n    for ( var i = 0; i < 16; i++ ) {\n      registers.push( \n        <div \n          key={'register ' + i}\n          id={'register ' + i}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{'R'+i}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.registers[i] )}/{ Emulator.readSignedHex( this.state.registers[i] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.registers[i] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return registers;\n  }\n  //\n  outputColumn() {\n    return ( \n      <div style={{height:'100%', width:'100%'}} onDoubleClick={this.outputModalOpen}>\n        <InputGroup \n          className='output-area'\n          as='textarea'\n          value={this.state.output}\n          onDoubleClick={this.outputModalOpen}\n          disabled/>\n      </div>\n    );\n  }\n  //\n  memoryColumn() {\n    var memoryValues = [];\n    var memoryKeys = Object.keys( this.state.memory ).map( key => Number( key ) );\n\n    for ( var i = 0; i < memoryKeys.length; i++ ) {\n      var classNameMemory = 'systeminfo-column-elem';\n      var decoration = '';\n      \n      if ( i === this.state.lastLine && this.state.lastLine !== this.state.activeLine ) classNameMemory = 'systeminfo-column-elem last';\n      if ( i === this.state.activeLine && !( this.state.halted ) ) classNameMemory = 'systeminfo-column-elem active';\n      if ( this.state.breakpointsMachineCode.includes( i ) ) decoration = 'underline';\n\n      memoryValues.push( \n        <div \n          key={'memory ' + memoryKeys[i]}\n          id={'memory ' + memoryKeys[i]}\n          className={classNameMemory}>\n          <Row style={{textDecoration : decoration}}>\n            <Col className={classNameMemory}>\n              <strong>${Emulator.writeHex( memoryKeys[i] )}</strong>\n            </Col>\n            <Col className={classNameMemory} style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.memory[memoryKeys[i]] ) }/{ Emulator.readSignedHex( this.state.memory[memoryKeys[i]] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.memory[memoryKeys[i]] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return memoryValues;\n  }\n\n// BREAKPOINTS\n  breakpointsColumn( code ) {\n    var breakpoints = [];\n    var lines = code.split( '\\n' );\n\n    var codeAreaWrapper = document.getElementById( 'code-area-wrapper' );\n\n    if ( codeAreaWrapper ) {\n      codeAreaWrapper.style.height = ( 25 * ( lines.length ) ) + 8 + 'px';\n\n      for ( var i = 0; i < lines.length; i++ ) {\n        var yOffset = 25 * ( i + 0.75 );\n        var styleTop = yOffset + 3 +'px';\n\n        var id = 'breakpoint ' + ( i + 1 );\n        var className = 'breakpoint ' + ( i + 1 );\n\n        if ( this.state.breakpoints.includes( i + 1 ) ) {\n          className = className + ' active';\n        }\n        \n        breakpoints.push( \n          <div \n            key={id}\n            id={id} \n            className={className} \n            style={{top : styleTop}} \n            onClick={this.breakpointOnClick}/>\n        );\n      }\n      return breakpoints;\n    }\n  }\n\n  breakpointOnClick = breakpoint => {\n    var breakpoints = this.state.breakpoints;\n\n    if ( breakpoint.currentTarget.classList.contains( 'active' ) ) {\n      breakpoint.currentTarget.classList.remove( 'active' );\n      var index = breakpoints.indexOf( Number( breakpoint.currentTarget.id.slice( 'breakpoint '.length, breakpoint.currentTarget.id.length ) ) );\n      breakpoints.splice( index, 1 );\n    } else {\n      breakpoint.currentTarget.classList.add( 'active' );\n      breakpoints.push( Number( breakpoint.currentTarget.id.slice( 'breakpoint '.length, breakpoint.currentTarget.id.length ) ) );\n    }\n\n    this.setState( { breakpoints : breakpoints } );\n    this.parseForBreakpoints( this.state.code, breakpoints );\n  }\n\n  disableBreakpoints = button => {\n    this.setState( { breakpoints : [], breakpointsMachineCode : [] } );\n    this.parseForBreakpoints( this.state.code, [] );\n  }\n\n// CODE CHUNK METHODS\n  createLineNumberColumn() {\n    var linesOfCode = this.state.code.split( '\\n' ).length;\n    var result = [];\n\n    var lineNoWidth = 21;\n    var lineNoWidthLength = ( Math.log( linesOfCode ) * Math.LOG10E + 1 ) | 0;\n\n    if ( lineNoWidthLength > 2 ) {\n      lineNoWidth = ( ( lineNoWidthLength * 7 ) + 7 );\n    }\n\n    lineNoWidth += 'px';\n\n    for ( var i = 0; i < linesOfCode; i++ ) {\n      var yOffset = 25 * ( i + 0.5 );\n\n      if ( this.state.lineToMemory[i] ) {\n        var parsedMachineCodeStringStart = Emulator.writeHex( this.state.lineToMemory[i][0] );\n        var parsedMachineCodeStringCodes = Emulator.writeHex( this.state.memory[ this.state.lineToMemory[i][0] ] );\n\n        if ( this.state.lineToMemory[i][1] ) {\n          parsedMachineCodeStringStart += ', ' + Emulator.writeHex( this.state.lineToMemory[i][1] );\n          parsedMachineCodeStringCodes += ', ' + Emulator.writeHex( this.state.memory[ this.state.lineToMemory[i][1] ] );\n        }\n\n        var parsedMachineCodeString = parsedMachineCodeStringStart + ' | ' + parsedMachineCodeStringCodes;\n\n        result.push(\n          <OverlayTrigger\n            key={'line-number-tooltip' + ( i + 1 )}\n            placement={'right'}\n            overlay={\n              <Tooltip>\n                {parsedMachineCodeString}\n              </Tooltip>\n            }>\n            <div\n              key={'line-number ' + ( i + 1 )} \n              className='line-number'\n              style={{top:{yOffset}, width:lineNoWidth}}>\n              {i + 1}\n            </div>\n          </OverlayTrigger>\n        );\n\n      } else {\n        // if an empty line in memory, don't create a tooltip\n        result.push(\n          <div\n            key={'line-number ' + ( i + 1 )} \n            className='line-number'\n            style={{top:{yOffset}, width:lineNoWidth}}>\n            {i + 1}\n          </div>\n        );\n      }\n    }\n\n    return result;\n  }\n  //\n  noHighlightCodeChunk() {\n    return(\n      <div style={{display:'grid'}}>\n        <pre className=\"code-chunk-column viewing\">\n        {this.state.code}\n        </pre>\n      </div>\n    );\n  }\n\n  toggleHighlighting = button => {\n    this.setState( { highlightedCodeChunk : !( this.state.highlightedCodeChunk ) } );\n  }\n\n  toggleCodeChunk = button => {\n    this.setState( { showCodeChunk : !( this.state.showCodeChunk ), renderCodeChunk : false } );\n  }\n\n// LINE OVERLAY METHODS\n  activeLineOverlay() {\n    if ( !( this.state.halted ) ) {\n      var linesOfCode = this.state.code.split( '\\n' ).length;\n      var activeLineInCode = this.state.memoryToLine[ this.state.activeLine ];\n\n      var heightOfOverlay = -( ( linesOfCode - ( activeLineInCode + 1 ) ) * 25 ) + -( 29 );\n\n      var lineNoWidth = 21;\n      var lineNoWidthLength = ( Math.log( linesOfCode ) * Math.LOG10E + 1 ) | 0;\n\n      if ( lineNoWidthLength > 2 ) {\n        lineNoWidth = ( ( lineNoWidthLength * 7 ) + 7 );\n      }\n\n      lineNoWidth = ( lineNoWidth + 25 ) + 'px'; //25 because 16 for breakpoint column, 8 for number padding and 1 for number column border\n      \n      return(\n        <div style={{marginTop : heightOfOverlay, marginLeft : lineNoWidth}} className='line-overlay active'/>\n      );\n    }\n  }\n\n  lastLineOverlay() {\n    if ( this.state.lastLine !== this.state.activeLine ) {\n      // if program has at least been stepped through\n\n      var linesOfCode = this.state.code.split( '\\n' ).length;\n      var lastLineInCode = this.state.memoryToLine[ this.state.lastLine ];\n\n      var heightOfOverlay = -( ( linesOfCode - ( lastLineInCode + 1 ) ) * 25 ) + -( 29 );\n\n      var lineNoWidth = 21;\n      var lineNoWidthLength = ( Math.log( linesOfCode ) * Math.LOG10E + 1 ) | 0;\n\n      if ( lineNoWidthLength > 2 ) {\n        lineNoWidth = ( ( lineNoWidthLength * 7 ) + 7 );\n      }\n\n      lineNoWidth = ( lineNoWidth + 25 ) + 'px'; //25 because 16 for breakpoint column, 8 for number padding and 1 for number column border\n\n      return(\n        <div style={{marginTop : heightOfOverlay, marginLeft : lineNoWidth}} className='line-overlay last'/>\n      );\n    }\n  }\n\n// COLLAPSE CALLBACK METHOD\n  collapseOnEntered = collapse => {\n    this.setState( { renderCodeChunk : true } );\n  }\n\n// CHECKING METHOD\n  checkCode( code ) {\n    var lines = code.toLowerCase().split( '\\n' );\n    var check = true;\n\n    var lineErrorCopy = {};\n\n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var ranSuccessfully = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      parsed = Emulator.parseLineForLabels( lines[i] );\n\n      if ( parsed['label'] !== '' ) {\n        if ( parsed['justLabel'] ) {\n          justLabelOffset += 1;\n          labels[parsed['label']] = currentLine - justLabelOffset + 1;\n        } else {\n          labels[parsed['label']] = currentLine - justLabelOffset;\n        }\n      }\n\n      currentLine += parsed['instructionWords'];\n    }\n\n    for ( var it = 0; it < lines.length; it++ ) {\n      check = Emulator.checkLine( lines[it], labels );\n      if ( check.length ) {\n        lineErrorCopy[it + 1] = check;\n        ranSuccessfully = false;\n      }\n    }\n\n    return [ranSuccessfully, lineErrorCopy];\n  }\n\n// PARSING METHOD\n  parseCode( code, breakpoints ) {\n    var lines = code.split( '\\n' );\n    \n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var machineCode = [];\n\n    var check = this.checkCode( code );\n\n    if ( check[0] ) {\n      for ( var i = 0; i < lines.length; i++ ) {\n        parsed = Emulator.parseLineForLabels( lines[i] );\n\n        if ( parsed['label'] !== '' ) {\n          if ( parsed['justLabel'] ) {\n            justLabelOffset += 1;\n            labels[parsed['label']] = currentLine - justLabelOffset + 1;\n          } else {\n            labels[parsed['label']] = currentLine - justLabelOffset;\n          }\n        }\n\n        currentLine += parsed['instructionWords'];\n      }\n\n      var nextLineBreakpoint = false;\n      var breakpointsMachineCode = [];\n\n      var memoryToLine = {};\n      var lineToMemory = {};\n\n      for ( var it = 0; it < lines.length; it++ ) {\n        var trimmed = lines[it].trim();\n\n        if ( breakpoints.includes( it+1 ) ) nextLineBreakpoint = true; \n\n        if ( trimmed !== '' && trimmed.split( ';' )[0] !== '' ) {\n          parsed = Emulator.parseLineForMachineCode( lines[it], labels );\n          if ( parsed ) {\n            var mcLength = machineCode.length;\n            if ( nextLineBreakpoint ) {\n              breakpointsMachineCode.push( mcLength );\n              nextLineBreakpoint = false;\n            }\n\n            memoryToLine[mcLength] = it;\n            lineToMemory[it] = [];\n            lineToMemory[it].push( mcLength );\n\n            machineCode.push( parsed[0] );\n            \n            // if two word instruction\n            if ( Emulator.isValidNumber( Emulator.readSignedHex( parsed[1] ) ) ) {\n              lineToMemory[it].push( mcLength + 1 );\n\n              machineCode.push( parsed[1] );\n            }\n          }\n        }\n      }\n\n      this.setState( { machineCode : machineCode, breakpointsMachineCode : breakpointsMachineCode, memoryToLine : memoryToLine, lineToMemory : lineToMemory } );\n    } else {\n      var keys = Object.keys( check[1] );\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', ';\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n      this.setState( { halted : true } );\n    }\n\n    return machineCode;\n  }\n\n  parseForBreakpoints( code, breakpoints ) {\n    var check = this.checkCode( code );\n\n    if ( check[0] ) {\n      var linesOfCode = code.split( '\\n' ).length;\n\n      var breakpointsMachineCode = [];\n\n      for ( var i = 0; i < breakpoints.length; i++ ) {\n        for ( var it = 0; it < linesOfCode; it++ ) {\n          if ( ( it + 1 ) >= breakpoints[i] && this.state.lineToMemory[it] ) {\n            breakpointsMachineCode.push( this.state.lineToMemory[it][0] );\n            break;\n          }\n        }\n      }\n\n      this.setState( { breakpointsMachineCode : breakpointsMachineCode } );\n    } else {\n      var keys = Object.keys( check[1] )\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', '\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n      this.setState( { halted : true } );\n    }\n  }\n\n// RUNNING METHODS\n  resetCPUandMemory() {\n    var registersNew = {\n      0 : 0,\n      1 : 0,\n      2 : 0,\n      3 : 0,\n      4 : 0,\n      5 : 0,\n      6 : 0,\n      7 : 0,\n      8 : 0,\n      9 : 0,\n      10 : 0,\n      11 : 0,\n      12 : 0,\n      13 : 0,\n      14 : 0,\n      15 : 0\n    };\n\n    var cpuControlNew = {\n      'pc' : 0,\n      'ir' : 0,\n      'adr' : 0\n    };\n\n    var outputNew = '';\n\n    var memoryNew = Emulator.setMemory( this.state.machineCode );\n\n    this.setState( { registers : registersNew, cpuControl : cpuControlNew, output : outputNew, memory : memoryNew } );\n  }\n\n  canRunCode( code, machineCode ) {\n    var error = true;\n\n    if ( machineCode.length !== 0 ) {\n      if ( !machineCode.includes( 0xd000 ) ) {\n        error = 'Cannot run code without a \"trap R0,R0,R0\" instruction. Can step-through. Restart execution to do so';\n      }\n    } else {\n      // machine language is blank\n      error = 'Cannot run no code. Try building then running';\n    }\n    return error;\n  }\n\n  runCode = button => {\n    var canRun = this.canRunCode( this.state.code, this.state.machineCode );\n    var ran = {\n      halted : false\n    };\n\n    if ( !canRun.length ) {\n      var localControl = this.state.cpuControl;\n      var localRegisters = this.state.registers;\n      var localMemory = this.state.memory;\n      var localInput = this.state.inputRan;\n      var localOutput = this.state.output;\n\n      var lastRanLine = this.state.activeLine;\n\n      var encounteredBreakpoint = false;\n\n      while ( !( ran['halted'] ) && !encounteredBreakpoint ) {\n        if ( ran['control'] !== undefined ) {\n          lastRanLine = ran['control']['pc'];\n        }\n\n        ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n        localControl = ran['control'];\n        localRegisters = ran['registers'];\n        localMemory = ran['memory'];\n        localInput = ran['input'];\n        localOutput = ran['output'];\n\n        // if ran out of commands\n        if ( !( Object.keys( localMemory ).includes( String( localControl['pc'] ) ) ) ) ran['halted'] = true;\n        \n        if ( this.state.breakpointsMachineCode.includes( ran['control']['pc'] ) ) {\n          encounteredBreakpoint = true;\n        }\n      }\n\n      this.setState( { cpuControl : localControl, \n        registers : localRegisters, \n        memory : localMemory, \n        inputRan : localInput, \n        output : localOutput, \n        lastLine : lastRanLine,\n        activeLine : localControl['pc'],\n        halted : ran['halted']\n      } );\n    } else {\n      this.updateAlert( canRun, 'danger' );\n      this.setState( { halted : true } );\n    }\n  }\n\n  stepForward = button => {\n    var ran = {\n      halted : false\n    };\n\n    if ( this.state.machineCode.length !== 0 ) {\n      var localControl = this.state.cpuControl;\n      var localRegisters = this.state.registers;\n      var localMemory = this.state.memory;\n      var localInput = this.state.inputRan;\n      var localOutput = this.state.output;\n\n      ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n      localControl = ran['control'];\n      localRegisters = ran['registers'];\n      localMemory = ran['memory'];\n      localInput = ran['input'];\n      localOutput = ran['output'];\n\n      // if ran out of commands\n      if ( !( Object.keys( localMemory ).includes( String( localControl['pc'] ) ) ) ) ran['halted'] = true;\n\n      this.setState( { cpuControl : localControl, \n        registers : localRegisters, \n        memory : localMemory, \n        inputRan : localInput, \n        output : localOutput, \n        lastLine : this.state.activeLine ,\n        activeLine : localControl['pc'],\n        halted : ran['halted']\n      } );\n    } else {\n      // machine language is blank\n      this.updateAlert( 'Cannot run no code. Try building then running', 'danger' );\n      this.setState( { halted : true } );\n    }\n  }\n\n  resetDebug = button => {\n    this.resetCPUandMemory();\n\n    this.setState( { \n      memory : Emulator.setMemory( this.state.machineCode ),\n      inputRan : this.state.input ,\n      lastLine : 0,\n      activeLine : 0,\n      halted : false\n    } );\n  }\n\n// MODAL METHODS\n  setInput = button => {\n    this.setState( { inputModalShow : true } );\n  }\n\n  inputUpdate = textarea => {\n    this.setState( { input : textarea.target.value, inputRan : textarea.target.value } );\n\n    this.resetDebug();\n  }\n\n  inputModalClose = modal => {\n    this.setState( { inputModalShow : false } );\n  }\n\n  outputModalOpen = textarea => {\n    this.setState( { outputModalShow : true } );\n  }\n\n  outputModalClose = modal => {\n    this.setState( { outputModalShow : false } );\n  }\n\n// RENDER\n  render() {\n    return(\n      <React.Fragment>\n        <NavBar state={{code : this.state.code, breakpoints : this.state.breakpoints, input : this.state.input}}/>\n\n        <Modal\n          show={this.state.inputModalShow}\n          onHide={this.inputModalClose}\n          dialogClassName=\"inputmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Set Input\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className='input-modal-column'>\n              <InputGroup\n                as='textarea'\n                className='input-modal-input'\n                value={this.state.input}\n                onChange={this.inputUpdate}\n                autoFocus/>\n            </div>\n            <div style={{paddingTop : '15px'}}>\n              <Button variant='outline-secondary' onClick={this.inputModalClose} style={{float : 'right'}}>\n                Set Input\n              </Button>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <Modal\n          show={this.state.outputModalShow}\n          onHide={this.outputModalClose}\n          dialogClassName=\"outputmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Output\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div onDoubleClick={this.outputModalClose} className='output-column' style={{height:'518px', width:'100%'}}>\n              <InputGroup\n                as='textarea'\n                className='output-area'\n                value={this.state.output}\n                disabled/>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <div className=\"mainbody\">\n          <Alert variant={this.state.alertNature} onClose={this.closeAlert} show={this.state.alertShow} dismissible>\n            <p className='alertbody'>\n              {this.state.alertMessage}\n            </p>\n          </Alert>\n          <Row className='buttontoolbar'>\n            <Col>\n              <ButtonGroup>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Set input`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.setInput}>\n                    <FaPen/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Step Forward`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.stepForward} disabled={this.state.halted}>\n                    <FaStepForward/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run till next breakpoint`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.runCode} disabled={this.state.halted}>\n                    <FaPlay/>\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n            </Col>\n            <Col>\n              <OverlayTrigger\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Disable all breakpoints`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.disableBreakpoints}>\n                  <FaTimes/>\n                </Button>\n              </OverlayTrigger>\n              {' '}\n              <OverlayTrigger\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Rerun`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.resetDebug}>\n                  <FaBackward/>\n                </Button>\n              </OverlayTrigger>\n            </Col>\n            <Col>\n              <OverlayTrigger\n                key={`highlighting-tooltip`}\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Toggle highlighting\n                    improves speed if disabled`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.toggleHighlighting} active={this.state.highlightedCodeChunk}>\n                  <FaCheck/>\n                </Button>\n              </OverlayTrigger>\n              {' '}\n              <OverlayTrigger\n                key={`hide-code-tooltip`}\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Hide the codechunk`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.toggleCodeChunk} active={!(this.state.showCodeChunk)}>\n                  <FaMinus/>\n                </Button>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h6>\n                Control/Registers/Input\n              </h6>\n            </Col>\n            <Col>\n              <h6>\n                Memory/Output\n              </h6>\n            </Col>\n            { this.state.showCodeChunk &&\n              <Col>\n                <h6>\n                  Code ( read-only )\n                </h6>\n              </Col>\n            }\n          </Row>\n          <Row>\n            <Col className='runmodal-left-col'>\n              <div id='control-column' className='control-column'>\n                {this.controlColumn()}\n              </div>\n              <div id='register-column' className='register-column'>\n                {this.registerColumn()}\n              </div>\n              <div id='input-column' className='input-column'>\n                {this.inputColumn()}\n              </div>\n            </Col>\n            <Col style={{borderRight:'2px solid #eaeef3'}}>\n              <div id='memory-column-big' className='memory-column big'>\n                {this.memoryColumn()}\n              </div>\n              <div id='output-column' className='output-column' onDoubleClick={this.resizeOutput}>\n                {this.outputColumn()}\n              </div>\n            </Col>\n            <Collapse in={this.state.showCodeChunk} onEntered={this.collapseOnEntered}>\n              <Col>\n                <div id='code-area-viewing' className='code-area viewing'> \n                  <div id='code-area-wrapper' className='code-area-wrapper'>\n                    { this.state.showCodeChunk &&\n                      <React.Fragment>\n                        <div id='breakpoint-column' className='breakpoint-column'>\n                          {this.breakpointsColumn(this.state.code)}\n                        </div>\n                        <div className='line-number-column'>\n                          {this.createLineNumberColumn()}\n                        </div>\n                        { this.state.code && this.state.renderCodeChunk &&\n                          <React.Fragment>\n                            { this.state.highlightedCodeChunk ?\n                              <CodeMirror\n                                className=' debug'\n                                mode='sigma16'\n                                value={this.state.code} \n                                options={{ readOnly : true, lineNumbers : false }}/>\n                            : \n                              <React.Fragment>\n                                {this.noHighlightCodeChunk()}\n                                {/**<InputGroup\n                                  as='textarea'\n                                  className='code-chunk-column viewing'\n                                  value={this.state.code}\n                                  disabled/>\n                                */}\n                              </React.Fragment>\n                            }\n                            {this.activeLineOverlay()}\n                            {this.lastLineOverlay()}\n                          </React.Fragment>\n                        }\n                      </React.Fragment>\n                    }\n                  </div>\n                </div>\n              </Col>\n            </Collapse>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport './App.css';\n\nimport { HashRouter, Switch } from 'react-router-dom';\n\nimport AppliedRoute from './AppliedRoute';\nimport HomeView from './components/HomeView';\nimport DocumentationView from './components/DocumentationView';\nimport ProgramEditorView from './components/ProgramEditorView';\nimport ProgramDebugView from './components/ProgramDebugView';\n\nexport default class App extends React.Component {\n  constructor( props ) {\n    super( props );\n\n    this.state = {};\n\n    // the default program that takes up the code chunk\n    this.state.code = `lea r1,2[r0]\nlea r2,buffer[r0]\nload r3,buffersize[r0]\n\ntrap r1,r2,r3\n\ntrap r0,r0,r0\n\nbuffersize data 13\nbuffer data $0048\n  data $0065\n  data $006c\n  data $006c\n  data $006f\n  data $002c\n  data $0020\n  data $0057\n  data $006f\n  data $0072\n  data $006c\n  data $0064\n  data $0021`;\n\n    this.state.breakpoints = [];\n    this.state.input = '';\n\n  }\n  render() {\n    var stateCode = this.state.code;\n    var stateBreakpoints = this.state.breakpoints;\n    var stateInput = this.state.input;\n\n    return (\n      <React.Fragment>\n        <HashRouter>\n          <Switch>\n            <AppliedRoute exact path=\"/\" component={HomeView} props={{code : stateCode, breakpoints : stateBreakpoints, input : stateInput}}/>\n            <AppliedRoute exact path=\"/documentation\" component={DocumentationView} props={{code : stateCode, breakpoints : stateBreakpoints, input : stateInput}}/>\n            <AppliedRoute exact path=\"/editor\" component={ProgramEditorView} props={{code : stateCode, breakpoints : stateBreakpoints, input : stateInput}}/>\n            <AppliedRoute exact path=\"/debug\" component={ProgramDebugView} props={{code : stateCode, breakpoints : stateBreakpoints, input : stateInput}}/>\n          </Switch>\n        </HashRouter>\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}