{"version":3,"sources":["components/utils/mode/sigma16.js","AppliedRoute.js","components/NavBar.js","components/HomeView.js","components/DocumentationView.js","components/utils/Emulator.js","components/ProgramEditorView.js","components/ProgramDebugView.js","App.js","serviceWorker.js","index.js"],"names":["mod","CodeMirror","require","defineMode","words","str","split","allCommands","tokenBase","stream","state","eatSpace","eat","ch","next","peek","skipToEnd","test","eatWhile","eol","cur","current","hasOwnProperty","tokenize","tokens","registerHelper","style","dict","i","length","define","startState","token","closeBrackets","lineComment","fold","defineMIME","C","component","cProps","props","rest","render","NavBar","Nav","fill","variant","Item","className","to","pathname","this","activeClassName","React","Component","DocumentationView","context","code","breakpoints","location","setState","undefined","Fragment","Row","Col","add","sub","mul","div","cmp","cmplt","cmpeq","cmpgt","inv","and","or","xor","trap","lea","load","store","jump","jumpc0","jumpc1","jumpf","jumpt","jal","testset","jumplt","jumple","jumpne","jumpeq","jumpge","jumpgt","data","firstColumn","Math","pow","secondColumn","thirdColumn","fourthColumn","rrCommands","rrrCommands","nop","jxCommands","jumpAliasCommands","kxCommands","rxCommands","xCommands","readSignedHex","a","Number","readUnsignedHex","readConstant","argument","labels","info","isNaN","isValidNumber","slice","parseInt","Object","keys","includes","numString","num","startsWith","writeHex","x","toString","checkJXCommand","jx","disp","checkKXCommand","kx","splat","k","isValidNumberBit","checkCommands","command","check","rx","checkRXCommand","checkLine","line","linesplit","trim","error","findInstuctionInfo","result","type","op","generateMachineCode","machineCode","machineCodeSecond","commandInfo","argumentInfo","d","b","argumentListRR","argumentListRRR","argumentListJX","argumentListJumpAlias","argumentListKX","argumentListRX","findArgumentInfo","parseLineForLabels","label","instructionWords","justLabel","parseLineForMachineCode","setMemory","memory","compareRegisters","RaValue","RbValue","RaValueSigned","RbValueSigned","signedEquals","runMemory","control","registers","input","output","halted","processed","startpc","instructionIr","instructionADR","Op","floor","Rd","Ra","Rb","memoryBufferStartInput","charCodeAt","memoryBufferStartOutput","it","String","fromCharCode","processTRAPInstruction","adr","processEXPInstruction","effectiveADR","processRXInstruction","values","NaN","console","log","ProgramEditorView","breakpointOnClick","breakpoint","currentTarget","classList","contains","remove","index","indexOf","id","splice","push","disableBreakpoints","button","closeAlert","alert","alertShow","runModalClose","modal","resetCPUandMemory","runModalShow","resizeOutput","outputColumn","target","outputZoomed","height","parseCode","lines","currentLine","parsed","justLabelOffset","checkCode","Emulator","trimmed","machineCodeUpdated","updateAlert","keysString","ite","runCode","canRun","canRunCode","ran","localControl","cpuControl","localRegisters","localMemory","localInput","localOutput","setInput","inputModalShow","inputUpdate","textarea","value","inputModalClose","updateCode","newCode","codeBlockEdit","divContent","toggleHighlighting","highlightedCodeChunk","lineError","alertMessage","alertNature","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","codeArea","document","getElementById","styleTop","OverlayTrigger","key","placement","overlay","Tooltip","top","onClick","controls","controlKeys","textAlign","width","InputGroup","as","disabled","memoryValues","memoryKeys","map","message","nature","toLowerCase","lineErrorCopy","ranSuccessfully","linesOfCode","lineNoWidth","lineNoWidthLength","LOG10E","yOffset","Modal","show","onHide","dialogClassName","animation","Header","closeButton","Title","Body","controlColumn","registerColumn","memoryColumn","onDoubleClick","onChange","autoFocus","paddingTop","Button","float","Alert","onClose","dismissible","ButtonGroup","size","active","breakpointsColumn","createLineNumberColumn","mode","options","lineNumbers","scrollbarStyle","PureComponent","ProgramDebugView","breakpointsMachineCode","lastRanLine","activeLine","encounteredBreakpoint","lastLine","stepForward","resetDebug","classNameMemory","nextLineBreakpoint","App","stateCode","stateBreakpoints","AppliedRoute","exact","path","HomeView","Boolean","window","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f07a32e.chunk.js","sourcesContent":["(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"codemirror\"));\n})(function(CodeMirror) {\n\n  CodeMirror.defineMode('sigma16', function() {\n\n    var words = function(str) { return str.split(\" \"); };\n    function define(style, dict) {\n      for(var i = 0; i < dict.length; i++) {\n        words[dict[i]] = style;\n      }\n    };\n\n    const allCommands = [\"add\", \"sub\", \"mul\", \"div\", \"cmp\", \"cmplt\", \"cmpeq\", \"cmpgt\", \"inv\", \"and\", \"or\", \"xor\", \"trap\", \n                        \"lea\", \"load\", \"store\", \"jump\", \"jumpc0\", \"jumpc1\", \"jumpf\", \"jumpt\", \"jal\", \"testset\", \"jumplt\", \"jumple\", \"jumpne\", \"jumpeq\", \"jumpge\", \"jumpgt\",\n                        \"data\"];\n\n    CodeMirror.registerHelper(\"hintWords\", \"sigma16\", allCommands);\n\n    define('keyword', allCommands);\n\n    function tokenBase(stream, state) {\n      if ( stream.eatSpace() ) return null;\n      if ( stream.eat( ',' ) ) return 'punctuation';\n      if ( stream.eat( '[' ) ) return 'punctuation';\n      if ( stream.eat( ']' ) ) return 'punctuation';\n\n      var ch = stream.next();\n      var peek = stream.peek();\n\n      if (ch === ';') {\n        stream.skipToEnd();\n        return 'comment';\n      } else if ( /(r|R)([0-9])/.test( ch + peek ) ) {\n        if ( /(1)/.test( peek ) ) {\n          stream.next();\n          peek = stream.peek();\n\n          if ( /([0-5])/.test(peek) ) {\n            stream.next();\n          }\n        } else {\n          stream.next();\n        }\n        return 'def';   \n      } else if ( ch === '$' ) {\n        stream.eatWhile( /((\\d)|([a-f])|([A-F]))/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      } else if ( ch === '-' ) {\n        stream.eatWhile( /\\d/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      } else if ( /\\d/.test( ch ) ) {\n        stream.eatWhile( /\\d/ );\n        if( stream.eol() || !/\\w/.test( stream.peek() ) ) {\n          return 'number';\n        }\n      }\n      stream.eatWhile(/[\\w]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n    }\n\n    function tokenize(stream, state) {\n      return (state.tokens[0] || tokenBase) (stream, state);\n    };\n\n    return {\n      startState: function() {return {tokens:[]};},\n      token: function(stream, state) {\n        return tokenize(stream, state);\n      },\n      closeBrackets: \"[]\",\n      lineComment: ';',\n      fold: \"brace\"\n    };\n  });\n\n  CodeMirror.defineMIME('text/plain', 'sigma16');\n\n});","import React from \"react\";\n\nimport { Route } from \"react-router-dom\";\n\nexport default ({ component: C, props: cProps, ...rest }) =>\n  <Route {...rest} render={props => <C {...props} {...cProps} />} />;","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\nimport { Nav } from 'react-bootstrap';\n\nexport default class NavBar extends React.Component {\n  constructor ( props ) {\n    super( props )\n\n    this.props = props;\n  }\n\n  render() {\n    return(\n      <Nav fill variant=\"tabs\">\n        <Nav.Item>\n          <NavLink \n            className=\"nav-link\" \n            to={{\n              pathname : \"/\",\n              state : this.props.state\n              }}>\n              Home\n            </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className=\"nav-link\" \n            activeClassName=\"nav-link active\" \n            to={{\n              pathname : \"/documentation\",\n              state : this.props.state\n              }}>\n              Documentation\n          </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className=\"nav-link\" \n            activeClassName=\"nav-link active\" \n            to={{\n              pathname : \"/editor\",\n              state : this.props.state\n              }}>\n              Editor\n          </NavLink>\n        </Nav.Item>\n        <Nav.Item>\n          <NavLink \n            className=\"nav-link\" \n            activeClassName=\"nav-link active\" \n            to={{\n              pathname : \"/debug\",\n              state : this.props.state\n              }}>\n              Debug\n          </NavLink>\n        </Nav.Item>\n      </Nav>\n    );\n  }\n}","import React from 'react';\n\nimport './HomeView.css';\n\nimport { Link } from 'react-router-dom';\nimport { Col, Row } from 'react-bootstrap';\n\nimport NavBar from './NavBar';\n\nexport default class DocumentationView extends React.Component {\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : []\n    };\n  }\n\n  componentDidMount() {\n    if ( this.props.location.state ) {\n      this.setState( { code : this.props.location.state.code } );\n      this.setState( { breakpoints : this.props.location.state.breakpoints } );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( { code : this.props.code } );\n      this.setState( { breakpoints : this.props.breakpoints } );\n    }\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <NavBar state={this.state}/> \n        <div className=\"mainbody\">\n          <Row>\n            <Col>\n              <h1>Sigma17 home page</h1>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              Sigma16 is a computer architecture designed for research and teaching in computer systems. This application provides a complete environment for experimenting with the architecture.\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"click-editor\">\n                <Link to={{\n                  pathname : \"/editor\",\n                  state : this.state\n                  }}>\n                  Click Here To Run IDE\n                </Link>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              This web based IDE is not to be used in complete replacement the orignal written by John O'Donnel as it has properties of it which could mean that programs written using this emulator <strong>will not work</strong> with the orignal and could lead to repurcussions because of it.\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport './DocumentationView.css';\n\nimport { Col, Row } from 'react-bootstrap';\n\nimport NavBar from './NavBar';\n\nexport default class DocumentationView extends React.Component {\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : []\n    };\n  }\n\n  componentDidMount() {\n    if ( this.props.location.state ) {\n      this.setState( { code : this.props.location.state.code } );\n      this.setState( { breakpoints : this.props.location.state.breakpoints } );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( { code : this.props.code } );\n      this.setState( { breakpoints : this.props.breakpoints } );\n    }\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <NavBar state={this.state}/>\n        <div className=\"mainbody\">\n          <Row>\n            <Col>\n              Empty for now\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","// CONSTS FOR COMMAND RECOGNITION\n  const allCommands = {\n    add : 'rrr', \n    sub : 'rrr', \n    mul : 'rrr', \n    div : 'rrr', \n    cmp : 'rr', \n    cmplt : 'rrr', \n    cmpeq : 'rrr', \n    cmpgt : 'rrr', \n    inv : 'rr', \n    and : 'rrr', \n    or : 'rrr', \n    xor : 'rrr', \n    trap : 'rrr',\n    lea : 'rx', \n    load : 'rx', \n    store : 'rx', \n    jump : 'jx', \n    jumpc0 : 'kx', \n    jumpc1 : 'kx', \n    jumpf : 'rx', \n    jumpt : 'rx', \n    jal : 'rx', \n    testset : 'rx',\n    jumplt : 'jumpAlias', \n    jumple : 'jumpAlias', \n    jumpne : 'jumpAlias', \n    jumpeq : 'jumpAlias', \n    jumpge : 'jumpAlias', \n    jumpgt : 'jumpAlias',\n    data : 'x'\n  };\n\n  const firstColumn = Math.pow( 16, 3 );\n  const secondColumn = Math.pow( 16, 2 );\n  const thirdColumn = Math.pow( 16, 1 );\n  const fourthColumn = Math.pow( 16, 0 );\n\n  // RRR\n    const rrCommands = {\n      cmp : 4,\n      inv : 8\n    };\n    const rrrCommands = { \n      add : 0, \n      sub : 1,\n      mul : 2,\n      div : 3,\n      cmplt : 5,\n      cmpeq : 6,\n      cmpgt : 7,\n      and : 9,\n      or : 0xa,\n      xor : 0xb,\n      nop : 0xc,\n      trap : 0xd\n    };\n\n  // RX\n    const jxCommands = {\n      jump : 3\n    };\n    const jumpAliasCommands = { // 4 is jumpc0, 5 is jumpc1\n      jumplt : [ 5, 11 ],\n      jumple : [ 4, 15 ],\n      jumpne : [ 4, 13 ],\n      jumpeq : [ 5, 13 ],\n      jumpge : [ 4, 11 ],\n      jumpgt : [ 5, 15 ]\n    };\n    const kxCommands = {\n      jumpc0 : 4,\n      jumpc1 : 5\n    };\n    const rxCommands = {\n      lea : 0,\n      load : 1,\n      store : 2,\n      jumpf : 6,\n      jumpt : 7,\n      jal : 8,\n      testset : 9\n    };\n\n  // X\n    const xCommands = {data : 0}; // data doesnt have an op code since it kind of isnt a command but for convention sake, its in a dictionary\n\n// UTIL FUNCTIONS\n  export function readSignedHex( a ) {\n    a = Number( a );\n    if ( ( a & 0x8000 ) > 0) {\n      a = a - 0x10000;\n    }\n    return a;\n  }\n\n  export function readUnsignedHex( a ) {\n    if ( a < 0 ) {\n      a = a + 0x10000;\n    }\n    return a;\n  }\n\n  function readConstant( argument, labels ) {\n    var info = 0;\n\n    if ( ! isNaN( argument ) ) {\n      // number is in decimal\n      info = readUnsignedHex( Number( argument ) );\n    } else {\n      // number is either hex or string\n      if ( isValidNumber( argument ) ) {\n        argument = argument.slice( 1, argument.length );\n        info = parseInt( argument, 16);\n      } else {\n        if ( labels && Object.keys( labels ).includes( argument ) ) {\n          info = labels[argument];\n        } else {\n          info = argument;\n        }\n      }\n    }\n\n    return info;\n  }\n\n  export function isValidNumber( numString ) {\n    var num = 0;\n\n    if ( !isNaN( numString ) ) {\n      num = parseInt( numString );\n    } else if ( numString.startsWith( '$' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = readSignedHex( parseInt( numString, 16 ) );\n    } else {\n      num = 65536;\n    }\n\n    return ( num < 32768 && num >= -32768 ) ? true : false;\n  }\n\n  function isValidNumberBit( numString ) {\n    var num = 0;\n\n    if ( !isNaN( numString ) ) {\n      num = parseInt( numString );\n    } else if ( numString.startsWith( '$' ) ) {\n      numString = numString.slice( 1, numString.length );\n      num = readSignedHex( parseInt( numString, 16 ) );\n    } else {\n      num = 16;\n    }\n\n    return ( num <= 15 && num >= 0 ) ? true : false;\n  }\n\n  export function writeHex( x ) {\n    if ( x !== undefined ) {\n      if ( !x.length ) {\n        x = x.toString( 16 );\n      }\n      while ( x.length < 4 ) { x = '0' + x; }\n      return x;\n    }\n    return x;\n  }\n\n// CHECKING METHODS\n  function checkRRCommand( rr ) {\n    // check that rrr is in the form of rd,ra,rb\n    if ( !( /r((1[0-5])|([0-9])),r((1[0-5])|([0-9]))/.test( rr ) ) ) {\n      return 'arguments must be in the form of \"Ra,Rb\"';\n    }\n    return true;\n  }\n\n  function checkRRRCommand( rrr ) {\n    // check that rrr is in the form of rd,ra,rb\n    if ( !( /r((1[0-5])|([0-9])),r((1[0-5])|([0-9])),r((1[0-5])|([0-9]))/.test( rrr ) ) ) {\n      return 'arguments must be in the form of \"Rd,Ra,Rb\"';\n    }\n    return true;\n  }\n\n  function checkJXCommand( jx, labels ) {\n    // check that rx is in the form of rd,disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( /((\\$(\\d)|([a-f])|([A-F]))|(-(\\d))|(\\d)|(\\w))+\\[r((1[0-5])|([0-9]))\\]/.test( jx ) ) ) {\n      return 'arguments must be in the form of \"disp[Ra]\"';\n    }\n    var disp = jx.split( '[' )[0];\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, a hex or an initailised label';\n    }\n  }\n\n  function checkKXCommand( kx, labels ) {\n    // check that rx is in the form of rd,disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( /((\\$(\\d)|([a-f])|([A-F]))||(-(\\d))|(\\d)),((\\$(\\d)|([a-f])|([A-F]))|(\\d)|(\\w))+\\[r((1[0-5])|([0-9]))\\]/.test( kx ) ) ) {\n      return 'arguments must be in the form of \"k,disp[Ra]\"';\n    }\n    var splat = kx.split( ',' );\n    var k = splat[0];\n    var disp = splat[1].split( '[' )[0];\n\n    if ( ! isValidNumberBit( k ) ) {\n      return 'k argument must either be a decimal, a hex bit';\n    }\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, a hex or an initailised label';\n    }\n  }\n\n  function checkRXCommand( rx, labels ) {\n    // check that rx is in the form of rd,disp[ra], where disp can be either hex, decimal, or a variable \n    if ( !( /r((1[0-5])|([0-9])),((\\$(\\d)|([a-f])|([A-F]))|(-(\\d))|(\\d)|(\\w))+\\[r((1[0-5])|([0-9]))\\]/.test( rx ) ) ) {\n      return 'arguments must be in the form of \"Rd,disp[Ra]\"';\n    }\n    var disp = rx.split( ',' )[1].split( '[' )[0];\n\n    if ( isValidNumber( disp ) ) {\n      return true;\n    } else if ( Object.keys( labels ).includes( disp ) ) {\n      return true;\n    } else {\n      return 'disp argument must either be a decimal, a hex or an initailised label';\n    }\n  }\n\n  function checkXCommand( x ) {\n    // check that x is a number, either hex or decimal\n    if ( !( isValidNumber( x ) ) ) {\n      return 'data must be followed by either a decimal or hex number <= 65535';\n    }\n    return true;\n  }\n\n  function checkCommands( command, argument, labels ) {\n    var check = true;\n    switch ( allCommands[command] ) {      \n      case 'rr' :\n        // first word is an rr command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRRCommand( argument );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by 2 registers in form Rx,Rx';\n        }\n        break;\n\n      case 'rrr' :\n        // first word is an rrr command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRRRCommand( argument );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by 3 registers in form Rx,Rx,Rx';\n        }\n        break;\n\n      case 'jx' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkJXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of disp[Ra]';\n        }\n        break;\n\n      case 'jumpAlias' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkJXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of disp[Ra]';\n        }\n        break;\n\n      case 'kx' :\n        // first word is an jx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkKXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of k,disp[Ra], where k is a bit';\n        }\n        break;\n\n      case 'rx' :\n        // first word is an rx command\n        if ( argument ) { \n          // there is a second argument\n          check = checkRXCommand( argument, labels );\n          // does follow requirements, and therefore function returns true\n        } else {\n          check = command + ' must be followed by arguments in the format of Rd,disp[Ra]';\n        }\n        break;\n\n      case 'x' :\n        // first word is an x command i.e data\n        if ( argument ) { \n          // there is a second argument\n          check = checkXCommand( argument );\n        } else {\n          check = command + ' must be followed by a number, either decimal or hex ( preceeded by $ )';\n        }\n        break;\n\n      default :\n        check = 'not a valid rr, rrr, rx, jx, kx, or, x command';\n    }\n    return check;\n  }\n\n  export function checkLine( line, labels ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    var error = true;\n\n    if ( linesplit[0] ) {\n      // lines isnt empty\n      if ( Object.keys( allCommands ).includes( linesplit[0] ) ) {\n        // first word is a command\n        error = checkCommands( linesplit[0], linesplit[1], labels ); // will return error is arguments not present so dont have to check\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( Object.keys( allCommands ).includes( linesplit[1] ) ) {\n              error = checkCommands( linesplit[1], linesplit[2], labels );\n            } else {\n              error = 'not a valid command following label';\n            }\n          }\n          // just a label, therefore allowed and function returns true\n        } else {\n          error = 'first element of an instruction must be either a label or a command';\n        }\n      }\n    }\n\n    // return error, as it woud have updated to error message if probelm, otherwise, will have stayed positive\n    return error;\n  }\n\n// PARSING METHODS\n  function findInstuctionInfo( command, argument ) {\n    var result = {\n      words : 0,\n      type : '',\n      op : 0\n    };\n\n    switch ( allCommands[command] ) {\n      case 'rr' :\n        result['words'] = 1;\n        result['type'] = 'rrr';\n        result['op'] = rrCommands[command];\n        break;\n        \n      case 'rrr' :\n        result['words'] = 1;\n        result['type'] = 'rrr';\n        result['op'] = rrrCommands[command];\n        break;\n        \n      case 'jx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = jxCommands[command];\n        break;\n        \n      case 'jumpAlias' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = jumpAliasCommands[command][0];\n        break;\n        \n      case 'kx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = kxCommands[command];\n        break;\n        \n      case 'rx' :\n        result['words'] = 2;\n        result['type'] = 'rx';\n        result['op'] = rxCommands[command];\n        break;\n        \n      case 'x' :\n        result['words'] = 1;\n        result['type'] = 'x';\n        result['op'] = xCommands[command];\n        break;\n\n      default :\n        break;\n    }\n\n    return result;\n  }\n\n  function findArgumentInfo( command, argument, labels ) {\n    var result = {\n      d : 0,\n      a : 0,\n      b : 0,\n      disp : 0\n    };\n\n    switch ( allCommands[command] ) {\n      case 'rr' :\n        var argumentListRR = argument.split( ',' );\n        result['a'] = Number( argumentListRR[0].slice( 1, argumentListRR[0].length ) );\n        result['b'] = Number( argumentListRR[1].slice( 1, argumentListRR[1].length ) );\n        \n        result['d'] = result['a'];\n        break;\n        \n      case 'rrr' :\n        var argumentListRRR = argument.split( ',' );\n        result['d'] = Number( argumentListRRR[0].slice( 1, argumentListRRR[0].length ) );\n        result['a'] = Number( argumentListRRR[1].slice( 1, argumentListRRR[1].length ) );\n        result['b'] = Number( argumentListRRR[2].slice( 1, argumentListRRR[2].length ) );\n        break;\n        \n      case 'jx' :\n        var argumentListJX = argument.split( '[' );\n        result['a'] = Number( argumentListJX[1].slice( 1, argumentListJX[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentListJX[0], labels );\n\n        result['d'] = 0;\n        break;\n        \n      case 'jumpAlias' :\n        var argumentListJumpAlias = argument.split( '[' );\n        result['a'] = Number( argumentListJumpAlias[1].slice( 1, argumentListJumpAlias[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentListJumpAlias[0], labels );\n\n        result['d'] = jumpAliasCommands[command][1];\n        break;\n        \n      case 'kx' :\n        var argumentListKX = argument.split( ',' );\n        result['d'] = readConstant( argumentListKX[0], labels );\n\n        argumentListKX = argumentListKX[1].split( '[' );\n        result['a'] = Number( argumentListKX[1].slice( 1, argumentListKX[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentListKX[0], labels );\n        break;\n        \n      case 'rx' :\n        var argumentListRX = argument.split( ',' );\n        result['d'] = Number( argumentListRX[0].slice( 1, argumentListRX[0].length ) );\n\n        argumentListRX = argumentListRX[1].split( '[' );\n        result['a'] = Number( argumentListRX[1].slice( 1, argumentListRX[1].length - 1 ) ); // removes ']' from string\n        result['disp'] = readConstant( argumentListRX[0], labels );\n        break;\n        \n      case 'x' :\n        result['disp'] = readConstant( argument, labels );\n        break;\n\n      default :\n        break;\n    }\n\n    return result;\n  }\n\n  function generateMachineCode( command, argument, labels ) {\n    var machineCode = 0;\n    var machineCodeSecond = 65536;\n\n    var commandInfo = findInstuctionInfo( command, argument );\n    var argumentInfo = findArgumentInfo( command, argument, labels );\n\n    switch ( commandInfo['type'] ) {\n      case 'rrr' :\n        machineCode += commandInfo['op']*firstColumn + argumentInfo['d']*secondColumn + argumentInfo['a']*thirdColumn + argumentInfo['b']*fourthColumn;\n        break;\n\n      case 'rx' :\n        machineCode += 0xf*firstColumn + argumentInfo['d']*secondColumn + argumentInfo['a']*thirdColumn + commandInfo['op']*fourthColumn;\n\n        machineCodeSecond = argumentInfo['disp'];\n        break;\n\n      case 'x' :\n        machineCode += argumentInfo['disp'];\n        break;\n\n      default :\n        break;\n    }\n\n    return [ machineCode, machineCodeSecond ];\n  }\n\n  export function parseLineForLabels( line ) {\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n    \n    var result = {\n      label : '',\n      instructionWords : 0,\n      justLabel : false\n    };\n\n    if ( linesplit[0] && linesplit[0] !== '' ) {\n      // lines isnt empty\n      if ( Object.keys( allCommands ).includes( linesplit[0] ) ) {\n        // first word is a command\n        result['instructionWords'] = findInstuctionInfo( linesplit[0], linesplit[1] )['words'];\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( Object.keys( allCommands ).includes( linesplit[1] ) ) {\n              result['label'] = linesplit[0];\n              result['instructionWords'] = findInstuctionInfo( linesplit[1], linesplit[2] )['words'];\n            }\n          } else {\n            // just a label, therefore allowed and function returns true\n            result['label'] = linesplit[0];\n            result['instructionWords'] = 1;\n            result['justLabel'] = true;\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  export function parseLineForMachineCode( line, labels ) {\n    var machineCode = [ 0, 65536 ];\n\n    var linesplit = line.trim().split( ';' )[0].split( /\\s+/ );\n\n    if ( linesplit[0] && linesplit[0] !== '' ) {\n      // lines isnt empty\n      if ( Object.keys( allCommands ).includes( linesplit[0] ) ) {\n        // first word is a command\n        machineCode = generateMachineCode( linesplit[0], linesplit[1], labels );\n      } else {\n        // first word is not a command\n        if ( /\\w/.test( linesplit[0] ) ) {\n          // first word is a label\n          if ( linesplit[1] ) {\n            // theres more after label\n            if ( Object.keys( allCommands ).includes( linesplit[1] ) ) {\n              machineCode = generateMachineCode( linesplit[1], linesplit[2], labels );\n            }\n          } else {\n            // is a just a label and must not be recognised as a seperate command so \n            // undefined is returned so that parent method can skip it from being added to machine code\n            machineCode = undefined;\n          }\n        }\n      }\n    }\n\n    return machineCode;\n  }\n\n// RUNNING FUNCTIONS\n  export function setMemory( machineCode ) {\n    var memory = {};\n\n    for ( var i = 0; i < machineCode.length; i++ ) {\n      memory[i] = machineCode[i];\n    }\n\n    return memory;\n  }\n\n  function compareRegisters( RaValue, RbValue ) {\n    var RaValueSigned = readSignedHex( RaValue );\n    var RbValueSigned = readSignedHex( RbValue );\n\n    var result = 0;\n    var signedEquals = false;\n\n    // signed comparisons\n    if ( RaValueSigned > RbValueSigned ) {\n      result += 0b01000000;\n    } else if ( RaValueSigned < RbValueSigned ) {\n      result += 0b00010000;\n    } else {\n      signedEquals = true;\n    }\n    \n    // unsigned comparisons\n    if ( RaValue > RbValue ) {\n      result += 0b10000000;\n    } else if ( RaValue < RbValue ) {\n      result += 0b00001000;\n    } else {\n      if ( signedEquals ) {\n        result += 0b00100000;\n      }\n    }\n\n    result = result * secondColumn;\n    return result;\n  }\n\n  function processTRAPInstruction( control, registers, memory, input, output, Rd, Ra, Rb ) {\n    var halted = false;\n\n    switch ( registers[Rd] ) {\n      case 0x0 :\n        halted = true;\n        break;\n\n      case 0x1 :\n        var memoryBufferStartInput = registers[Ra];\n\n        for ( var i = 0; i < registers[Rb]; i++ ) {\n          if ( input.length > i ) {\n            memory[memoryBufferStartInput + i] = input.charCodeAt( i );\n          } else {\n            memory[memoryBufferStartInput + i] = 0;\n          }\n        }\n        output += '>>' + input.slice( 0, registers[Rb] );\n        input = input.slice( registers[Rb], input.length );\n\n        break;\n\n      case 0x2 :\n        var memoryBufferStartOutput = registers[Ra];\n\n        for ( var it = 0; it < registers[Rb]; it++ ) {\n          // if in memory, add to output, else add default memory value\n          if ( memory[memoryBufferStartOutput + it] ) {\n            output += String.fromCharCode( memory[memoryBufferStartOutput + it] );\n          } else {\n            output += String.fromCharCode( 0 );\n          }\n        }\n        break;\n\n      default :\n        break;\n    }\n\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory, \n      'input': input, \n      'output' : output, \n      'halted' : halted \n    };\n  }\n\n  function processRXInstruction( control, registers, memory, Rd, Ra, Op, adr ) {\n    var effectiveADR = registers[Ra] + adr;\n\n    switch ( Op ) {\n      case 0x0 :\n        // lea\n        registers[Rd] = effectiveADR;\n        break;\n\n      case 0x1 :\n        // load\n        registers[Rd] = memory[ effectiveADR ];\n        break;\n\n      case 0x2 :\n        // store\n        memory[ effectiveADR ] = registers[Rd];\n        break;\n\n      case 0x3 :\n        // jump\n        control['pc'] = effectiveADR;\n        break;\n\n      case 0x4 :\n        // jumpc0\n        if ( ( registers[15] & Math.pow( 2, Rd ) ) === 0 ) control['pc'] = effectiveADR;\n\n        break;\n\n      case 0x5 :\n        // jumpc1\n        if ( ( registers[15] & Math.pow( 2, Rd ) ) > 0 ) control['pc'] = effectiveADR;\n\n        break;\n\n      case 0x6 :\n        // jumpf\n        if ( !( registers[Rd] === 1 ) ) control['pc'] = effectiveADR;\n        break;\n\n      case 0x7 :\n        // jumpt\n        if ( registers[Rd] === 1 ) control['pc'] = effectiveADR;\n        break;\n\n      case 0x8 :\n        // jal\n        registers[Rd] = control['pc'] + 2;\n        control['pc'] = effectiveADR;\n        break;\n\n      case 0x9 :\n        // testset\n        registers[Rd] = effectiveADR;\n        memory[effectiveADR] = 1;\n\n        break;\n\n      default :\n\n        break;\n    }\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory\n    };\n  }\n\n  function processEXPInstruction( control, registers, memory, Rd, Ra, Rb, adr ) {\n    return { \n      'control' : control,\n      'registers' : registers, \n      'memory' : memory \n    };\n  }\n\n  export function runMemory( control, registers, memory, input, output ) {\n    var halted = false;\n    var processed = {};\n\n    var startpc = control['pc'];\n\n    var instructionWords = 0;\n\n    var instructionIr = memory[startpc];\n    var instructionADR = 0;\n\n    var Op = Math.floor( memory[startpc] / firstColumn );\n    var Rd = Math.floor( ( memory[startpc] - ( Op * firstColumn ) ) / secondColumn );\n    var Ra = Math.floor( ( memory[startpc] - ( Rd * secondColumn ) - ( Op * firstColumn ) ) / thirdColumn );\n    var Rb = Math.floor( ( memory[startpc] - ( Ra * thirdColumn ) - ( Rd * secondColumn ) - ( Op * firstColumn ) ) / fourthColumn );\n\n    var RaValue = registers[Ra];    \n    var RbValue = registers[Rb];\n\n    if ( ( RaValue & 0x8000 ) > 0 ) RaValue = readSignedHex( RaValue );\n    if ( ( RbValue & 0x8000 ) > 0 ) RbValue = readSignedHex( RbValue );\n\n    switch ( Op ) {\n      case 0x0 :\n        // add\n        instructionWords = 1;\n        registers[Rd] = RaValue + RbValue;\n\n        if ( ( registers[Rd] & 0x10000 ) > 0 ) {\n          registers[Rd] -= 0x10000;\n          registers[15] = 0b00000101 * secondColumn;\n        } else {\n          registers[15] = 0;\n        }\n        \n        registers[15] += compareRegisters( registers[Rd], registers[0] );\n\n        break;\n\n      case 0x1 :\n        // sub\n        instructionWords = 1;\n        \n        if ( RaValue < RbValue ) {\n          registers[Rd] = ( RaValue + 0x10000 );\n          registers[15] = 0b00000010 * secondColumn;\n        } else {\n          registers[Rd] = RaValue;\n          registers[15] = 0;\n        }\n\n        registers[Rd] -= RbValue;\n\n        registers[15] += compareRegisters( registers[Rd], registers[0] );\n\n        break;\n\n      case 0x2 :\n        // mul\n        instructionWords = 1;\n        registers[Rd] = RaValue * RbValue;\n        registers[15] = 0;\n\n        if ( ( registers[Rd] >= 0x10000 ) > 0 ) registers[15] = 0b00000010 * secondColumn;\n        while ( ( registers[Rd] >= 0x10000 ) > 0 ) { registers[Rd] -= 0x10000; };\n        \n        registers[15] += compareRegisters( registers[Rd], registers[0] );\n\n        break;\n\n      case 0x3 :\n        // div\n        instructionWords = 1;\n\n        if ( RbValue !== 0 ) {          \n          registers[Rd] = Math.floor( RaValue / RbValue );\n          registers[15] = RaValue % RbValue\n        } else {\n          registers[Rd] = RaValue;\n          registers[15] = 0\n        }\n\n        break;\n\n      case 0x4 :\n        // cmp\n        instructionWords = 1;\n        registers[15] = compareRegisters( registers[Ra], registers[Rb] );\n\n        break;\n\n      case 0x5 :\n        // cmplt\n        instructionWords = 1;\n        ( RaValue < RbValue ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        \n        break;\n\n      case 0x6 :\n        // cmpeq\n        instructionWords = 1;\n        ( RaValue === RbValue ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0x7 :\n        // cmpgt\n        instructionWords = 1;\n        ( RaValue > RbValue ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0x8 :\n        // inv\n        instructionWords = 1;\n        registers[Ra] = RbValue ^ 0xffff;\n\n        break;\n\n      case 0x9 :\n        // and\n        instructionWords = 1;\n        RaValue = ( RaValue === 1 );\n        RbValue = ( RbValue === 1 );\n        ( RaValue && RbValue ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0xa :\n        // or\n        instructionWords = 1;\n        RaValue = ( RaValue === 1 );\n        RbValue = ( RbValue === 1 );\n        ( RaValue || RbValue ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0xb :\n        // xor\n        instructionWords = 1;\n        RaValue = ( RaValue === 1 );\n        RbValue = ( RbValue === 1 );\n        ( RaValue ^ RbValue ) ? registers[Rd] = 1 : registers[Rd] = 0;\n        break;\n\n      case 0xc :\n        // nop\n        instructionWords = 1;\n\n        break;\n\n      case 0xd :\n        // trap\n        instructionWords = 1;\n        processed = processTRAPInstruction( control, registers, memory, input, output, Rd, Ra, Rb, instructionADR );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n        input = processed['input'];\n        output = processed['output'];\n\n        halted = processed['halted'];\n\n        break;\n\n      case 0xe :\n        instructionWords = 2;\n        instructionADR = memory[control['pc'] + 1];\n        processed = processEXPInstruction( control, registers, memory, Rd, Ra, Rb, instructionADR );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n\n        break;\n\n      case 0xf :\n        instructionWords = 2;\n        instructionADR = memory[control['pc'] + 1];\n        processed = processRXInstruction( control, registers, memory, Rd, Ra, Rb, instructionADR );\n\n        control = processed['control'];\n        registers = processed['registers'];\n        memory = processed['memory'];\n        \n        break;\n\n      default :\n        instructionWords = 1;\n        halted = true;\n        break;\n    }\n\n    for ( var it = 0; it < 16; it++ ) {\n      if ( registers[it] < 0 ) {\n        registers[it] = readUnsignedHex( registers[it] );\n      }\n    }\n\n    // R0 holds constant 0\n    registers[0] = 0;\n\n    control['ir'] = instructionIr;\n    control['adr'] = instructionADR;\n\n    if ( control['pc'] === startpc ) control['pc'] += instructionWords; \n\n    if ( Object.values( registers ).includes( NaN ) || Object.values( registers ).includes( undefined )  ) {\n      console.log( control )\n      console.log( registers )\n      console.log( memory )\n\n      output += '==== SEVERE SYSTEM ERROR ====';\n\n      halted = true;\n    }\n\n    return { \n      'control' : control, \n      'registers' : registers, \n      'memory' : memory, \n      'input': input, \n      'output' : output, \n      'halted' : halted \n    };\n  }\n","import React from 'react';\n\nimport 'codemirror/lib/codemirror.css';\nimport './ProgramEditorView.css';\n\nimport { Link } from 'react-router-dom';\nimport { Alert, Button, ButtonGroup, Col, InputGroup, Modal, OverlayTrigger, Row, Tooltip } from 'react-bootstrap';\nimport { FaBug, FaCheck, FaHammer, FaPen, FaPlay, FaTimes } from 'react-icons/fa';\nimport CodeMirror from 'react-codemirror';\n\nimport * as Emulator from './utils/Emulator';\n\nimport NavBar from './NavBar';\n\nrequire( './utils/mode/sigma16' );\n\nexport default class ProgramEditorView extends React.PureComponent {\n// CLASS METHODS\n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n\n      lineError : {},\n\n      highlightedCodeChunk : true,\n\n      alertShow : false,\n      alertMessage : '',\n      alertNature : 'success',\n\n      runModalShow : false,\n      outputZoomed : false,\n\n      inputModalShow : false,\n\n      machineCode : [],\n      machineCodeUpdated : false,\n\n      registers : {\n        0 : 0,\n        1 : 0,\n        2 : 0,\n        3 : 0,\n        4 : 0,\n        5 : 0,\n        6 : 0,\n        7 : 0,\n        8 : 0,\n        9 : 0,\n        10 : 0,\n        11 : 0,\n        12 : 0,\n        13 : 0,\n        14 : 0,\n        15 : 0\n      },\n      cpuControl : {\n        'pc' : 0,\n        'ir' : 0,\n        'adr' : 0\n      },\n\n      memory : {},\n\n      output : '',\n\n      input : ''\n    };\n  }\n\n  componentDidMount() {\n    if ( this.props.location.state ) {\n      this.setState( { code : this.props.location.state.code } );\n      this.setState( { breakpoints : this.props.location.state.breakpoints } );\n    } else if ( this.props.code !== undefined ) {\n      this.setState( { code : this.props.code } );\n      this.setState( { breakpoints : this.props.breakpoints } );\n    }\n  }\n\n// BREAKPOINTS\n  breakpointsColumn( code ) {\n    var breakpoints = [];\n    var lines = code.split( '\\n' );\n\n    var codeArea = document.getElementById( 'code-area' );\n\n    if ( codeArea ) {\n      // deal with code chunk height in this function since only column rendered\n      codeArea.style.height = ( 25 * ( lines.length ) ) + 18 + 'px';\n\n      for ( var i = 0; i < lines.length; i++ ) {\n        var yOffset = 25 * ( i + 0.5 );\n        var styleTop = yOffset + 3 +'px';\n\n        var id = 'breakpoint ' + ( i + 1 );\n        var className = 'breakpoint ' + ( i + 1 );\n\n        if ( this.state.breakpoints.includes( i + 1 ) ) {\n          className = className + ' active';\n        } if ( Object.keys( this.state.lineError ).includes( String( i + 1 ) ) ) {\n          className = className + ' error';\n\n          var error = this.state.lineError[String( i + 1 )];\n\n          breakpoints.push( \n            <OverlayTrigger\n              key={className+' tooltip'}\n              placement={'right'}\n              overlay={\n                <Tooltip>\n                  {error}\n                </Tooltip>\n              }>\n              <div \n                key={id}\n                id={id} \n                className={className} \n                style={{top : styleTop}} \n                onClick={this.breakpointOnClick}/>\n            </OverlayTrigger>\n          );\n        } else {\n          breakpoints.push( \n            <div \n              key={id}\n              id={id} \n              className={className} \n              style={{top : styleTop}} \n              onClick={this.breakpointOnClick}/>\n          );\n        }\n      }\n      return breakpoints;\n    }\n  }\n\n  breakpointOnClick = breakpoint => {\n    var breakpoints = this.state.breakpoints;\n\n    if ( breakpoint.currentTarget.classList.contains( 'active' ) ) {\n      breakpoint.currentTarget.classList.remove( 'active' );\n      var index = breakpoints.indexOf( Number( breakpoint.currentTarget.id.slice( 'breakpoint '.length, breakpoint.currentTarget.id.length ) ) );\n      breakpoints.splice( index, 1 );\n    } else {\n      breakpoint.currentTarget.classList.add( 'active' );\n      breakpoints.push( Number( breakpoint.currentTarget.id.slice( 'breakpoint '.length, breakpoint.currentTarget.id.length ) ) );\n    }\n\n    this.setState( { breakpoints : breakpoints } );\n  }\n\n  disableBreakpoints = button => {\n    this.setState( { breakpoints : [] } );\n  }\n\n// REGISTER/MEMORY METHODS\n  controlColumn() {\n    var controls = [];\n    var controlKeys = Object.keys( this.state.cpuControl );\n\n    for ( var i = 0; i < controlKeys.length; i++ ) {\n      controls.push( \n        <div \n          key={'control ' + controlKeys[i]}\n          id={'control ' + controlKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{controlKeys[i]}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n                ${Emulator.writeHex( this.state.cpuControl[controlKeys[i]] )}\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return controls;\n  }\n  //\n  registerColumn() {\n    var registers = [];\n\n    for ( var i = 0; i < 16; i++ ) {\n      registers.push( \n        <div \n          key={'register ' + i}\n          id={'register ' + i}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{'R'+i}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.registers[i] )}/{ Emulator.readSignedHex( this.state.registers[i] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.registers[i] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return registers;\n  }\n  //\n  outputColumn() {\n    return ( \n      <div style={{height:'100%', width:'100%'}}>\n        <InputGroup \n          className='output-area'\n          as='textarea'\n          value={this.state.output}\n          onClick={this.resizeOutput}\n          disabled/>\n      </div>\n    );\n  }\n  //\n  memoryColumn() {\n    var memoryValues = [];\n    var memoryKeys = Object.keys( this.state.memory ).map( key => Number( key ) );\n\n    for ( var i = 0; i < memoryKeys.length; i++ ) {\n      memoryValues.push( \n        <div \n          key={'memory ' + memoryKeys[i]}\n          id={'memory ' + memoryKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>${Emulator.writeHex( memoryKeys[i] )}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.memory[memoryKeys[i]] ) }/{ Emulator.readSignedHex( this.state.memory[memoryKeys[i]] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.memory[memoryKeys[i]] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return memoryValues;\n  }\n\n// ALERT METHODS\n  updateAlert( message, nature ) {\n    this.setState( { alertMessage : message } );\n    this.setState( { alertNature : nature } );\n    this.setState( { alertShow : true } );\n  }\n\n  closeAlert = alert => {\n    this.setState( { alertShow : false } );\n  }\n\n// RUN MODAL METHODS\n  runModalClose = modal => {\n    this.resetCPUandMemory();\n    this.setState( { runModalShow : false } );\n  }\n\n  resizeOutput = outputColumn => {\n    var target = outputColumn.currentTarget;\n\n    // if currently zoomed and are setting to smaller\n    if ( this.state.outputZoomed ) {\n      target.style.height = '82px';\n    } else {\n      target.style.height = '518px';\n    }\n\n    this.setState( { outputZoomed : !( this.state.outputZoomed ) } );\n  }\n\n// CHECKING METHOD\n  checkCode( code ) {\n    var lines = code.toLowerCase().split( '\\n' );\n    var check = true;\n\n    var lineErrorCopy = {};\n\n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var ranSuccessfully = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      parsed = Emulator.parseLineForLabels( lines[i] );\n\n      if ( parsed['label'] !== '' ) {\n        if ( parsed['justLabel'] ) {\n          justLabelOffset += 1;\n          labels[parsed['label']] = currentLine - justLabelOffset + 1;\n        } else {\n          labels[parsed['label']] = currentLine - justLabelOffset;\n        }\n      }\n\n      currentLine += parsed['instructionWords'];\n    }\n\n    for ( var it = 0; it < lines.length; it++ ) {\n      check = Emulator.checkLine( lines[it], labels );\n      if ( check.length ) {\n        lineErrorCopy[it + 1] = check;\n        ranSuccessfully = false;\n      }\n    }\n\n    this.setState( { lineError : lineErrorCopy } );\n\n    return [ranSuccessfully, lineErrorCopy];\n  }\n\n// PARSING METHOD\n  parseCode = button => {\n    var lines = this.state.code.split( '\\n' );\n    \n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var machineCode = [];\n\n    var check = this.checkCode( this.state.code );\n\n    if ( check[0] ) {\n      for ( var i = 0; i < lines.length; i++ ) {\n        parsed = Emulator.parseLineForLabels( lines[i] );\n\n        if ( parsed['label'] !== '' ) {\n          if ( parsed['justLabel'] ) {\n            justLabelOffset += 1;\n            labels[parsed['label']] = currentLine - justLabelOffset + 1;\n          } else {\n            labels[parsed['label']] = currentLine - justLabelOffset;\n          }\n        }\n\n        currentLine += parsed['instructionWords'];\n      }\n\n      for ( var it = 0; it < lines.length; it++ ) {\n        var trimmed = lines[it].trim();\n        if ( trimmed !== '' && trimmed.split( ';' )[0] !== '' ) {\n          parsed = Emulator.parseLineForMachineCode( lines[it], labels );\n          if ( parsed ) {\n            machineCode.push( parsed[0] );\n            \n            // if two word instruction\n            if ( Emulator.isValidNumber( Emulator.readSignedHex( parsed[1] ) ) ) {\n              machineCode.push( parsed[1] );\n            }\n          }\n        }\n      }\n      this.setState( { machineCode : machineCode } );\n      this.setState( { machineCodeUpdated : true } );\n\n      this.updateAlert( 'Built successfully', 'success' );\n    } else {\n      var keys = Object.keys( check[1] )\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', '\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n    }\n\n    return machineCode;\n  }\n\n// RUNNING METHODS\n  resetCPUandMemory() {\n    var registersNew = {\n      0 : 0,\n      1 : 0,\n      2 : 0,\n      3 : 0,\n      4 : 0,\n      5 : 0,\n      6 : 0,\n      7 : 0,\n      8 : 0,\n      9 : 0,\n      10 : 0,\n      11 : 0,\n      12 : 0,\n      13 : 0,\n      14 : 0,\n      15 : 0\n    };\n\n    var cpuControlNew = {\n      'pc' : 0,\n      'ir' : 0,\n      'adr' : 0\n    };\n\n    var outputNew = '';\n\n    this.setState( { registers : registersNew } );\n    this.setState( { cpuControl : cpuControlNew } );\n    this.setState( { output : outputNew } );\n  }\n\n  canRunCode( code, machineCode ) {\n    var error = true;\n\n    if ( machineCode.length !== 0 ) {\n      if ( !machineCode.includes( 0xd000 ) ) {\n        error = 'Cannot run code without a \"trap R0,R0,R0\" instruction';\n      }\n    } else {\n      // machine language is blank\n      error = 'Cannot run no code. Try building then running';\n    }\n    return error;\n  }\n\n  runCode = button => {\n    // implicit build if needed\n    var machineCode = [];\n    if ( this.machineCodeUpdated ) {\n      machineCode = this.state.machineCode;\n    } else {\n      machineCode = this.parseCode();\n    }\n\n    var canRun = this.canRunCode( this.state.code, machineCode );\n    var ran = {\n      halted : false\n    };\n\n    if ( !canRun.length ) {\n      var localControl = this.state.cpuControl;\n      var localRegisters = this.state.registers;\n      var localMemory = Emulator.setMemory( machineCode );\n      var localInput = this.state.input;\n      var localOutput = this.state.output;\n\n      while ( !( ran['halted'] ) ) {\n        ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n        localControl = ran['control'];\n        localRegisters = ran['registers'];\n        localMemory = ran['memory'];\n        localInput = ran['input'];\n        localOutput = ran['output'];\n\n        // if ran out of commands\n        if ( !( Object.keys( localMemory ).includes( String( localControl['pc'] ) ) ) ) ran['halted'] = true;\n      }\n\n      this.setState( { cpuControl : localControl } );\n      this.setState( { registers : localRegisters } );\n      this.setState( { memory : localMemory } );\n      this.setState( { output : localOutput } );\n\n      this.setState( { outputZoomed : false } );\n      this.setState( { runModalShow : true } );\n    } else {\n      this.updateAlert( canRun, 'danger' );\n    }\n  }\n\n// INPUT MODAL METHODS\n  setInput = button => {\n    this.setState( { inputModalShow : true } );\n  }\n\n  inputUpdate = textarea => {\n    this.setState( { input : textarea.target.value } );\n  }\n\n  inputModalClose = modal => {\n    this.setState( { inputModalShow : false } );\n  }\n\n// CODEMIRROR METHODS\n  updateCode = newCode => {\n    if ( !( newCode.split( '\\n' ).length > 500 ) ) {\n      this.checkCode( newCode );\n    }\n\n    // updating code based on contents of codemirror\n    if ( newCode ) {\n      this.setState( { code : newCode } );\n    } else {\n      this.setState( { code : ' ' } );\n    }\n    this.setState( { machineCodeUpdated : false  } );\n  }\n\n// CODE CHUNK METHODS\n  createLineNumberColumn() {\n    var linesOfCode = this.state.code.split( '\\n' ).length;\n    var result = [];\n\n    var lineNoWidth = '21px';\n\n    var lineNoWidthLength = ( Math.log( linesOfCode ) * Math.LOG10E + 1 ) | 0;\n\n    if ( lineNoWidthLength > 2 ) {\n      lineNoWidth = ( ( lineNoWidthLength * 7 ) + 7 ) + 'px';\n    }\n\n    for ( var i = 0; i < linesOfCode; i++ ) {\n      var yOffset = 25 * ( i + 0.5 );\n\n      result.push(\n        <div\n          key={'line-number ' + ( i + 1 )} \n          className='line-number'\n          style={{top:{yOffset}, width:lineNoWidth}}>\n          {i + 1}\n        </div>\n      );\n    }\n\n    return result;\n  }\n  //\n  codeBlockEdit = divContent => {\n    if ( !( divContent.target.value.split( '\\n' ).length > 500 ) ) {\n      this.checkCode( divContent.target.value );\n    }\n\n    if ( divContent.target.value ) {\n      this.setState( { code : divContent.target.value } );\n    } else {\n      this.setState( { code : ' ' } );\n    }\n    this.setState( { machineCodeUpdated : false  } );\n  }\n\n  toggleHighlighting = button => {\n    this.setState( { highlightedCodeChunk : !( this.state.highlightedCodeChunk ) } );\n  }\n\n// RENDER\n  render() {\n    return(\n      <React.Fragment>\n        <NavBar state={{code : this.state.code, breakpoints : this.state.breakpoints, input : this.state.input}}/>\n        <Modal\n          show={this.state.runModalShow}\n          onHide={this.runModalClose}\n          dialogClassName=\"runmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Program Register and Memory Values\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            { !( this.state.outputZoomed ) &&\n              <Row>\n                <Col>\n                  <h6>\n                    Control/Registers\n                  </h6>\n                </Col>\n                <Col>\n                  <h6>\n                    Memory/Output\n                  </h6>\n                </Col>\n              </Row>\n            }\n            <Row>\n              { !( this.state.outputZoomed ) &&\n                <Col className='runmodal-left-col'>\n                  <div id='control-column' className='control-column'>\n                    {this.controlColumn()}\n                  </div>\n                  <div id='register-column' className='register-column'>\n                    {this.registerColumn()}\n                  </div>\n                </Col>\n              }\n              <Col>\n                { !( this.state.outputZoomed ) &&\n                  <div id='memory-column' className='memory-column'>\n                    {this.memoryColumn()}\n                  </div>\n                }\n                <div id='output-column' className='output-column' onDoubleClick={this.resizeOutput}>\n                  {this.outputColumn()}\n                </div>\n              </Col>\n            </Row>\n          </Modal.Body>\n        </Modal>\n\n        <Modal\n          show={this.state.inputModalShow}\n          onHide={this.inputModalClose}\n          dialogClassName=\"inputmodal\"\n          animation={false} >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              Set Input\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className='input-column'>\n              <InputGroup\n                as='textarea'\n                className='input-modal-input'\n                value={this.state.input}\n                onChange={this.inputUpdate}\n                autoFocus/>\n            </div>\n            <div style={{paddingTop : '15px'}}>\n              <Button variant='outline-secondary' onClick={this.inputModalClose} style={{float : 'right'}}>\n                Set Input\n              </Button>\n            </div>\n          </Modal.Body>\n        </Modal>\n\n        <div className='mainbody'>\n          <Alert variant={this.state.alertNature} onClose={this.closeAlert} show={this.state.alertShow} dismissible>\n            <p className='alertbody'>\n              {this.state.alertMessage}\n            </p>\n          </Alert>\n          <Row className='buttontoolbar'>\n            <Col>\n              <ButtonGroup>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Set input`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.setInput}>\n                    <FaPen/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Build`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.parseCode}>\n                    <FaHammer/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.runCode}>\n                    <FaPlay/>\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n            </Col>\n            <Col>\n              <OverlayTrigger\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Disable all breakpoints`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.disableBreakpoints}>\n                  <FaTimes/>\n                </Button>\n              </OverlayTrigger>\n              {' '}\n              \n              <Link to={{\n                pathname : \"/debug\",\n                state : {code : this.state.code, breakpoints : this.state.breakpoints}\n                }}>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run in debug mode`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm'>\n                    <FaBug/>\n                  </Button>\n                </OverlayTrigger>\n              </Link>\n            </Col>\n            <Col>\n              <OverlayTrigger\n                key={`highlighting-tooltip`}\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Toggle highlighting\n                    improves speed if disabled`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.toggleHighlighting} active={this.state.highlightedCodeChunk}>\n                  <FaCheck/>\n                </Button>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div id=\"code-area\" className='code-area'> \n                <div id='breakpoint-column' className='breakpoint-column'>\n                  {this.breakpointsColumn(this.state.code)}\n                </div>\n                <div className='line-number-column'>\n                  {this.createLineNumberColumn()}\n                </div>\n                { this.state.code &&\n                  <React.Fragment>\n                    { this.state.highlightedCodeChunk ?\n                      <CodeMirror\n                        mode='sigma16'\n                        value={this.state.code} \n                        onChange={this.updateCode} \n                        options={{ lineNumbers : false, scrollbarStyle: \"null\" }}\n                        autoFocus/>\n                    : \n                      <React.Fragment>\n                        \n                        <InputGroup\n                          as='textarea'\n                          className='code-chunk-column'\n                          value={this.state.code}\n                          onChange={this.codeBlockEdit}\n                          autoFocus/>\n                      </React.Fragment>\n                    }\n                  </React.Fragment>\n                }\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport 'codemirror/lib/codemirror.css';\nimport './ProgramDebugView.css';\n\nimport { Alert, Button, ButtonGroup, Col, InputGroup, OverlayTrigger, Row, Tooltip } from 'react-bootstrap';\nimport { FaPlay, FaBackward, FaStepForward, FaTimes } from 'react-icons/fa';\n\nimport * as Emulator from './utils/Emulator';\n\nimport NavBar from './NavBar';\n\nexport default class ProgramDebugView extends React.Component {\n// CLASS METHODS \n  constructor( props, context ) {\n    super( props );\n\n    this.state = {\n      code : '',\n      breakpoints : [],\n\n      alertShow : false,\n      alertMessage : '',\n      alertNature : 'success',\n\n      machineCode : [],\n\n      registers : {\n        0 : 0,\n        1 : 0,\n        2 : 0,\n        3 : 0,\n        4 : 0,\n        5 : 0,\n        6 : 0,\n        7 : 0,\n        8 : 0,\n        9 : 0,\n        10 : 0,\n        11 : 0,\n        12 : 0,\n        13 : 0,\n        14 : 0,\n        15 : 0\n      },\n      cpuControl : {\n        'pc' : 0,\n        'ir' : 0,\n        'adr' : 0\n      },\n\n      memory : {},\n\n      output : '',\n\n      input : '',\n\n      // special methods for debugging\n      lastLine : 0,\n      activeLine : 0,\n\n      breakpointsMachineCode : [],\n\n      halted : false\n    };\n  }\n\n  componentDidMount() {\n    var code = '';\n    var breakpoints = [];\n    if ( this.props.location.state ) {\n      code = this.props.location.state.code;\n      breakpoints = this.props.location.state.breakpoints;\n\n      this.setState( { code : this.props.location.state.code } );\n      this.setState( { breakpoints : this.props.location.state.breakpoints } );\n    } else if ( this.props.code !== undefined ) {\n      code = this.props.code;\n      code = this.props.code;\n\n      this.setState( { code : this.props.code } );\n      this.setState( { breakpoints : this.props.breakpoints } );\n    }\n    var machineCode = this.parseCode( code, breakpoints );\n\n    this.setState( { memory : Emulator.setMemory( machineCode ) } )\n  }\n\n// BREAKPOINTS\n  disableBreakpoints = button => {\n    this.setState( { breakpoints : [] } );\n    this.setState( { breakpointsMachineCode : [] } );\n  }\n\n// REGISTER/MEMORY METHODS\n  controlColumn() {\n    var controls = [];\n    var controlKeys = Object.keys( this.state.cpuControl );\n\n    for ( var i = 0; i < controlKeys.length; i++ ) {\n      controls.push( \n        <div \n          key={'control ' + controlKeys[i]}\n          id={'control ' + controlKeys[i]}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{controlKeys[i]}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n                ${Emulator.writeHex( this.state.cpuControl[controlKeys[i]] )}\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return controls;\n  }\n  //\n  registerColumn() {\n    var registers = [];\n\n    for ( var i = 0; i < 16; i++ ) {\n      registers.push( \n        <div \n          key={'register ' + i}\n          id={'register ' + i}\n          className={'systeminfo-column-elem'}>\n          <Row>\n            <Col>\n              <strong>{'R'+i}</strong>\n            </Col>\n            <Col style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.registers[i] )}/{ Emulator.readSignedHex( this.state.registers[i] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.registers[i] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return registers;\n  }\n  //\n  outputColumn() {\n    return ( \n      <div style={{height:'100%', width:'100%'}}>\n        <InputGroup \n          className='output-area'\n          as='textarea'\n          value={this.state.output}\n          onClick={this.resizeOutput}\n          disabled/>\n      </div>\n    );\n  }\n  //\n  memoryColumn() {\n    var memoryValues = [];\n    var memoryKeys = Object.keys( this.state.memory ).map( key => Number( key ) );\n\n    for ( var i = 0; i < memoryKeys.length; i++ ) {\n      var classNameMemory = 'systeminfo-column-elem';\n      \n      if ( i === this.state.lastLine ) classNameMemory = 'systeminfo-column-elem last';\n      if ( i === this.state.activeLine ) classNameMemory = 'systeminfo-column-elem active';\n      if ( this.state.breakpointsMachineCode.includes( i ) ) classNameMemory = 'systeminfo-column-elem break';\n\n      memoryValues.push( \n        <div \n          key={'memory ' + memoryKeys[i]}\n          id={'memory ' + memoryKeys[i]}\n          className={classNameMemory}>\n          <Row>\n            <Col className={classNameMemory}>\n              <strong>${Emulator.writeHex( memoryKeys[i] )}</strong>\n            </Col>\n            <Col className={classNameMemory} style={{textAlign:'right'}}>\n              <OverlayTrigger\n                key={'left'}\n                placement={'left'}\n                overlay={\n                  <Tooltip>\n                    { Emulator.readUnsignedHex( this.state.memory[memoryKeys[i]] ) }/{ Emulator.readSignedHex( this.state.memory[memoryKeys[i]] ) }\n                  </Tooltip>\n                }>\n                <span>\n                  ${Emulator.writeHex( this.state.memory[memoryKeys[i]] )}\n                </span>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n        </div> \n      );\n    }\n\n    return memoryValues;\n  }\n\n// CHECKING METHOD\n  checkCode( code ) {\n    var lines = code.toLowerCase().split( '\\n' );\n    var check = true;\n\n    var lineErrorCopy = {};\n\n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var ranSuccessfully = true;\n\n    for ( var i = 0; i < lines.length; i++ ) {\n      parsed = Emulator.parseLineForLabels( lines[i] );\n\n      if ( parsed['label'] !== '' ) {\n        if ( parsed['justLabel'] ) {\n          justLabelOffset += 1;\n          labels[parsed['label']] = currentLine - justLabelOffset + 1;\n        } else {\n          labels[parsed['label']] = currentLine - justLabelOffset;\n        }\n      }\n\n      currentLine += parsed['instructionWords'];\n    }\n\n    for ( var it = 0; it < lines.length; it++ ) {\n      check = Emulator.checkLine( lines[it], labels );\n      if ( check.length ) {\n        lineErrorCopy[it + 1] = check;\n        ranSuccessfully = false;\n      }\n    }\n\n    this.setState( { lineError : lineErrorCopy } );\n\n    return [ranSuccessfully, lineErrorCopy];\n  }\n\n// PARSING METHOD\n  parseCode( code, breakpoints ) {\n    var lines = code.split( '\\n' );\n    \n    var currentLine = 0;\n\n    var parsed = {};\n    var labels = {};\n    var justLabelOffset = 0;\n\n    var machineCode = [];\n\n    var check = this.checkCode( code );\n\n    if ( check[0] ) {\n      for ( var i = 0; i < lines.length; i++ ) {\n        parsed = Emulator.parseLineForLabels( lines[i] );\n\n        if ( parsed['label'] !== '' ) {\n          if ( parsed['justLabel'] ) {\n            justLabelOffset += 1;\n            labels[parsed['label']] = currentLine - justLabelOffset + 1;\n          } else {\n            labels[parsed['label']] = currentLine - justLabelOffset;\n          }\n        }\n\n        currentLine += parsed['instructionWords'];\n      }\n\n      var nextLineBreakpoint = false;\n      var breakpointsMachineCode = [];\n\n      for ( var it = 0; it < lines.length; it++ ) {\n        var trimmed = lines[it].trim();\n\n        if ( breakpoints.includes( it+1 ) ) nextLineBreakpoint = true; \n\n        if ( trimmed !== '' && trimmed.split( ';' )[0] !== '' ) {\n          parsed = Emulator.parseLineForMachineCode( lines[it], labels );\n          if ( parsed ) {\n            if ( nextLineBreakpoint ) {\n              breakpointsMachineCode.push( machineCode.length );\n              nextLineBreakpoint = false;\n            }\n\n            machineCode.push( parsed[0] );\n            \n            // if two word instruction\n            if ( Emulator.isValidNumber( Emulator.readSignedHex( parsed[1] ) ) ) {\n              machineCode.push( parsed[1] );\n            }\n          }\n        }\n      }\n\n      this.setState( { machineCode : machineCode } );\n      this.setState( { breakpointsMachineCode : breakpointsMachineCode } );\n    } else {\n      var keys = Object.keys( check[1] )\n      var keysString = '';\n\n      for ( var ite = 0; ite < keys.length; ite++ ) {\n        if ( ite !== 0 ) {\n          keysString += ', '\n        }\n\n        keysString += keys[ite];\n      }\n\n      this.updateAlert( 'Built unsuccesfully, correct syntax errors at line(s): ' + keysString, 'danger' );\n    }\n\n    return machineCode;\n  }\n\n// RUNNING METHODS\n  resetCPUandMemory() {\n    var registersNew = {\n      0 : 0,\n      1 : 0,\n      2 : 0,\n      3 : 0,\n      4 : 0,\n      5 : 0,\n      6 : 0,\n      7 : 0,\n      8 : 0,\n      9 : 0,\n      10 : 0,\n      11 : 0,\n      12 : 0,\n      13 : 0,\n      14 : 0,\n      15 : 0\n    };\n\n    var cpuControlNew = {\n      'pc' : 0,\n      'ir' : 0,\n      'adr' : 0\n    };\n\n    var outputNew = '';\n\n    this.setState( { registers : registersNew } );\n    this.setState( { cpuControl : cpuControlNew } );\n    this.setState( { output : outputNew } );\n  }\n\n  canRunCode( code, machineCode ) {\n    var error = true;\n\n    if ( machineCode.length !== 0 ) {\n      if ( !machineCode.includes( 0xd000 ) ) {\n        error = 'Cannot run code without a \"trap R0,R0,R0\" instruction';\n      }\n    } else {\n      // machine language is blank\n      error = 'Cannot run no code. Try building then running';\n    }\n    return error;\n  }\n\n  runCode = button => {\n    var canRun = this.canRunCode( this.state.code, this.state.machineCode );\n    var ran = {\n      halted : false\n    };\n\n    if ( !canRun.length ) {\n      var localControl = this.state.cpuControl;\n      var localRegisters = this.state.registers;\n      var localMemory = Emulator.setMemory( this.state.machineCode );\n      var localInput = this.state.input;\n      var localOutput = this.state.output;\n\n      var lastRanLine = this.state.activeLine;\n\n      var encounteredBreakpoint = false;\n\n      while ( !( ran['halted'] ) && !encounteredBreakpoint ) {\n        if ( ran['control'] !== undefined ) {\n          lastRanLine = ran['control']['pc'];\n        }\n\n        ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n        localControl = ran['control'];\n        localRegisters = ran['registers'];\n        localMemory = ran['memory'];\n        localInput = ran['input'];\n        localOutput = ran['output'];\n\n        // if ran out of commands\n        if ( !( Object.keys( localMemory ).includes( String( localControl['pc'] ) ) ) ) ran['halted'] = true;\n        \n        if ( this.state.breakpointsMachineCode.includes( ran['control']['pc'] ) ) {\n          encounteredBreakpoint = true;\n        }\n      }\n\n      this.setState( { cpuControl : localControl } );\n      this.setState( { registers : localRegisters } );\n      this.setState( { memory : localMemory } );\n      this.setState( { output : localOutput } );\n\n      this.setState( { lastLine : lastRanLine } );\n      this.setState( { activeLine : localControl['pc'] } );\n      this.setState( { halted : ran['halted'] } );\n    } else {\n      this.updateAlert( canRun, 'danger' );\n    }\n  }\n\n  stepForward = button => {\n    var canRun = this.canRunCode( this.state.code, this.state.machineCode );\n    var ran = {\n      halted : false\n    };\n\n    var localControl = this.state.cpuControl;\n    var localRegisters = this.state.registers;\n    var localMemory = Emulator.setMemory( this.state.machineCode );\n    var localInput = this.state.input;\n    var localOutput = this.state.output;\n\n    ran = Emulator.runMemory( localControl, localRegisters, localMemory, localInput, localOutput );\n\n    localControl = ran['control'];\n    localRegisters = ran['registers'];\n    localMemory = ran['memory'];\n    localInput = ran['input'];\n    localOutput = ran['output'];\n\n    // if ran out of commands\n    if ( !( Object.keys( localMemory ).includes( String( localControl['pc'] ) ) ) ) ran['halted'] = true;\n\n    this.setState( { cpuControl : localControl } );\n    this.setState( { registers : localRegisters } );\n    this.setState( { memory : localMemory } );\n    this.setState( { output : localOutput } );\n\n    this.setState( { lastLine : this.state.activeLine } );\n    this.setState( { activeLine : localControl['pc'] } );\n    this.setState( { halted : ran['halted'] } );\n  }\n\n  resetDebug = button => {\n    this.resetCPUandMemory();\n\n    this.setState( { memory : Emulator.setMemory( this.state.machineCode ) } );\n    \n    this.setState( { lastLine : 0 } );\n    this.setState( { activeLine : 0 } );\n    this.setState( { halted : false } );\n  }\n\n// RENDER\n  render() {\n    return(\n      <React.Fragment>\n        <NavBar state={{code : this.state.code, breakpoints : this.state.breakpoints}}/>\n        <div className=\"mainbody\">\n          <Alert variant={this.state.alertNature} onClose={this.closeAlert} show={this.state.alertShow} dismissible>\n            <p className='alertbody'>\n              {this.state.alertMessage}\n            </p>\n          </Alert>\n          <Row className='buttontoolbar'>\n            <Col>\n              <ButtonGroup>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Run till next breakpoint`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.runCode} disabled={this.state.halted}>\n                    <FaPlay/>\n                  </Button>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement={'top'}\n                  overlay={\n                    <Tooltip>\n                      {`Step Forward`}\n                    </Tooltip>\n                  }>\n                  <Button variant='outline-secondary' size='sm' onClick={this.stepForward} disabled={this.state.halted}>\n                    <FaStepForward/>\n                  </Button>\n                </OverlayTrigger>\n              </ButtonGroup>\n            </Col>\n            <Col>\n              <OverlayTrigger\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Disable all breakpoints`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.disableBreakpoints}>\n                  <FaTimes/>\n                </Button>\n              </OverlayTrigger>\n              {' '}\n              <OverlayTrigger\n                placement={'top'}\n                overlay={\n                  <Tooltip>\n                    {`Rerun`}\n                  </Tooltip>\n                }>\n                <Button variant='outline-secondary' size='sm' onClick={this.resetDebug}>\n                  <FaBackward/>\n                </Button>\n              </OverlayTrigger>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h6>\n                Control/Registers\n              </h6>\n            </Col>\n            <Col>\n              <h6>\n                Memory/Output\n              </h6>\n            </Col>\n          </Row>\n          <Row>\n            <Col className='runmodal-left-col'>\n              <div id='control-column' className='control-column'>\n                {this.controlColumn()}\n              </div>\n              <div id='register-column' className='register-column'>\n                {this.registerColumn()}\n              </div>\n            </Col>\n            <Col>\n              <div id='memory-column' className='memory-column'>\n                {this.memoryColumn()}\n              </div>\n              <div id='output-column' className='output-column' onDoubleClick={this.resizeOutput}>\n                {this.outputColumn()}\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport './App.css';\n\nimport { HashRouter, Switch } from 'react-router-dom';\n\nimport AppliedRoute from './AppliedRoute';\nimport HomeView from './components/HomeView';\nimport DocumentationView from './components/DocumentationView';\nimport ProgramEditorView from './components/ProgramEditorView';\nimport ProgramDebugView from './components/ProgramDebugView';\n\nexport default class App extends React.Component {\n  constructor( props ) {\n    super( props );\n\n    this.state = {};\n\n    // the default program that takes up the code chunk\n    this.state.code = `lea r1,2[r0]\nlea r2,buffer[r0]\nload r3,buffersize[r0]\n\ntrap r1,r2,r3\n\ntrap r0,r0,r0\n\nbuffersize data 13\nbuffer data $0048\n  data $0065\n  data $006c\n  data $006c\n  data $006f\n  data $002c\n  data $0020\n  data $0057\n  data $006f\n  data $0072\n  data $006c\n  data $0064\n  data $0021`;\n\n    this.state.breakpoints = [];\n\n  }\n  render() {\n    var stateCode = this.state.code;\n    var stateBreakpoints = this.state.breakpoints;\n\n    return (\n      <React.Fragment>\n        <HashRouter>\n          <Switch>\n            <AppliedRoute exact path=\"/\" component={HomeView} props={{code : stateCode, breakpoints : stateBreakpoints}}/>\n            <AppliedRoute exact path=\"/documentation\" component={DocumentationView} props={{code : stateCode, breakpoints : stateBreakpoints}}/>\n            <AppliedRoute exact path=\"/editor\" component={ProgramEditorView} props={{code : stateCode, breakpoints : stateBreakpoints}}/>\n            <AppliedRoute exact path=\"/debug\" component={ProgramDebugView} props={{code : stateCode, breakpoints : stateBreakpoints}}/>\n          </Switch>\n        </HashRouter>\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}